
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c04  08003c04  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003c04  08003c04  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c04  08003c04  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000074  08003c80  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003c80  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4ec  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6f  00000000  00000000  0002d589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0002f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00030188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018061  00000000  00000000  00030f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f812  00000000  00000000  00048fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cc73  00000000  00000000  000587fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e546e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f4  00000000  00000000  000e54c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b58 	.word	0x08003b58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003b58 	.word	0x08003b58

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup 4E or 3F 27

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 f8ff 	bl	800139c <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000090 	.word	0x20000090

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 f8cf 	bl	800139c <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000090 	.word	0x20000090

0800020c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    switch (row)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d003      	beq.n	8000224 <lcd_put_cur+0x18>
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d005      	beq.n	800022e <lcd_put_cur+0x22>
 8000222:	e009      	b.n	8000238 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800022a:	603b      	str	r3, [r7, #0]
            break;
 800022c:	e004      	b.n	8000238 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000234:	603b      	str	r3, [r7, #0]
            break;
 8000236:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <lcd_send_cmd>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <lcd_init>:


void lcd_init (void)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800024e:	2032      	movs	r0, #50	; 0x32
 8000250:	f000 fc7a 	bl	8000b48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000254:	2030      	movs	r0, #48	; 0x30
 8000256:	f7ff ff79 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800025a:	2005      	movs	r0, #5
 800025c:	f000 fc74 	bl	8000b48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000260:	2030      	movs	r0, #48	; 0x30
 8000262:	f7ff ff73 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000266:	2001      	movs	r0, #1
 8000268:	f000 fc6e 	bl	8000b48 <HAL_Delay>
	lcd_send_cmd (0x30);
 800026c:	2030      	movs	r0, #48	; 0x30
 800026e:	f7ff ff6d 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000272:	200a      	movs	r0, #10
 8000274:	f000 fc68 	bl	8000b48 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000278:	2020      	movs	r0, #32
 800027a:	f7ff ff67 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800027e:	200a      	movs	r0, #10
 8000280:	f000 fc62 	bl	8000b48 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000284:	2028      	movs	r0, #40	; 0x28
 8000286:	f7ff ff61 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f000 fc5c 	bl	8000b48 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000290:	2008      	movs	r0, #8
 8000292:	f7ff ff5b 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 fc56 	bl	8000b48 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ff55 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 fc50 	bl	8000b48 <HAL_Delay>
	HAL_Delay(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 fc4d 	bl	8000b48 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002ae:	2006      	movs	r0, #6
 80002b0:	f7ff ff4c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f000 fc47 	bl	8000b48 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002ba:	200c      	movs	r0, #12
 80002bc:	f7ff ff46 	bl	800014c <lcd_send_cmd>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002cc:	e006      	b.n	80002dc <lcd_send_string+0x18>
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff68 	bl	80001ac <lcd_send_data>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f4      	bne.n	80002ce <lcd_send_string+0xa>
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fbc6 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f814 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 f920 	bl	8000540 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000300:	f000 f8f4 	bl	80004ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000304:	f000 f850 	bl	80003a8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000308:	f000 f87c 	bl	8000404 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800030c:	f7ff ff9d 	bl	800024a <lcd_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000310:	4803      	ldr	r0, [pc, #12]	; (8000320 <main+0x30>)
 8000312:	f001 ffb3 	bl	800227c <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000316:	2100      	movs	r1, #0
 8000318:	4801      	ldr	r0, [pc, #4]	; (8000320 <main+0x30>)
 800031a:	f002 f859 	bl	80023d0 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800031e:	e7fe      	b.n	800031e <main+0x2e>
 8000320:	200000e4 	.word	0x200000e4

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b090      	sub	sp, #64	; 0x40
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f002 ff8e 	bl	8003254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000346:	2302      	movs	r3, #2
 8000348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034e:	2310      	movs	r3, #16
 8000350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000352:	2302      	movs	r3, #2
 8000354:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000356:	2300      	movs	r3, #0
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800035a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800035e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4618      	mov	r0, r3
 8000366:	f001 fb1f 	bl	80019a8 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000370:	f000 fa06 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	2302      	movs	r3, #2
 800037a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fd8c 	bl	8001eac <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800039a:	f000 f9f1 	bl	8000780 <Error_Handler>
  }
}
 800039e:	bf00      	nop
 80003a0:	3740      	adds	r7, #64	; 0x40
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003ae:	4a13      	ldr	r2, [pc, #76]	; (80003fc <MX_I2C1_Init+0x54>)
 80003b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003b4:	4a12      	ldr	r2, [pc, #72]	; (8000400 <MX_I2C1_Init+0x58>)
 80003b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003e6:	f000 fe95 	bl	8001114 <HAL_I2C_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003f0:	f000 f9c6 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000090 	.word	0x20000090
 80003fc:	40005400 	.word	0x40005400
 8000400:	000186a0 	.word	0x000186a0

08000404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08e      	sub	sp, #56	; 0x38
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000418:	f107 0320 	add.w	r3, r7, #32
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
 8000430:	615a      	str	r2, [r3, #20]
 8000432:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000434:	4b2c      	ldr	r3, [pc, #176]	; (80004e8 <MX_TIM2_Init+0xe4>)
 8000436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 800043c:	4b2a      	ldr	r3, [pc, #168]	; (80004e8 <MX_TIM2_Init+0xe4>)
 800043e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000444:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <MX_TIM2_Init+0xe4>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800044a:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <MX_TIM2_Init+0xe4>)
 800044c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000452:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <MX_TIM2_Init+0xe4>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000458:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <MX_TIM2_Init+0xe4>)
 800045a:	2200      	movs	r2, #0
 800045c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800045e:	4822      	ldr	r0, [pc, #136]	; (80004e8 <MX_TIM2_Init+0xe4>)
 8000460:	f001 febc 	bl	80021dc <HAL_TIM_Base_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800046a:	f000 f989 	bl	8000780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800046e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000472:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000478:	4619      	mov	r1, r3
 800047a:	481b      	ldr	r0, [pc, #108]	; (80004e8 <MX_TIM2_Init+0xe4>)
 800047c:	f002 f9f0 	bl	8002860 <HAL_TIM_ConfigClockSource>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000486:	f000 f97b 	bl	8000780 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800048a:	4817      	ldr	r0, [pc, #92]	; (80004e8 <MX_TIM2_Init+0xe4>)
 800048c:	f001 ff48 	bl	8002320 <HAL_TIM_OC_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000496:	f000 f973 	bl	8000780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004a2:	f107 0320 	add.w	r3, r7, #32
 80004a6:	4619      	mov	r1, r3
 80004a8:	480f      	ldr	r0, [pc, #60]	; (80004e8 <MX_TIM2_Init+0xe4>)
 80004aa:	f002 fd5d 	bl	8002f68 <HAL_TIMEx_MasterConfigSynchronization>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80004b4:	f000 f964 	bl	8000780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000-1;
 80004bc:	f242 730f 	movw	r3, #9999	; 0x270f
 80004c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	4619      	mov	r1, r3
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_TIM2_Init+0xe4>)
 80004d2:	f002 f96d 	bl	80027b0 <HAL_TIM_OC_ConfigChannel>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80004dc:	f000 f950 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	3738      	adds	r7, #56	; 0x38
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200000e4 	.word	0x200000e4

080004ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <MX_USART2_UART_Init+0x50>)
 80004f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 80004f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_USART2_UART_Init+0x4c>)
 8000524:	f002 fd90 	bl	8003048 <HAL_UART_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800052e:	f000 f927 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	2000012c 	.word	0x2000012c
 800053c:	40004400 	.word	0x40004400

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000554:	4b42      	ldr	r3, [pc, #264]	; (8000660 <MX_GPIO_Init+0x120>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a41      	ldr	r2, [pc, #260]	; (8000660 <MX_GPIO_Init+0x120>)
 800055a:	f043 0310 	orr.w	r3, r3, #16
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b3f      	ldr	r3, [pc, #252]	; (8000660 <MX_GPIO_Init+0x120>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0310 	and.w	r3, r3, #16
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056c:	4b3c      	ldr	r3, [pc, #240]	; (8000660 <MX_GPIO_Init+0x120>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a3b      	ldr	r2, [pc, #236]	; (8000660 <MX_GPIO_Init+0x120>)
 8000572:	f043 0320 	orr.w	r3, r3, #32
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b39      	ldr	r3, [pc, #228]	; (8000660 <MX_GPIO_Init+0x120>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0320 	and.w	r3, r3, #32
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b36      	ldr	r3, [pc, #216]	; (8000660 <MX_GPIO_Init+0x120>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a35      	ldr	r2, [pc, #212]	; (8000660 <MX_GPIO_Init+0x120>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b33      	ldr	r3, [pc, #204]	; (8000660 <MX_GPIO_Init+0x120>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059c:	4b30      	ldr	r3, [pc, #192]	; (8000660 <MX_GPIO_Init+0x120>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a2f      	ldr	r2, [pc, #188]	; (8000660 <MX_GPIO_Init+0x120>)
 80005a2:	f043 0308 	orr.w	r3, r3, #8
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <MX_GPIO_Init+0x120>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0308 	and.w	r3, r3, #8
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	482a      	ldr	r0, [pc, #168]	; (8000664 <MX_GPIO_Init+0x124>)
 80005ba:	f000 fd7b 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_GPIO_Init+0x128>)
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	4826      	ldr	r0, [pc, #152]	; (800066c <MX_GPIO_Init+0x12c>)
 80005d4:	f000 fbea 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005d8:	2320      	movs	r3, #32
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	481d      	ldr	r0, [pc, #116]	; (8000664 <MX_GPIO_Init+0x124>)
 80005f0:	f000 fbdc 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : sw1_Pin */
  GPIO_InitStruct.Pin = sw1_Pin;
 80005f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_GPIO_Init+0x130>)
 80005fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(sw1_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	4816      	ldr	r0, [pc, #88]	; (8000664 <MX_GPIO_Init+0x124>)
 800060a:	f000 fbcf 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : reset_Pin */
  GPIO_InitStruct.Pin = reset_Pin;
 800060e:	2310      	movs	r3, #16
 8000610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_GPIO_Init+0x130>)
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(reset_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4814      	ldr	r0, [pc, #80]	; (8000674 <MX_GPIO_Init+0x134>)
 8000622:	f000 fbc3 	bl	8000dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	200a      	movs	r0, #10
 800062c:	f000 fb87 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000630:	200a      	movs	r0, #10
 8000632:	f000 fba0 	bl	8000d76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	2017      	movs	r0, #23
 800063c:	f000 fb7f 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000640:	2017      	movs	r0, #23
 8000642:	f000 fb98 	bl	8000d76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2028      	movs	r0, #40	; 0x28
 800064c:	f000 fb77 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000650:	2028      	movs	r0, #40	; 0x28
 8000652:	f000 fb90 	bl	8000d76 <HAL_NVIC_EnableIRQ>

}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000
 8000664:	40010800 	.word	0x40010800
 8000668:	10110000 	.word	0x10110000
 800066c:	40011000 	.word	0x40011000
 8000670:	10210000 	.word	0x10210000
 8000674:	40010c00 	.word	0x40010c00

08000678 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == sw1_Pin)
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000688:	d105      	bne.n	8000696 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		flag_sw1 = 1;
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
		sec = 15;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000692:	220f      	movs	r2, #15
 8000694:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == reset_Pin)
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	2b10      	cmp	r3, #16
 800069a:	d105      	bne.n	80006a8 <HAL_GPIO_EXTI_Callback+0x30>
	{
		flag_sw1 = 0;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
		sec =0;
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x40>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
	}

}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000170 	.word	0x20000170
 80006b8:	20000000 	.word	0x20000000

080006bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	lcd_put_cur(0, 0);
 80006c4:	2100      	movs	r1, #0
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff fda0 	bl	800020c <lcd_put_cur>
	lcd_send_string("STATUS:");
 80006cc:	4818      	ldr	r0, [pc, #96]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80006ce:	f7ff fdf9 	bl	80002c4 <lcd_send_string>
	lcd_put_cur(0, 7);
 80006d2:	2107      	movs	r1, #7
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff fd99 	bl	800020c <lcd_put_cur>
	lcd_send_string("READY....");
 80006da:	4816      	ldr	r0, [pc, #88]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80006dc:	f7ff fdf2 	bl	80002c4 <lcd_send_string>

	if(flag_sw1 == 1)
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d11f      	bne.n	8000728 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		if(sec > 0)
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00d      	beq.n	800070c <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			sec--;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80006fa:	701a      	strb	r2, [r3, #0]
			lcd_put_cur(0, 7);
 80006fc:	2107      	movs	r1, #7
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff fd84 	bl	800020c <lcd_put_cur>
			lcd_send_string("COUNTDOWN");
 8000704:	480e      	ldr	r0, [pc, #56]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000706:	f7ff fddd 	bl	80002c4 <lcd_send_string>

		}
	}


}
 800070a:	e00d      	b.n	8000728 <HAL_TIM_PeriodElapsedCallback+0x6c>
		else if (sec ==0)
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d109      	bne.n	8000728 <HAL_TIM_PeriodElapsedCallback+0x6c>
			lcd_put_cur(0, 7);
 8000714:	2107      	movs	r1, #7
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff fd78 	bl	800020c <lcd_put_cur>
			lcd_send_string("!!BOOOM!!");
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800071e:	f7ff fdd1 	bl	80002c4 <lcd_send_string>
			sec = 0;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	08003b70 	.word	0x08003b70
 8000734:	08003b78 	.word	0x08003b78
 8000738:	20000170 	.word	0x20000170
 800073c:	20000000 	.word	0x20000000
 8000740:	08003b84 	.word	0x08003b84
 8000744:	08003b90 	.word	0x08003b90

08000748 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
		lcd_put_cur(1,0);
 8000750:	2100      	movs	r1, #0
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff fd5a 	bl	800020c <lcd_put_cur>
		sprintf(Sec,"TIME:%02d",sec);
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4906      	ldr	r1, [pc, #24]	; (8000778 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8000762:	f002 fd7f 	bl	8003264 <siprintf>
		lcd_send_string(Sec);
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8000768:	f7ff fdac 	bl	80002c4 <lcd_send_string>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000000 	.word	0x20000000
 8000778:	08003b9c 	.word	0x08003b9c
 800077c:	20000174 	.word	0x20000174

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <HAL_MspInit+0x5c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x5c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_MspInit+0x60>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_MspInit+0x60>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000

080007f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <HAL_I2C_MspInit+0x70>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d123      	bne.n	8000858 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_I2C_MspInit+0x74>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <HAL_I2C_MspInit+0x74>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_I2C_MspInit+0x74>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000828:	23c0      	movs	r3, #192	; 0xc0
 800082a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082c:	2312      	movs	r3, #18
 800082e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <HAL_I2C_MspInit+0x78>)
 800083c:	f000 fab6 	bl	8000dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x74>)
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_I2C_MspInit+0x74>)
 8000846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800084a:	61d3      	str	r3, [r2, #28]
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_I2C_MspInit+0x74>)
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40005400 	.word	0x40005400
 8000864:	40021000 	.word	0x40021000
 8000868:	40010c00 	.word	0x40010c00

0800086c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800087c:	d113      	bne.n	80008a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_TIM_Base_MspInit+0x44>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <HAL_TIM_Base_MspInit+0x44>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_TIM_Base_MspInit+0x44>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	201c      	movs	r0, #28
 800089c:	f000 fa4f 	bl	8000d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008a0:	201c      	movs	r0, #28
 80008a2:	f000 fa68 	bl	8000d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <HAL_UART_MspInit+0x70>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d123      	bne.n	800091c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_UART_MspInit+0x74>)
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <HAL_UART_MspInit+0x74>)
 80008da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008de:	61d3      	str	r3, [r2, #28]
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_UART_MspInit+0x74>)
 80008e2:	69db      	ldr	r3, [r3, #28]
 80008e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_UART_MspInit+0x74>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <HAL_UART_MspInit+0x74>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_UART_MspInit+0x74>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000904:	230c      	movs	r3, #12
 8000906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_UART_MspInit+0x78>)
 8000918:	f000 fa48 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40004400 	.word	0x40004400
 8000928:	40021000 	.word	0x40021000
 800092c:	40010800 	.word	0x40010800

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr

0800095a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000976:	f000 f8cb 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}

0800097e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(reset_Pin);
 8000982:	2010      	movs	r0, #16
 8000984:	f000 fbae 	bl	80010e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sw1_Pin);
 8000990:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000994:	f000 fba6 	bl	80010e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <TIM2_IRQHandler+0x10>)
 80009a2:	f001 fdfd 	bl	80025a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000e4 	.word	0x200000e4

080009b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009b8:	f000 fb94 	bl	80010e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c8:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <_sbrk+0x5c>)
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <_sbrk+0x60>)
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <_sbrk+0x64>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <_sbrk+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d207      	bcs.n	8000a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f0:	f002 fc06 	bl	8003200 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e009      	b.n	8000a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <_sbrk+0x64>)
 8000a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20005000 	.word	0x20005000
 8000a20:	00000400 	.word	0x00000400
 8000a24:	20000180 	.word	0x20000180
 8000a28:	20000198 	.word	0x20000198

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5e:	f7ff ffe5 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f002 fbd3 	bl	800320c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fc43 	bl	80002f0 <main>
  bx lr
 8000a6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a74:	08003c0c 	.word	0x08003c0c
  ldr r2, =_sbss
 8000a78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a7c:	20000198 	.word	0x20000198

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_Init+0x28>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x28>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f947 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 f808 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fe74 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x54>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x58>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f95f 	bl	8000d92 <HAL_SYSTICK_Config>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00e      	b.n	8000afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d80a      	bhi.n	8000afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f927 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <HAL_InitTick+0x5c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000004 	.word	0x20000004
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	20000008 	.word	0x20000008

08000b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_IncTick+0x20>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	2000000c 	.word	0x2000000c
 8000b30:	20000184 	.word	0x20000184

08000b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <HAL_GetTick+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000184 	.word	0x20000184

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff fff0 	bl	8000b34 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffe0 	bl	8000b34 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000000c 	.word	0x2000000c

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4906      	ldr	r1, [pc, #24]	; (8000c28 <__NVIC_EnableIRQ+0x34>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	; (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff90 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff2d 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff42 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff90 	bl	8000c80 <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5f 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff35 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b08b      	sub	sp, #44	; 0x2c
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e169      	b.n	8001094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f040 8158 	bne.w	800108e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a9a      	ldr	r2, [pc, #616]	; (800104c <HAL_GPIO_Init+0x2a0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d05e      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000de8:	4a98      	ldr	r2, [pc, #608]	; (800104c <HAL_GPIO_Init+0x2a0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d875      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000dee:	4a98      	ldr	r2, [pc, #608]	; (8001050 <HAL_GPIO_Init+0x2a4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d058      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000df4:	4a96      	ldr	r2, [pc, #600]	; (8001050 <HAL_GPIO_Init+0x2a4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d86f      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000dfa:	4a96      	ldr	r2, [pc, #600]	; (8001054 <HAL_GPIO_Init+0x2a8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d052      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e00:	4a94      	ldr	r2, [pc, #592]	; (8001054 <HAL_GPIO_Init+0x2a8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d869      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e06:	4a94      	ldr	r2, [pc, #592]	; (8001058 <HAL_GPIO_Init+0x2ac>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d04c      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e0c:	4a92      	ldr	r2, [pc, #584]	; (8001058 <HAL_GPIO_Init+0x2ac>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d863      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e12:	4a92      	ldr	r2, [pc, #584]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d046      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e18:	4a90      	ldr	r2, [pc, #576]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d85d      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e1e:	2b12      	cmp	r3, #18
 8000e20:	d82a      	bhi.n	8000e78 <HAL_GPIO_Init+0xcc>
 8000e22:	2b12      	cmp	r3, #18
 8000e24:	d859      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e26:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <HAL_GPIO_Init+0x80>)
 8000e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2c:	08000ea7 	.word	0x08000ea7
 8000e30:	08000e81 	.word	0x08000e81
 8000e34:	08000e93 	.word	0x08000e93
 8000e38:	08000ed5 	.word	0x08000ed5
 8000e3c:	08000edb 	.word	0x08000edb
 8000e40:	08000edb 	.word	0x08000edb
 8000e44:	08000edb 	.word	0x08000edb
 8000e48:	08000edb 	.word	0x08000edb
 8000e4c:	08000edb 	.word	0x08000edb
 8000e50:	08000edb 	.word	0x08000edb
 8000e54:	08000edb 	.word	0x08000edb
 8000e58:	08000edb 	.word	0x08000edb
 8000e5c:	08000edb 	.word	0x08000edb
 8000e60:	08000edb 	.word	0x08000edb
 8000e64:	08000edb 	.word	0x08000edb
 8000e68:	08000edb 	.word	0x08000edb
 8000e6c:	08000edb 	.word	0x08000edb
 8000e70:	08000e89 	.word	0x08000e89
 8000e74:	08000e9d 	.word	0x08000e9d
 8000e78:	4a79      	ldr	r2, [pc, #484]	; (8001060 <HAL_GPIO_Init+0x2b4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e7e:	e02c      	b.n	8000eda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e029      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	623b      	str	r3, [r7, #32]
          break;
 8000e90:	e024      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	3308      	adds	r3, #8
 8000e98:	623b      	str	r3, [r7, #32]
          break;
 8000e9a:	e01f      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	330c      	adds	r3, #12
 8000ea2:	623b      	str	r3, [r7, #32]
          break;
 8000ea4:	e01a      	b.n	8000edc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e013      	b.n	8000edc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d105      	bne.n	8000ec8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	611a      	str	r2, [r3, #16]
          break;
 8000ec6:	e009      	b.n	8000edc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	615a      	str	r2, [r3, #20]
          break;
 8000ed2:	e003      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
          break;
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x130>
          break;
 8000eda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2bff      	cmp	r3, #255	; 0xff
 8000ee0:	d801      	bhi.n	8000ee6 <HAL_GPIO_Init+0x13a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	e001      	b.n	8000eea <HAL_GPIO_Init+0x13e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	d802      	bhi.n	8000ef8 <HAL_GPIO_Init+0x14c>
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	e002      	b.n	8000efe <HAL_GPIO_Init+0x152>
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	3b08      	subs	r3, #8
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	210f      	movs	r1, #15
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	6a39      	ldr	r1, [r7, #32]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 80b1 	beq.w	800108e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <HAL_GPIO_Init+0x2bc>)
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a40      	ldr	r2, [pc, #256]	; (800106c <HAL_GPIO_Init+0x2c0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d013      	beq.n	8000f98 <HAL_GPIO_Init+0x1ec>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a3f      	ldr	r2, [pc, #252]	; (8001070 <HAL_GPIO_Init+0x2c4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d00d      	beq.n	8000f94 <HAL_GPIO_Init+0x1e8>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a3e      	ldr	r2, [pc, #248]	; (8001074 <HAL_GPIO_Init+0x2c8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d007      	beq.n	8000f90 <HAL_GPIO_Init+0x1e4>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3d      	ldr	r2, [pc, #244]	; (8001078 <HAL_GPIO_Init+0x2cc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_GPIO_Init+0x1e0>
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000faa:	492f      	ldr	r1, [pc, #188]	; (8001068 <HAL_GPIO_Init+0x2bc>)
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	492c      	ldr	r1, [pc, #176]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4928      	ldr	r1, [pc, #160]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4922      	ldr	r1, [pc, #136]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	491e      	ldr	r1, [pc, #120]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001004:	4013      	ands	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	4918      	ldr	r1, [pc, #96]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	608b      	str	r3, [r1, #8]
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	43db      	mvns	r3, r3
 800102a:	4914      	ldr	r1, [pc, #80]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800102c:	4013      	ands	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d021      	beq.n	8001080 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	490e      	ldr	r1, [pc, #56]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	60cb      	str	r3, [r1, #12]
 8001048:	e021      	b.n	800108e <HAL_GPIO_Init+0x2e2>
 800104a:	bf00      	nop
 800104c:	10320000 	.word	0x10320000
 8001050:	10310000 	.word	0x10310000
 8001054:	10220000 	.word	0x10220000
 8001058:	10210000 	.word	0x10210000
 800105c:	10120000 	.word	0x10120000
 8001060:	10110000 	.word	0x10110000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40011000 	.word	0x40011000
 8001078:	40011400 	.word	0x40011400
 800107c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_GPIO_Init+0x304>)
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	43db      	mvns	r3, r3
 8001088:	4909      	ldr	r1, [pc, #36]	; (80010b0 <HAL_GPIO_Init+0x304>)
 800108a:	4013      	ands	r3, r2
 800108c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	3301      	adds	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f47f ae8e 	bne.w	8000dc0 <HAL_GPIO_Init+0x14>
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	372c      	adds	r7, #44	; 0x2c
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	611a      	str	r2, [r3, #16]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fab8 	bl	8000678 <HAL_GPIO_EXTI_Callback>
  }
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e12b      	b.n	800137e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d106      	bne.n	8001140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fb58 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2224      	movs	r2, #36	; 0x24
 8001144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001166:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001176:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001178:	f000 ffea 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 800117c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4a81      	ldr	r2, [pc, #516]	; (8001388 <HAL_I2C_Init+0x274>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d807      	bhi.n	8001198 <HAL_I2C_Init+0x84>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4a80      	ldr	r2, [pc, #512]	; (800138c <HAL_I2C_Init+0x278>)
 800118c:	4293      	cmp	r3, r2
 800118e:	bf94      	ite	ls
 8001190:	2301      	movls	r3, #1
 8001192:	2300      	movhi	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	e006      	b.n	80011a6 <HAL_I2C_Init+0x92>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4a7d      	ldr	r2, [pc, #500]	; (8001390 <HAL_I2C_Init+0x27c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	bf94      	ite	ls
 80011a0:	2301      	movls	r3, #1
 80011a2:	2300      	movhi	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0e7      	b.n	800137e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4a78      	ldr	r2, [pc, #480]	; (8001394 <HAL_I2C_Init+0x280>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0c9b      	lsrs	r3, r3, #18
 80011b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a6a      	ldr	r2, [pc, #424]	; (8001388 <HAL_I2C_Init+0x274>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d802      	bhi.n	80011e8 <HAL_I2C_Init+0xd4>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3301      	adds	r3, #1
 80011e6:	e009      	b.n	80011fc <HAL_I2C_Init+0xe8>
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	4a69      	ldr	r2, [pc, #420]	; (8001398 <HAL_I2C_Init+0x284>)
 80011f4:	fba2 2303 	umull	r2, r3, r2, r3
 80011f8:	099b      	lsrs	r3, r3, #6
 80011fa:	3301      	adds	r3, #1
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	430b      	orrs	r3, r1
 8001202:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800120e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	495c      	ldr	r1, [pc, #368]	; (8001388 <HAL_I2C_Init+0x274>)
 8001218:	428b      	cmp	r3, r1
 800121a:	d819      	bhi.n	8001250 <HAL_I2C_Init+0x13c>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	1e59      	subs	r1, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fbb1 f3f3 	udiv	r3, r1, r3
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001230:	400b      	ands	r3, r1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <HAL_I2C_Init+0x138>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1e59      	subs	r1, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fbb1 f3f3 	udiv	r3, r1, r3
 8001244:	3301      	adds	r3, #1
 8001246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124a:	e051      	b.n	80012f0 <HAL_I2C_Init+0x1dc>
 800124c:	2304      	movs	r3, #4
 800124e:	e04f      	b.n	80012f0 <HAL_I2C_Init+0x1dc>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d111      	bne.n	800127c <HAL_I2C_Init+0x168>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1e58      	subs	r0, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	440b      	add	r3, r1
 8001266:	fbb0 f3f3 	udiv	r3, r0, r3
 800126a:	3301      	adds	r3, #1
 800126c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	e012      	b.n	80012a2 <HAL_I2C_Init+0x18e>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	1e58      	subs	r0, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6859      	ldr	r1, [r3, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	0099      	lsls	r1, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001292:	3301      	adds	r3, #1
 8001294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_Init+0x196>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e022      	b.n	80012f0 <HAL_I2C_Init+0x1dc>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10e      	bne.n	80012d0 <HAL_I2C_Init+0x1bc>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1e58      	subs	r0, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6859      	ldr	r1, [r3, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	440b      	add	r3, r1
 80012c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ce:	e00f      	b.n	80012f0 <HAL_I2C_Init+0x1dc>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1e58      	subs	r0, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	0099      	lsls	r1, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e6:	3301      	adds	r3, #1
 80012e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	6809      	ldr	r1, [r1, #0]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69da      	ldr	r2, [r3, #28]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800131e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6911      	ldr	r1, [r2, #16]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68d2      	ldr	r2, [r2, #12]
 800132a:	4311      	orrs	r1, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	430b      	orrs	r3, r1
 8001332:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2220      	movs	r2, #32
 800136a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	000186a0 	.word	0x000186a0
 800138c:	001e847f 	.word	0x001e847f
 8001390:	003d08ff 	.word	0x003d08ff
 8001394:	431bde83 	.word	0x431bde83
 8001398:	10624dd3 	.word	0x10624dd3

0800139c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	461a      	mov	r2, r3
 80013a8:	460b      	mov	r3, r1
 80013aa:	817b      	strh	r3, [r7, #10]
 80013ac:	4613      	mov	r3, r2
 80013ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fbc0 	bl	8000b34 <HAL_GetTick>
 80013b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b20      	cmp	r3, #32
 80013c0:	f040 80e0 	bne.w	8001584 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2319      	movs	r3, #25
 80013ca:	2201      	movs	r2, #1
 80013cc:	4970      	ldr	r1, [pc, #448]	; (8001590 <HAL_I2C_Master_Transmit+0x1f4>)
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f964 	bl	800169c <I2C_WaitOnFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013da:	2302      	movs	r3, #2
 80013dc:	e0d3      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_I2C_Master_Transmit+0x50>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e0cc      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d007      	beq.n	8001412 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001420:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2221      	movs	r2, #33	; 0x21
 8001426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2210      	movs	r2, #16
 800142e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	893a      	ldrh	r2, [r7, #8]
 8001442:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001448:	b29a      	uxth	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4a50      	ldr	r2, [pc, #320]	; (8001594 <HAL_I2C_Master_Transmit+0x1f8>)
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001454:	8979      	ldrh	r1, [r7, #10]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	6a3a      	ldr	r2, [r7, #32]
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 f89c 	bl	8001598 <I2C_MasterRequestWrite>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e08d      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001480:	e066      	b.n	8001550 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	6a39      	ldr	r1, [r7, #32]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f9de 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00d      	beq.n	80014ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	2b04      	cmp	r3, #4
 8001498:	d107      	bne.n	80014aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e06b      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d6:	3b01      	subs	r3, #1
 80014d8:	b29a      	uxth	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d11b      	bne.n	8001524 <HAL_I2C_Master_Transmit+0x188>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d017      	beq.n	8001524 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150e:	b29b      	uxth	r3, r3
 8001510:	3b01      	subs	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151c:	3b01      	subs	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	6a39      	ldr	r1, [r7, #32]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f9ce 	bl	80018ca <I2C_WaitOnBTFFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00d      	beq.n	8001550 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	2b04      	cmp	r3, #4
 800153a:	d107      	bne.n	800154c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800154a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e01a      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001554:	2b00      	cmp	r3, #0
 8001556:	d194      	bne.n	8001482 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2220      	movs	r2, #32
 800156c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	e000      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001584:	2302      	movs	r3, #2
  }
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	00100002 	.word	0x00100002
 8001594:	ffff0000 	.word	0xffff0000

08001598 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af02      	add	r7, sp, #8
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	460b      	mov	r3, r1
 80015a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d006      	beq.n	80015c2 <I2C_MasterRequestWrite+0x2a>
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d003      	beq.n	80015c2 <I2C_MasterRequestWrite+0x2a>
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015c0:	d108      	bne.n	80015d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e00b      	b.n	80015ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	2b12      	cmp	r3, #18
 80015da:	d107      	bne.n	80015ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f000 f84f 	bl	800169c <I2C_WaitOnFlagUntilTimeout>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00d      	beq.n	8001620 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001612:	d103      	bne.n	800161c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e035      	b.n	800168c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001628:	d108      	bne.n	800163c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800162a:	897b      	ldrh	r3, [r7, #10]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	e01b      	b.n	8001674 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800163c:	897b      	ldrh	r3, [r7, #10]
 800163e:	11db      	asrs	r3, r3, #7
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f003 0306 	and.w	r3, r3, #6
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f063 030f 	orn	r3, r3, #15
 800164c:	b2da      	uxtb	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	490e      	ldr	r1, [pc, #56]	; (8001694 <I2C_MasterRequestWrite+0xfc>)
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f875 	bl	800174a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e010      	b.n	800168c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800166a:	897b      	ldrh	r3, [r7, #10]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <I2C_MasterRequestWrite+0x100>)
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f865 	bl	800174a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	00010008 	.word	0x00010008
 8001698:	00010002 	.word	0x00010002

0800169c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	4613      	mov	r3, r2
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ac:	e025      	b.n	80016fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d021      	beq.n	80016fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b6:	f7ff fa3d 	bl	8000b34 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d302      	bcc.n	80016cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d116      	bne.n	80016fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2220      	movs	r2, #32
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f043 0220 	orr.w	r2, r3, #32
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e023      	b.n	8001742 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10d      	bne.n	8001720 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4013      	ands	r3, r2
 8001710:	b29b      	uxth	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf0c      	ite	eq
 8001716:	2301      	moveq	r3, #1
 8001718:	2300      	movne	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	e00c      	b.n	800173a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4013      	ands	r3, r2
 800172c:	b29b      	uxth	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf0c      	ite	eq
 8001732:	2301      	moveq	r3, #1
 8001734:	2300      	movne	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	429a      	cmp	r2, r3
 800173e:	d0b6      	beq.n	80016ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001758:	e051      	b.n	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001768:	d123      	bne.n	80017b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001778:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001782:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f043 0204 	orr.w	r2, r3, #4
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e046      	b.n	8001840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d021      	beq.n	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ba:	f7ff f9bb 	bl	8000b34 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d302      	bcc.n	80017d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d116      	bne.n	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2220      	movs	r2, #32
 80017da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f043 0220 	orr.w	r2, r3, #32
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e020      	b.n	8001840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10c      	bne.n	8001822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4013      	ands	r3, r2
 8001814:	b29b      	uxth	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	e00b      	b.n	800183a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	43da      	mvns	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	4013      	ands	r3, r2
 800182e:	b29b      	uxth	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d18d      	bne.n	800175a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001854:	e02d      	b.n	80018b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f878 	bl	800194c <I2C_IsAcknowledgeFailed>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e02d      	b.n	80018c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d021      	beq.n	80018b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7ff f961 	bl	8000b34 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d116      	bne.n	80018b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f043 0220 	orr.w	r2, r3, #32
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e007      	b.n	80018c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018bc:	2b80      	cmp	r3, #128	; 0x80
 80018be:	d1ca      	bne.n	8001856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018d6:	e02d      	b.n	8001934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f837 	bl	800194c <I2C_IsAcknowledgeFailed>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e02d      	b.n	8001944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d021      	beq.n	8001934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f0:	f7ff f920 	bl	8000b34 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d302      	bcc.n	8001906 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d116      	bne.n	8001934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f043 0220 	orr.w	r2, r3, #32
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e007      	b.n	8001944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b04      	cmp	r3, #4
 8001940:	d1ca      	bne.n	80018d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001962:	d11b      	bne.n	800199c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800196c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f043 0204 	orr.w	r2, r3, #4
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e272      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8087 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c8:	4b92      	ldr	r3, [pc, #584]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d00c      	beq.n	80019ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d4:	4b8f      	ldr	r3, [pc, #572]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d112      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5e>
 80019e0:	4b8c      	ldr	r3, [pc, #560]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d10b      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ee:	4b89      	ldr	r3, [pc, #548]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d06c      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x12c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d168      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e24c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x76>
 8001a10:	4b80      	ldr	r3, [pc, #512]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a7f      	ldr	r2, [pc, #508]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e02e      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x98>
 8001a26:	4b7b      	ldr	r3, [pc, #492]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7a      	ldr	r2, [pc, #488]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b78      	ldr	r3, [pc, #480]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a77      	ldr	r2, [pc, #476]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e01d      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0xbc>
 8001a4a:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a71      	ldr	r2, [pc, #452]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a6e      	ldr	r2, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6a      	ldr	r2, [pc, #424]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a67      	ldr	r2, [pc, #412]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff f856 	bl	8000b34 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff f852 	bl	8000b34 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e200      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0xe4>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff f842 	bl	8000b34 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff f83e 	bl	8000b34 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1ec      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x10c>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae2:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aee:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d11c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x18c>
 8001afa:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d116      	bne.n	8001b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x176>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e1c0      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4939      	ldr	r1, [pc, #228]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	e03a      	b.n	8001baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7fe fff7 	bl	8000b34 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7fe fff3 	bl	8000b34 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e1a1      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4927      	ldr	r1, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e015      	b.n	8001baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7fe ffd6 	bl	8000b34 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7fe ffd2 	bl	8000b34 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e180      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d03a      	beq.n	8001c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d019      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc4:	f7fe ffb6 	bl	8000b34 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7fe ffb2 	bl	8000b34 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e160      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f000 fad8 	bl	80021a0 <RCC_Delay>
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7fe ff9c 	bl	8000b34 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfe:	e00f      	b.n	8001c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7fe ff98 	bl	8000b34 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d908      	bls.n	8001c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e146      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	42420000 	.word	0x42420000
 8001c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e9      	bne.n	8001c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80a6 	beq.w	8001d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10d      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a87      	ldr	r2, [pc, #540]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c62:	2301      	movs	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b82      	ldr	r3, [pc, #520]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d118      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	4b7f      	ldr	r3, [pc, #508]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a7e      	ldr	r2, [pc, #504]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7e:	f7fe ff59 	bl	8000b34 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7fe ff55 	bl	8000b34 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b64      	cmp	r3, #100	; 0x64
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e103      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x312>
 8001cac:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a6e      	ldr	r2, [pc, #440]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	e02d      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x334>
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a66      	ldr	r2, [pc, #408]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	e01c      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0x356>
 8001ce4:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a60      	ldr	r2, [pc, #384]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	4b5e      	ldr	r3, [pc, #376]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a5d      	ldr	r2, [pc, #372]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cfe:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a5a      	ldr	r2, [pc, #360]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe ff09 	bl	8000b34 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7fe ff05 	bl	8000b34 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e0b1      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ee      	beq.n	8001d26 <HAL_RCC_OscConfig+0x37e>
 8001d48:	e014      	b.n	8001d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7fe fef3 	bl	8000b34 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7fe feef 	bl	8000b34 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e09b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ee      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d105      	bne.n	8001d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7a:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a3b      	ldr	r2, [pc, #236]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8087 	beq.w	8001e9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d061      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d146      	bne.n	8001e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7fe fec3 	bl	8000b34 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db2:	f7fe febf 	bl	8000b34 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e06d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd8:	d108      	bne.n	8001dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	4921      	ldr	r1, [pc, #132]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a19      	ldr	r1, [r3, #32]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	491b      	ldr	r1, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7fe fe93 	bl	8000b34 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7fe fe8f 	bl	8000b34 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e03d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x46a>
 8001e30:	e035      	b.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7fe fe7c 	bl	8000b34 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe fe78 	bl	8000b34 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e026      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x498>
 8001e5e:	e01e      	b.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e019      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_OscConfig+0x500>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d0      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4965      	ldr	r1, [pc, #404]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d040      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e073      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4936      	ldr	r1, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fdca 	bl	8000b34 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7fe fdc6 	bl	8000b34 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e053      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d210      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490a      	ldr	r1, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1cc>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1d0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fd28 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	08003bb8 	.word	0x08003bb8
 8002078:	20000004 	.word	0x20000004
 800207c:	20000008 	.word	0x20000008

08002080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b490      	push	{r4, r7}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002086:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCC_GetSysClockFreq+0xac>)
 8002088:	1d3c      	adds	r4, r7, #4
 800208a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002090:	f240 2301 	movw	r3, #513	; 0x201
 8002094:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d002      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x40>
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x46>
 80020be:	e02b      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020c2:	623b      	str	r3, [r7, #32]
      break;
 80020c4:	e02b      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	0c9b      	lsrs	r3, r3, #18
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3328      	adds	r3, #40	; 0x28
 80020d0:	443b      	add	r3, r7
 80020d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d012      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	0c5b      	lsrs	r3, r3, #17
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	3328      	adds	r3, #40	; 0x28
 80020ee:	443b      	add	r3, r7
 80020f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020fa:	fb03 f202 	mul.w	r2, r3, r2
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
 8002106:	e004      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	623b      	str	r3, [r7, #32]
      break;
 8002116:	e002      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb4>)
 800211a:	623b      	str	r3, [r7, #32]
      break;
 800211c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211e:	6a3b      	ldr	r3, [r7, #32]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3728      	adds	r7, #40	; 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bc90      	pop	{r4, r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	08003ba8 	.word	0x08003ba8
 8002130:	40021000 	.word	0x40021000
 8002134:	007a1200 	.word	0x007a1200
 8002138:	003d0900 	.word	0x003d0900

0800213c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <HAL_RCC_GetHCLKFreq+0x10>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002154:	f7ff fff2 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	4903      	ldr	r1, [pc, #12]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	08003bc8 	.word	0x08003bc8

08002178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800217c:	f7ff ffde 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	0adb      	lsrs	r3, r3, #11
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4903      	ldr	r1, [pc, #12]	; (800219c <HAL_RCC_GetPCLK2Freq+0x24>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	08003bc8 	.word	0x08003bc8

080021a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <RCC_Delay+0x34>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <RCC_Delay+0x38>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0a5b      	lsrs	r3, r3, #9
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021bc:	bf00      	nop
  }
  while (Delay --);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	60fa      	str	r2, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f9      	bne.n	80021bc <RCC_Delay+0x1c>
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	20000004 	.word	0x20000004
 80021d8:	10624dd3 	.word	0x10624dd3

080021dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e041      	b.n	8002272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fb32 	bl	800086c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f000 fc00 	bl	8002a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d001      	beq.n	8002294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e03a      	b.n	800230a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_TIM_Base_Start_IT+0x98>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00e      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x58>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022be:	d009      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x58>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <HAL_TIM_Base_Start_IT+0x9c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d004      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x58>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a13      	ldr	r2, [pc, #76]	; (800231c <HAL_TIM_Base_Start_IT+0xa0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d111      	bne.n	80022f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d010      	beq.n	8002308 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f6:	e007      	b.n	8002308 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40012c00 	.word	0x40012c00
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800

08002320 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e041      	b.n	80023b6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f839 	bl	80023be <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f000 fb5e 	bl	8002a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_TIM_OC_Start_IT+0x24>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e022      	b.n	800243a <HAL_TIM_OC_Start_IT+0x6a>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d109      	bne.n	800240e <HAL_TIM_OC_Start_IT+0x3e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	bf14      	ite	ne
 8002406:	2301      	movne	r3, #1
 8002408:	2300      	moveq	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	e015      	b.n	800243a <HAL_TIM_OC_Start_IT+0x6a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d109      	bne.n	8002428 <HAL_TIM_OC_Start_IT+0x58>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e008      	b.n	800243a <HAL_TIM_OC_Start_IT+0x6a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0a4      	b.n	800258c <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <HAL_TIM_OC_Start_IT+0x82>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002450:	e013      	b.n	800247a <HAL_TIM_OC_Start_IT+0xaa>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d104      	bne.n	8002462 <HAL_TIM_OC_Start_IT+0x92>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002460:	e00b      	b.n	800247a <HAL_TIM_OC_Start_IT+0xaa>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d104      	bne.n	8002472 <HAL_TIM_OC_Start_IT+0xa2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002470:	e003      	b.n	800247a <HAL_TIM_OC_Start_IT+0xaa>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d841      	bhi.n	8002504 <HAL_TIM_OC_Start_IT+0x134>
 8002480:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <HAL_TIM_OC_Start_IT+0xb8>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	080024bd 	.word	0x080024bd
 800248c:	08002505 	.word	0x08002505
 8002490:	08002505 	.word	0x08002505
 8002494:	08002505 	.word	0x08002505
 8002498:	080024cf 	.word	0x080024cf
 800249c:	08002505 	.word	0x08002505
 80024a0:	08002505 	.word	0x08002505
 80024a4:	08002505 	.word	0x08002505
 80024a8:	080024e1 	.word	0x080024e1
 80024ac:	08002505 	.word	0x08002505
 80024b0:	08002505 	.word	0x08002505
 80024b4:	08002505 	.word	0x08002505
 80024b8:	080024f3 	.word	0x080024f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0202 	orr.w	r2, r2, #2
 80024ca:	60da      	str	r2, [r3, #12]
      break;
 80024cc:	e01b      	b.n	8002506 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0204 	orr.w	r2, r2, #4
 80024dc:	60da      	str	r2, [r3, #12]
      break;
 80024de:	e012      	b.n	8002506 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0208 	orr.w	r2, r2, #8
 80024ee:	60da      	str	r2, [r3, #12]
      break;
 80024f0:	e009      	b.n	8002506 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0210 	orr.w	r2, r2, #16
 8002500:	60da      	str	r2, [r3, #12]
      break;
 8002502:	e000      	b.n	8002506 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8002504:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2201      	movs	r2, #1
 800250c:	6839      	ldr	r1, [r7, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fd06 	bl	8002f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1e      	ldr	r2, [pc, #120]	; (8002594 <HAL_TIM_OC_Start_IT+0x1c4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d107      	bne.n	800252e <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a18      	ldr	r2, [pc, #96]	; (8002594 <HAL_TIM_OC_Start_IT+0x1c4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00e      	beq.n	8002556 <HAL_TIM_OC_Start_IT+0x186>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002540:	d009      	beq.n	8002556 <HAL_TIM_OC_Start_IT+0x186>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a14      	ldr	r2, [pc, #80]	; (8002598 <HAL_TIM_OC_Start_IT+0x1c8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d004      	beq.n	8002556 <HAL_TIM_OC_Start_IT+0x186>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <HAL_TIM_OC_Start_IT+0x1cc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d111      	bne.n	800257a <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b06      	cmp	r3, #6
 8002566:	d010      	beq.n	800258a <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	e007      	b.n	800258a <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40000400 	.word	0x40000400
 800259c:	40000800 	.word	0x40000800

080025a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d122      	bne.n	80025fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d11b      	bne.n	80025fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0202 	mvn.w	r2, #2
 80025cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fa00 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe f8ac 	bl	8000748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fa02 	bl	80029fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d122      	bne.n	8002650 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d11b      	bne.n	8002650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0204 	mvn.w	r2, #4
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f9d6 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe f882 	bl	8000748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f9d8 	bl	80029fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0208 	mvn.w	r2, #8
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2204      	movs	r2, #4
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9ac 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe f858 	bl	8000748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f9ae 	bl	80029fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0210 	mvn.w	r2, #16
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2208      	movs	r2, #8
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f982 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe f82e 	bl	8000748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f984 	bl	80029fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0201 	mvn.w	r2, #1
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fd ffcc 	bl	80006bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	d10e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d107      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fc73 	bl	8003036 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d10e      	bne.n	800277c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d107      	bne.n	800277c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f948 	bl	8002a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b20      	cmp	r3, #32
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b20      	cmp	r3, #32
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0220 	mvn.w	r2, #32
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fc3e 	bl	8003024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_OC_ConfigChannel+0x1a>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e046      	b.n	8002858 <HAL_TIM_OC_ConfigChannel+0xa8>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b0c      	cmp	r3, #12
 80027d6:	d839      	bhi.n	800284c <HAL_TIM_OC_ConfigChannel+0x9c>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	08002815 	.word	0x08002815
 80027e4:	0800284d 	.word	0x0800284d
 80027e8:	0800284d 	.word	0x0800284d
 80027ec:	0800284d 	.word	0x0800284d
 80027f0:	08002823 	.word	0x08002823
 80027f4:	0800284d 	.word	0x0800284d
 80027f8:	0800284d 	.word	0x0800284d
 80027fc:	0800284d 	.word	0x0800284d
 8002800:	08002831 	.word	0x08002831
 8002804:	0800284d 	.word	0x0800284d
 8002808:	0800284d 	.word	0x0800284d
 800280c:	0800284d 	.word	0x0800284d
 8002810:	0800283f 	.word	0x0800283f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f962 	bl	8002ae4 <TIM_OC1_SetConfig>
      break;
 8002820:	e015      	b.n	800284e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f9c1 	bl	8002bb0 <TIM_OC2_SetConfig>
      break;
 800282e:	e00e      	b.n	800284e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fa24 	bl	8002c84 <TIM_OC3_SetConfig>
      break;
 800283c:	e007      	b.n	800284e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fa87 	bl	8002d58 <TIM_OC4_SetConfig>
      break;
 800284a:	e000      	b.n	800284e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800284c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_TIM_ConfigClockSource+0x18>
 8002874:	2302      	movs	r3, #2
 8002876:	e0b3      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x180>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002896:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800289e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b0:	d03e      	beq.n	8002930 <HAL_TIM_ConfigClockSource+0xd0>
 80028b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b6:	f200 8087 	bhi.w	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028be:	f000 8085 	beq.w	80029cc <HAL_TIM_ConfigClockSource+0x16c>
 80028c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c6:	d87f      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028c8:	2b70      	cmp	r3, #112	; 0x70
 80028ca:	d01a      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0xa2>
 80028cc:	2b70      	cmp	r3, #112	; 0x70
 80028ce:	d87b      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028d0:	2b60      	cmp	r3, #96	; 0x60
 80028d2:	d050      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x116>
 80028d4:	2b60      	cmp	r3, #96	; 0x60
 80028d6:	d877      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028d8:	2b50      	cmp	r3, #80	; 0x50
 80028da:	d03c      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0xf6>
 80028dc:	2b50      	cmp	r3, #80	; 0x50
 80028de:	d873      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028e0:	2b40      	cmp	r3, #64	; 0x40
 80028e2:	d058      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x136>
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	d86f      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028e8:	2b30      	cmp	r3, #48	; 0x30
 80028ea:	d064      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x156>
 80028ec:	2b30      	cmp	r3, #48	; 0x30
 80028ee:	d86b      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d060      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x156>
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d867      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d05c      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x156>
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	d05a      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002900:	e062      	b.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f000 fae6 	bl	8002ee2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002924:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	609a      	str	r2, [r3, #8]
      break;
 800292e:	e04e      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f000 facf 	bl	8002ee2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002952:	609a      	str	r2, [r3, #8]
      break;
 8002954:	e03b      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	461a      	mov	r2, r3
 8002964:	f000 fa46 	bl	8002df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2150      	movs	r1, #80	; 0x50
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fa9d 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 8002974:	e02b      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	461a      	mov	r2, r3
 8002984:	f000 fa64 	bl	8002e50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2160      	movs	r1, #96	; 0x60
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fa8d 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 8002994:	e01b      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f000 fa26 	bl	8002df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2140      	movs	r1, #64	; 0x40
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fa7d 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 80029b4:	e00b      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f000 fa74 	bl	8002eae <TIM_ITRx_SetConfig>
        break;
 80029c6:	e002      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029c8:	bf00      	nop
 80029ca:	e000      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
	...

08002a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <TIM_Base_SetConfig+0xb8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00b      	beq.n	8002a50 <TIM_Base_SetConfig+0x30>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3e:	d007      	beq.n	8002a50 <TIM_Base_SetConfig+0x30>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a26      	ldr	r2, [pc, #152]	; (8002adc <TIM_Base_SetConfig+0xbc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d003      	beq.n	8002a50 <TIM_Base_SetConfig+0x30>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <TIM_Base_SetConfig+0xc0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d108      	bne.n	8002a62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <TIM_Base_SetConfig+0xb8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00b      	beq.n	8002a82 <TIM_Base_SetConfig+0x62>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d007      	beq.n	8002a82 <TIM_Base_SetConfig+0x62>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a19      	ldr	r2, [pc, #100]	; (8002adc <TIM_Base_SetConfig+0xbc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d003      	beq.n	8002a82 <TIM_Base_SetConfig+0x62>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <TIM_Base_SetConfig+0xc0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d108      	bne.n	8002a94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <TIM_Base_SetConfig+0xb8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d103      	bne.n	8002ac8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	615a      	str	r2, [r3, #20]
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800

08002ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f023 0201 	bic.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f023 0302 	bic.w	r3, r3, #2
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <TIM_OC1_SetConfig+0xc8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d10c      	bne.n	8002b5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f023 0308 	bic.w	r3, r3, #8
 8002b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <TIM_OC1_SetConfig+0xc8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d111      	bne.n	8002b86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	621a      	str	r2, [r3, #32]
}
 8002ba0:	bf00      	nop
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40012c00 	.word	0x40012c00

08002bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0210 	bic.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 0320 	bic.w	r3, r3, #32
 8002bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <TIM_OC2_SetConfig+0xd0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10d      	bne.n	8002c2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <TIM_OC2_SetConfig+0xd0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d113      	bne.n	8002c5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	621a      	str	r2, [r3, #32]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	40012c00 	.word	0x40012c00

08002c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <TIM_OC3_SetConfig+0xd0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10d      	bne.n	8002cfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <TIM_OC3_SetConfig+0xd0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d113      	bne.n	8002d2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	621a      	str	r2, [r3, #32]
}
 8002d48:	bf00      	nop
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40012c00 	.word	0x40012c00

08002d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	031b      	lsls	r3, r3, #12
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a0f      	ldr	r2, [pc, #60]	; (8002df0 <TIM_OC4_SetConfig+0x98>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d109      	bne.n	8002dcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40012c00 	.word	0x40012c00

08002df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f023 0201 	bic.w	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f023 030a 	bic.w	r3, r3, #10
 8002e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f023 0210 	bic.w	r2, r3, #16
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	031b      	lsls	r3, r3, #12
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	621a      	str	r2, [r3, #32]
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f043 0307 	orr.w	r3, r3, #7
 8002ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	609a      	str	r2, [r3, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b087      	sub	sp, #28
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002efc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	021a      	lsls	r2, r3, #8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	609a      	str	r2, [r3, #8]
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	2201      	movs	r2, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e046      	b.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a16      	ldr	r2, [pc, #88]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d009      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a12      	ldr	r2, [pc, #72]	; (800301c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a10      	ldr	r2, [pc, #64]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10c      	bne.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800

08003024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e03f      	b.n	80030da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd fc20 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800308a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f829 	bl	80030e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800311e:	f023 030c 	bic.w	r3, r3, #12
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	430b      	orrs	r3, r1
 800312a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2c      	ldr	r2, [pc, #176]	; (80031f8 <UART_SetConfig+0x114>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d103      	bne.n	8003154 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800314c:	f7ff f814 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	e002      	b.n	800315a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003154:	f7fe fffc 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8003158:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009a      	lsls	r2, r3, #2
 8003164:	441a      	add	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	4a22      	ldr	r2, [pc, #136]	; (80031fc <UART_SetConfig+0x118>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	0119      	lsls	r1, r3, #4
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009a      	lsls	r2, r3, #2
 8003184:	441a      	add	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003190:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <UART_SetConfig+0x118>)
 8003192:	fba3 0302 	umull	r0, r3, r3, r2
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2064      	movs	r0, #100	; 0x64
 800319a:	fb00 f303 	mul.w	r3, r0, r3
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	3332      	adds	r3, #50	; 0x32
 80031a4:	4a15      	ldr	r2, [pc, #84]	; (80031fc <UART_SetConfig+0x118>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b0:	4419      	add	r1, r3
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	009a      	lsls	r2, r3, #2
 80031bc:	441a      	add	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <UART_SetConfig+0x118>)
 80031ca:	fba3 0302 	umull	r0, r3, r3, r2
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2064      	movs	r0, #100	; 0x64
 80031d2:	fb00 f303 	mul.w	r3, r0, r3
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	3332      	adds	r3, #50	; 0x32
 80031dc:	4a07      	ldr	r2, [pc, #28]	; (80031fc <UART_SetConfig+0x118>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	f003 020f 	and.w	r2, r3, #15
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	440a      	add	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40013800 	.word	0x40013800
 80031fc:	51eb851f 	.word	0x51eb851f

08003200 <__errno>:
 8003200:	4b01      	ldr	r3, [pc, #4]	; (8003208 <__errno+0x8>)
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000010 	.word	0x20000010

0800320c <__libc_init_array>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	2600      	movs	r6, #0
 8003210:	4d0c      	ldr	r5, [pc, #48]	; (8003244 <__libc_init_array+0x38>)
 8003212:	4c0d      	ldr	r4, [pc, #52]	; (8003248 <__libc_init_array+0x3c>)
 8003214:	1b64      	subs	r4, r4, r5
 8003216:	10a4      	asrs	r4, r4, #2
 8003218:	42a6      	cmp	r6, r4
 800321a:	d109      	bne.n	8003230 <__libc_init_array+0x24>
 800321c:	f000 fc9c 	bl	8003b58 <_init>
 8003220:	2600      	movs	r6, #0
 8003222:	4d0a      	ldr	r5, [pc, #40]	; (800324c <__libc_init_array+0x40>)
 8003224:	4c0a      	ldr	r4, [pc, #40]	; (8003250 <__libc_init_array+0x44>)
 8003226:	1b64      	subs	r4, r4, r5
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	42a6      	cmp	r6, r4
 800322c:	d105      	bne.n	800323a <__libc_init_array+0x2e>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	f855 3b04 	ldr.w	r3, [r5], #4
 8003234:	4798      	blx	r3
 8003236:	3601      	adds	r6, #1
 8003238:	e7ee      	b.n	8003218 <__libc_init_array+0xc>
 800323a:	f855 3b04 	ldr.w	r3, [r5], #4
 800323e:	4798      	blx	r3
 8003240:	3601      	adds	r6, #1
 8003242:	e7f2      	b.n	800322a <__libc_init_array+0x1e>
 8003244:	08003c04 	.word	0x08003c04
 8003248:	08003c04 	.word	0x08003c04
 800324c:	08003c04 	.word	0x08003c04
 8003250:	08003c08 	.word	0x08003c08

08003254 <memset>:
 8003254:	4603      	mov	r3, r0
 8003256:	4402      	add	r2, r0
 8003258:	4293      	cmp	r3, r2
 800325a:	d100      	bne.n	800325e <memset+0xa>
 800325c:	4770      	bx	lr
 800325e:	f803 1b01 	strb.w	r1, [r3], #1
 8003262:	e7f9      	b.n	8003258 <memset+0x4>

08003264 <siprintf>:
 8003264:	b40e      	push	{r1, r2, r3}
 8003266:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800326a:	b500      	push	{lr}
 800326c:	b09c      	sub	sp, #112	; 0x70
 800326e:	ab1d      	add	r3, sp, #116	; 0x74
 8003270:	9002      	str	r0, [sp, #8]
 8003272:	9006      	str	r0, [sp, #24]
 8003274:	9107      	str	r1, [sp, #28]
 8003276:	9104      	str	r1, [sp, #16]
 8003278:	4808      	ldr	r0, [pc, #32]	; (800329c <siprintf+0x38>)
 800327a:	4909      	ldr	r1, [pc, #36]	; (80032a0 <siprintf+0x3c>)
 800327c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003280:	9105      	str	r1, [sp, #20]
 8003282:	6800      	ldr	r0, [r0, #0]
 8003284:	a902      	add	r1, sp, #8
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	f000 f868 	bl	800335c <_svfiprintf_r>
 800328c:	2200      	movs	r2, #0
 800328e:	9b02      	ldr	r3, [sp, #8]
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	b01c      	add	sp, #112	; 0x70
 8003294:	f85d eb04 	ldr.w	lr, [sp], #4
 8003298:	b003      	add	sp, #12
 800329a:	4770      	bx	lr
 800329c:	20000010 	.word	0x20000010
 80032a0:	ffff0208 	.word	0xffff0208

080032a4 <__ssputs_r>:
 80032a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a8:	688e      	ldr	r6, [r1, #8]
 80032aa:	4682      	mov	sl, r0
 80032ac:	429e      	cmp	r6, r3
 80032ae:	460c      	mov	r4, r1
 80032b0:	4690      	mov	r8, r2
 80032b2:	461f      	mov	r7, r3
 80032b4:	d838      	bhi.n	8003328 <__ssputs_r+0x84>
 80032b6:	898a      	ldrh	r2, [r1, #12]
 80032b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032bc:	d032      	beq.n	8003324 <__ssputs_r+0x80>
 80032be:	6825      	ldr	r5, [r4, #0]
 80032c0:	6909      	ldr	r1, [r1, #16]
 80032c2:	3301      	adds	r3, #1
 80032c4:	eba5 0901 	sub.w	r9, r5, r1
 80032c8:	6965      	ldr	r5, [r4, #20]
 80032ca:	444b      	add	r3, r9
 80032cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032d4:	106d      	asrs	r5, r5, #1
 80032d6:	429d      	cmp	r5, r3
 80032d8:	bf38      	it	cc
 80032da:	461d      	movcc	r5, r3
 80032dc:	0553      	lsls	r3, r2, #21
 80032de:	d531      	bpl.n	8003344 <__ssputs_r+0xa0>
 80032e0:	4629      	mov	r1, r5
 80032e2:	f000 fb6f 	bl	80039c4 <_malloc_r>
 80032e6:	4606      	mov	r6, r0
 80032e8:	b950      	cbnz	r0, 8003300 <__ssputs_r+0x5c>
 80032ea:	230c      	movs	r3, #12
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f8ca 3000 	str.w	r3, [sl]
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fa:	81a3      	strh	r3, [r4, #12]
 80032fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003300:	464a      	mov	r2, r9
 8003302:	6921      	ldr	r1, [r4, #16]
 8003304:	f000 face 	bl	80038a4 <memcpy>
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800330e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003312:	81a3      	strh	r3, [r4, #12]
 8003314:	6126      	str	r6, [r4, #16]
 8003316:	444e      	add	r6, r9
 8003318:	6026      	str	r6, [r4, #0]
 800331a:	463e      	mov	r6, r7
 800331c:	6165      	str	r5, [r4, #20]
 800331e:	eba5 0509 	sub.w	r5, r5, r9
 8003322:	60a5      	str	r5, [r4, #8]
 8003324:	42be      	cmp	r6, r7
 8003326:	d900      	bls.n	800332a <__ssputs_r+0x86>
 8003328:	463e      	mov	r6, r7
 800332a:	4632      	mov	r2, r6
 800332c:	4641      	mov	r1, r8
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	f000 fac6 	bl	80038c0 <memmove>
 8003334:	68a3      	ldr	r3, [r4, #8]
 8003336:	2000      	movs	r0, #0
 8003338:	1b9b      	subs	r3, r3, r6
 800333a:	60a3      	str	r3, [r4, #8]
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	4433      	add	r3, r6
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	e7db      	b.n	80032fc <__ssputs_r+0x58>
 8003344:	462a      	mov	r2, r5
 8003346:	f000 fbb1 	bl	8003aac <_realloc_r>
 800334a:	4606      	mov	r6, r0
 800334c:	2800      	cmp	r0, #0
 800334e:	d1e1      	bne.n	8003314 <__ssputs_r+0x70>
 8003350:	4650      	mov	r0, sl
 8003352:	6921      	ldr	r1, [r4, #16]
 8003354:	f000 face 	bl	80038f4 <_free_r>
 8003358:	e7c7      	b.n	80032ea <__ssputs_r+0x46>
	...

0800335c <_svfiprintf_r>:
 800335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003360:	4698      	mov	r8, r3
 8003362:	898b      	ldrh	r3, [r1, #12]
 8003364:	4607      	mov	r7, r0
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	460d      	mov	r5, r1
 800336a:	4614      	mov	r4, r2
 800336c:	b09d      	sub	sp, #116	; 0x74
 800336e:	d50e      	bpl.n	800338e <_svfiprintf_r+0x32>
 8003370:	690b      	ldr	r3, [r1, #16]
 8003372:	b963      	cbnz	r3, 800338e <_svfiprintf_r+0x32>
 8003374:	2140      	movs	r1, #64	; 0x40
 8003376:	f000 fb25 	bl	80039c4 <_malloc_r>
 800337a:	6028      	str	r0, [r5, #0]
 800337c:	6128      	str	r0, [r5, #16]
 800337e:	b920      	cbnz	r0, 800338a <_svfiprintf_r+0x2e>
 8003380:	230c      	movs	r3, #12
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	e0d1      	b.n	800352e <_svfiprintf_r+0x1d2>
 800338a:	2340      	movs	r3, #64	; 0x40
 800338c:	616b      	str	r3, [r5, #20]
 800338e:	2300      	movs	r3, #0
 8003390:	9309      	str	r3, [sp, #36]	; 0x24
 8003392:	2320      	movs	r3, #32
 8003394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003398:	2330      	movs	r3, #48	; 0x30
 800339a:	f04f 0901 	mov.w	r9, #1
 800339e:	f8cd 800c 	str.w	r8, [sp, #12]
 80033a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003548 <_svfiprintf_r+0x1ec>
 80033a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033aa:	4623      	mov	r3, r4
 80033ac:	469a      	mov	sl, r3
 80033ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033b2:	b10a      	cbz	r2, 80033b8 <_svfiprintf_r+0x5c>
 80033b4:	2a25      	cmp	r2, #37	; 0x25
 80033b6:	d1f9      	bne.n	80033ac <_svfiprintf_r+0x50>
 80033b8:	ebba 0b04 	subs.w	fp, sl, r4
 80033bc:	d00b      	beq.n	80033d6 <_svfiprintf_r+0x7a>
 80033be:	465b      	mov	r3, fp
 80033c0:	4622      	mov	r2, r4
 80033c2:	4629      	mov	r1, r5
 80033c4:	4638      	mov	r0, r7
 80033c6:	f7ff ff6d 	bl	80032a4 <__ssputs_r>
 80033ca:	3001      	adds	r0, #1
 80033cc:	f000 80aa 	beq.w	8003524 <_svfiprintf_r+0x1c8>
 80033d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033d2:	445a      	add	r2, fp
 80033d4:	9209      	str	r2, [sp, #36]	; 0x24
 80033d6:	f89a 3000 	ldrb.w	r3, [sl]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80a2 	beq.w	8003524 <_svfiprintf_r+0x1c8>
 80033e0:	2300      	movs	r3, #0
 80033e2:	f04f 32ff 	mov.w	r2, #4294967295
 80033e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033ea:	f10a 0a01 	add.w	sl, sl, #1
 80033ee:	9304      	str	r3, [sp, #16]
 80033f0:	9307      	str	r3, [sp, #28]
 80033f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033f6:	931a      	str	r3, [sp, #104]	; 0x68
 80033f8:	4654      	mov	r4, sl
 80033fa:	2205      	movs	r2, #5
 80033fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003400:	4851      	ldr	r0, [pc, #324]	; (8003548 <_svfiprintf_r+0x1ec>)
 8003402:	f000 fa41 	bl	8003888 <memchr>
 8003406:	9a04      	ldr	r2, [sp, #16]
 8003408:	b9d8      	cbnz	r0, 8003442 <_svfiprintf_r+0xe6>
 800340a:	06d0      	lsls	r0, r2, #27
 800340c:	bf44      	itt	mi
 800340e:	2320      	movmi	r3, #32
 8003410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003414:	0711      	lsls	r1, r2, #28
 8003416:	bf44      	itt	mi
 8003418:	232b      	movmi	r3, #43	; 0x2b
 800341a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800341e:	f89a 3000 	ldrb.w	r3, [sl]
 8003422:	2b2a      	cmp	r3, #42	; 0x2a
 8003424:	d015      	beq.n	8003452 <_svfiprintf_r+0xf6>
 8003426:	4654      	mov	r4, sl
 8003428:	2000      	movs	r0, #0
 800342a:	f04f 0c0a 	mov.w	ip, #10
 800342e:	9a07      	ldr	r2, [sp, #28]
 8003430:	4621      	mov	r1, r4
 8003432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003436:	3b30      	subs	r3, #48	; 0x30
 8003438:	2b09      	cmp	r3, #9
 800343a:	d94e      	bls.n	80034da <_svfiprintf_r+0x17e>
 800343c:	b1b0      	cbz	r0, 800346c <_svfiprintf_r+0x110>
 800343e:	9207      	str	r2, [sp, #28]
 8003440:	e014      	b.n	800346c <_svfiprintf_r+0x110>
 8003442:	eba0 0308 	sub.w	r3, r0, r8
 8003446:	fa09 f303 	lsl.w	r3, r9, r3
 800344a:	4313      	orrs	r3, r2
 800344c:	46a2      	mov	sl, r4
 800344e:	9304      	str	r3, [sp, #16]
 8003450:	e7d2      	b.n	80033f8 <_svfiprintf_r+0x9c>
 8003452:	9b03      	ldr	r3, [sp, #12]
 8003454:	1d19      	adds	r1, r3, #4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	9103      	str	r1, [sp, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	bfbb      	ittet	lt
 800345e:	425b      	neglt	r3, r3
 8003460:	f042 0202 	orrlt.w	r2, r2, #2
 8003464:	9307      	strge	r3, [sp, #28]
 8003466:	9307      	strlt	r3, [sp, #28]
 8003468:	bfb8      	it	lt
 800346a:	9204      	strlt	r2, [sp, #16]
 800346c:	7823      	ldrb	r3, [r4, #0]
 800346e:	2b2e      	cmp	r3, #46	; 0x2e
 8003470:	d10c      	bne.n	800348c <_svfiprintf_r+0x130>
 8003472:	7863      	ldrb	r3, [r4, #1]
 8003474:	2b2a      	cmp	r3, #42	; 0x2a
 8003476:	d135      	bne.n	80034e4 <_svfiprintf_r+0x188>
 8003478:	9b03      	ldr	r3, [sp, #12]
 800347a:	3402      	adds	r4, #2
 800347c:	1d1a      	adds	r2, r3, #4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	9203      	str	r2, [sp, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	bfb8      	it	lt
 8003486:	f04f 33ff 	movlt.w	r3, #4294967295
 800348a:	9305      	str	r3, [sp, #20]
 800348c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800354c <_svfiprintf_r+0x1f0>
 8003490:	2203      	movs	r2, #3
 8003492:	4650      	mov	r0, sl
 8003494:	7821      	ldrb	r1, [r4, #0]
 8003496:	f000 f9f7 	bl	8003888 <memchr>
 800349a:	b140      	cbz	r0, 80034ae <_svfiprintf_r+0x152>
 800349c:	2340      	movs	r3, #64	; 0x40
 800349e:	eba0 000a 	sub.w	r0, r0, sl
 80034a2:	fa03 f000 	lsl.w	r0, r3, r0
 80034a6:	9b04      	ldr	r3, [sp, #16]
 80034a8:	3401      	adds	r4, #1
 80034aa:	4303      	orrs	r3, r0
 80034ac:	9304      	str	r3, [sp, #16]
 80034ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b2:	2206      	movs	r2, #6
 80034b4:	4826      	ldr	r0, [pc, #152]	; (8003550 <_svfiprintf_r+0x1f4>)
 80034b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034ba:	f000 f9e5 	bl	8003888 <memchr>
 80034be:	2800      	cmp	r0, #0
 80034c0:	d038      	beq.n	8003534 <_svfiprintf_r+0x1d8>
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <_svfiprintf_r+0x1f8>)
 80034c4:	bb1b      	cbnz	r3, 800350e <_svfiprintf_r+0x1b2>
 80034c6:	9b03      	ldr	r3, [sp, #12]
 80034c8:	3307      	adds	r3, #7
 80034ca:	f023 0307 	bic.w	r3, r3, #7
 80034ce:	3308      	adds	r3, #8
 80034d0:	9303      	str	r3, [sp, #12]
 80034d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d4:	4433      	add	r3, r6
 80034d6:	9309      	str	r3, [sp, #36]	; 0x24
 80034d8:	e767      	b.n	80033aa <_svfiprintf_r+0x4e>
 80034da:	460c      	mov	r4, r1
 80034dc:	2001      	movs	r0, #1
 80034de:	fb0c 3202 	mla	r2, ip, r2, r3
 80034e2:	e7a5      	b.n	8003430 <_svfiprintf_r+0xd4>
 80034e4:	2300      	movs	r3, #0
 80034e6:	f04f 0c0a 	mov.w	ip, #10
 80034ea:	4619      	mov	r1, r3
 80034ec:	3401      	adds	r4, #1
 80034ee:	9305      	str	r3, [sp, #20]
 80034f0:	4620      	mov	r0, r4
 80034f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034f6:	3a30      	subs	r2, #48	; 0x30
 80034f8:	2a09      	cmp	r2, #9
 80034fa:	d903      	bls.n	8003504 <_svfiprintf_r+0x1a8>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0c5      	beq.n	800348c <_svfiprintf_r+0x130>
 8003500:	9105      	str	r1, [sp, #20]
 8003502:	e7c3      	b.n	800348c <_svfiprintf_r+0x130>
 8003504:	4604      	mov	r4, r0
 8003506:	2301      	movs	r3, #1
 8003508:	fb0c 2101 	mla	r1, ip, r1, r2
 800350c:	e7f0      	b.n	80034f0 <_svfiprintf_r+0x194>
 800350e:	ab03      	add	r3, sp, #12
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	462a      	mov	r2, r5
 8003514:	4638      	mov	r0, r7
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <_svfiprintf_r+0x1fc>)
 8003518:	a904      	add	r1, sp, #16
 800351a:	f3af 8000 	nop.w
 800351e:	1c42      	adds	r2, r0, #1
 8003520:	4606      	mov	r6, r0
 8003522:	d1d6      	bne.n	80034d2 <_svfiprintf_r+0x176>
 8003524:	89ab      	ldrh	r3, [r5, #12]
 8003526:	065b      	lsls	r3, r3, #25
 8003528:	f53f af2c 	bmi.w	8003384 <_svfiprintf_r+0x28>
 800352c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800352e:	b01d      	add	sp, #116	; 0x74
 8003530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003534:	ab03      	add	r3, sp, #12
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	462a      	mov	r2, r5
 800353a:	4638      	mov	r0, r7
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <_svfiprintf_r+0x1fc>)
 800353e:	a904      	add	r1, sp, #16
 8003540:	f000 f87c 	bl	800363c <_printf_i>
 8003544:	e7eb      	b.n	800351e <_svfiprintf_r+0x1c2>
 8003546:	bf00      	nop
 8003548:	08003bd0 	.word	0x08003bd0
 800354c:	08003bd6 	.word	0x08003bd6
 8003550:	08003bda 	.word	0x08003bda
 8003554:	00000000 	.word	0x00000000
 8003558:	080032a5 	.word	0x080032a5

0800355c <_printf_common>:
 800355c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003560:	4616      	mov	r6, r2
 8003562:	4699      	mov	r9, r3
 8003564:	688a      	ldr	r2, [r1, #8]
 8003566:	690b      	ldr	r3, [r1, #16]
 8003568:	4607      	mov	r7, r0
 800356a:	4293      	cmp	r3, r2
 800356c:	bfb8      	it	lt
 800356e:	4613      	movlt	r3, r2
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003576:	460c      	mov	r4, r1
 8003578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800357c:	b10a      	cbz	r2, 8003582 <_printf_common+0x26>
 800357e:	3301      	adds	r3, #1
 8003580:	6033      	str	r3, [r6, #0]
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	0699      	lsls	r1, r3, #26
 8003586:	bf42      	ittt	mi
 8003588:	6833      	ldrmi	r3, [r6, #0]
 800358a:	3302      	addmi	r3, #2
 800358c:	6033      	strmi	r3, [r6, #0]
 800358e:	6825      	ldr	r5, [r4, #0]
 8003590:	f015 0506 	ands.w	r5, r5, #6
 8003594:	d106      	bne.n	80035a4 <_printf_common+0x48>
 8003596:	f104 0a19 	add.w	sl, r4, #25
 800359a:	68e3      	ldr	r3, [r4, #12]
 800359c:	6832      	ldr	r2, [r6, #0]
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	42ab      	cmp	r3, r5
 80035a2:	dc28      	bgt.n	80035f6 <_printf_common+0x9a>
 80035a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035a8:	1e13      	subs	r3, r2, #0
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	bf18      	it	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	0692      	lsls	r2, r2, #26
 80035b2:	d42d      	bmi.n	8003610 <_printf_common+0xb4>
 80035b4:	4649      	mov	r1, r9
 80035b6:	4638      	mov	r0, r7
 80035b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035bc:	47c0      	blx	r8
 80035be:	3001      	adds	r0, #1
 80035c0:	d020      	beq.n	8003604 <_printf_common+0xa8>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	68e5      	ldr	r5, [r4, #12]
 80035c6:	f003 0306 	and.w	r3, r3, #6
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf18      	it	ne
 80035ce:	2500      	movne	r5, #0
 80035d0:	6832      	ldr	r2, [r6, #0]
 80035d2:	f04f 0600 	mov.w	r6, #0
 80035d6:	68a3      	ldr	r3, [r4, #8]
 80035d8:	bf08      	it	eq
 80035da:	1aad      	subeq	r5, r5, r2
 80035dc:	6922      	ldr	r2, [r4, #16]
 80035de:	bf08      	it	eq
 80035e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bfc4      	itt	gt
 80035e8:	1a9b      	subgt	r3, r3, r2
 80035ea:	18ed      	addgt	r5, r5, r3
 80035ec:	341a      	adds	r4, #26
 80035ee:	42b5      	cmp	r5, r6
 80035f0:	d11a      	bne.n	8003628 <_printf_common+0xcc>
 80035f2:	2000      	movs	r0, #0
 80035f4:	e008      	b.n	8003608 <_printf_common+0xac>
 80035f6:	2301      	movs	r3, #1
 80035f8:	4652      	mov	r2, sl
 80035fa:	4649      	mov	r1, r9
 80035fc:	4638      	mov	r0, r7
 80035fe:	47c0      	blx	r8
 8003600:	3001      	adds	r0, #1
 8003602:	d103      	bne.n	800360c <_printf_common+0xb0>
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360c:	3501      	adds	r5, #1
 800360e:	e7c4      	b.n	800359a <_printf_common+0x3e>
 8003610:	2030      	movs	r0, #48	; 0x30
 8003612:	18e1      	adds	r1, r4, r3
 8003614:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800361e:	4422      	add	r2, r4
 8003620:	3302      	adds	r3, #2
 8003622:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003626:	e7c5      	b.n	80035b4 <_printf_common+0x58>
 8003628:	2301      	movs	r3, #1
 800362a:	4622      	mov	r2, r4
 800362c:	4649      	mov	r1, r9
 800362e:	4638      	mov	r0, r7
 8003630:	47c0      	blx	r8
 8003632:	3001      	adds	r0, #1
 8003634:	d0e6      	beq.n	8003604 <_printf_common+0xa8>
 8003636:	3601      	adds	r6, #1
 8003638:	e7d9      	b.n	80035ee <_printf_common+0x92>
	...

0800363c <_printf_i>:
 800363c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003640:	7e0f      	ldrb	r7, [r1, #24]
 8003642:	4691      	mov	r9, r2
 8003644:	2f78      	cmp	r7, #120	; 0x78
 8003646:	4680      	mov	r8, r0
 8003648:	460c      	mov	r4, r1
 800364a:	469a      	mov	sl, r3
 800364c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800364e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003652:	d807      	bhi.n	8003664 <_printf_i+0x28>
 8003654:	2f62      	cmp	r7, #98	; 0x62
 8003656:	d80a      	bhi.n	800366e <_printf_i+0x32>
 8003658:	2f00      	cmp	r7, #0
 800365a:	f000 80d9 	beq.w	8003810 <_printf_i+0x1d4>
 800365e:	2f58      	cmp	r7, #88	; 0x58
 8003660:	f000 80a4 	beq.w	80037ac <_printf_i+0x170>
 8003664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800366c:	e03a      	b.n	80036e4 <_printf_i+0xa8>
 800366e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003672:	2b15      	cmp	r3, #21
 8003674:	d8f6      	bhi.n	8003664 <_printf_i+0x28>
 8003676:	a101      	add	r1, pc, #4	; (adr r1, 800367c <_printf_i+0x40>)
 8003678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800367c:	080036d5 	.word	0x080036d5
 8003680:	080036e9 	.word	0x080036e9
 8003684:	08003665 	.word	0x08003665
 8003688:	08003665 	.word	0x08003665
 800368c:	08003665 	.word	0x08003665
 8003690:	08003665 	.word	0x08003665
 8003694:	080036e9 	.word	0x080036e9
 8003698:	08003665 	.word	0x08003665
 800369c:	08003665 	.word	0x08003665
 80036a0:	08003665 	.word	0x08003665
 80036a4:	08003665 	.word	0x08003665
 80036a8:	080037f7 	.word	0x080037f7
 80036ac:	08003719 	.word	0x08003719
 80036b0:	080037d9 	.word	0x080037d9
 80036b4:	08003665 	.word	0x08003665
 80036b8:	08003665 	.word	0x08003665
 80036bc:	08003819 	.word	0x08003819
 80036c0:	08003665 	.word	0x08003665
 80036c4:	08003719 	.word	0x08003719
 80036c8:	08003665 	.word	0x08003665
 80036cc:	08003665 	.word	0x08003665
 80036d0:	080037e1 	.word	0x080037e1
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	602a      	str	r2, [r5, #0]
 80036dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0a4      	b.n	8003832 <_printf_i+0x1f6>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	6829      	ldr	r1, [r5, #0]
 80036ec:	0606      	lsls	r6, r0, #24
 80036ee:	f101 0304 	add.w	r3, r1, #4
 80036f2:	d50a      	bpl.n	800370a <_printf_i+0xce>
 80036f4:	680e      	ldr	r6, [r1, #0]
 80036f6:	602b      	str	r3, [r5, #0]
 80036f8:	2e00      	cmp	r6, #0
 80036fa:	da03      	bge.n	8003704 <_printf_i+0xc8>
 80036fc:	232d      	movs	r3, #45	; 0x2d
 80036fe:	4276      	negs	r6, r6
 8003700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003704:	230a      	movs	r3, #10
 8003706:	485e      	ldr	r0, [pc, #376]	; (8003880 <_printf_i+0x244>)
 8003708:	e019      	b.n	800373e <_printf_i+0x102>
 800370a:	680e      	ldr	r6, [r1, #0]
 800370c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003710:	602b      	str	r3, [r5, #0]
 8003712:	bf18      	it	ne
 8003714:	b236      	sxthne	r6, r6
 8003716:	e7ef      	b.n	80036f8 <_printf_i+0xbc>
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	1d19      	adds	r1, r3, #4
 800371e:	6029      	str	r1, [r5, #0]
 8003720:	0601      	lsls	r1, r0, #24
 8003722:	d501      	bpl.n	8003728 <_printf_i+0xec>
 8003724:	681e      	ldr	r6, [r3, #0]
 8003726:	e002      	b.n	800372e <_printf_i+0xf2>
 8003728:	0646      	lsls	r6, r0, #25
 800372a:	d5fb      	bpl.n	8003724 <_printf_i+0xe8>
 800372c:	881e      	ldrh	r6, [r3, #0]
 800372e:	2f6f      	cmp	r7, #111	; 0x6f
 8003730:	bf0c      	ite	eq
 8003732:	2308      	moveq	r3, #8
 8003734:	230a      	movne	r3, #10
 8003736:	4852      	ldr	r0, [pc, #328]	; (8003880 <_printf_i+0x244>)
 8003738:	2100      	movs	r1, #0
 800373a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800373e:	6865      	ldr	r5, [r4, #4]
 8003740:	2d00      	cmp	r5, #0
 8003742:	bfa8      	it	ge
 8003744:	6821      	ldrge	r1, [r4, #0]
 8003746:	60a5      	str	r5, [r4, #8]
 8003748:	bfa4      	itt	ge
 800374a:	f021 0104 	bicge.w	r1, r1, #4
 800374e:	6021      	strge	r1, [r4, #0]
 8003750:	b90e      	cbnz	r6, 8003756 <_printf_i+0x11a>
 8003752:	2d00      	cmp	r5, #0
 8003754:	d04d      	beq.n	80037f2 <_printf_i+0x1b6>
 8003756:	4615      	mov	r5, r2
 8003758:	fbb6 f1f3 	udiv	r1, r6, r3
 800375c:	fb03 6711 	mls	r7, r3, r1, r6
 8003760:	5dc7      	ldrb	r7, [r0, r7]
 8003762:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003766:	4637      	mov	r7, r6
 8003768:	42bb      	cmp	r3, r7
 800376a:	460e      	mov	r6, r1
 800376c:	d9f4      	bls.n	8003758 <_printf_i+0x11c>
 800376e:	2b08      	cmp	r3, #8
 8003770:	d10b      	bne.n	800378a <_printf_i+0x14e>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	07de      	lsls	r6, r3, #31
 8003776:	d508      	bpl.n	800378a <_printf_i+0x14e>
 8003778:	6923      	ldr	r3, [r4, #16]
 800377a:	6861      	ldr	r1, [r4, #4]
 800377c:	4299      	cmp	r1, r3
 800377e:	bfde      	ittt	le
 8003780:	2330      	movle	r3, #48	; 0x30
 8003782:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003786:	f105 35ff 	addle.w	r5, r5, #4294967295
 800378a:	1b52      	subs	r2, r2, r5
 800378c:	6122      	str	r2, [r4, #16]
 800378e:	464b      	mov	r3, r9
 8003790:	4621      	mov	r1, r4
 8003792:	4640      	mov	r0, r8
 8003794:	f8cd a000 	str.w	sl, [sp]
 8003798:	aa03      	add	r2, sp, #12
 800379a:	f7ff fedf 	bl	800355c <_printf_common>
 800379e:	3001      	adds	r0, #1
 80037a0:	d14c      	bne.n	800383c <_printf_i+0x200>
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295
 80037a6:	b004      	add	sp, #16
 80037a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ac:	4834      	ldr	r0, [pc, #208]	; (8003880 <_printf_i+0x244>)
 80037ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037b2:	6829      	ldr	r1, [r5, #0]
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80037ba:	6029      	str	r1, [r5, #0]
 80037bc:	061d      	lsls	r5, r3, #24
 80037be:	d514      	bpl.n	80037ea <_printf_i+0x1ae>
 80037c0:	07df      	lsls	r7, r3, #31
 80037c2:	bf44      	itt	mi
 80037c4:	f043 0320 	orrmi.w	r3, r3, #32
 80037c8:	6023      	strmi	r3, [r4, #0]
 80037ca:	b91e      	cbnz	r6, 80037d4 <_printf_i+0x198>
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f023 0320 	bic.w	r3, r3, #32
 80037d2:	6023      	str	r3, [r4, #0]
 80037d4:	2310      	movs	r3, #16
 80037d6:	e7af      	b.n	8003738 <_printf_i+0xfc>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	f043 0320 	orr.w	r3, r3, #32
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	2378      	movs	r3, #120	; 0x78
 80037e2:	4828      	ldr	r0, [pc, #160]	; (8003884 <_printf_i+0x248>)
 80037e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037e8:	e7e3      	b.n	80037b2 <_printf_i+0x176>
 80037ea:	0659      	lsls	r1, r3, #25
 80037ec:	bf48      	it	mi
 80037ee:	b2b6      	uxthmi	r6, r6
 80037f0:	e7e6      	b.n	80037c0 <_printf_i+0x184>
 80037f2:	4615      	mov	r5, r2
 80037f4:	e7bb      	b.n	800376e <_printf_i+0x132>
 80037f6:	682b      	ldr	r3, [r5, #0]
 80037f8:	6826      	ldr	r6, [r4, #0]
 80037fa:	1d18      	adds	r0, r3, #4
 80037fc:	6961      	ldr	r1, [r4, #20]
 80037fe:	6028      	str	r0, [r5, #0]
 8003800:	0635      	lsls	r5, r6, #24
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	d501      	bpl.n	800380a <_printf_i+0x1ce>
 8003806:	6019      	str	r1, [r3, #0]
 8003808:	e002      	b.n	8003810 <_printf_i+0x1d4>
 800380a:	0670      	lsls	r0, r6, #25
 800380c:	d5fb      	bpl.n	8003806 <_printf_i+0x1ca>
 800380e:	8019      	strh	r1, [r3, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	4615      	mov	r5, r2
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	e7ba      	b.n	800378e <_printf_i+0x152>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	2100      	movs	r1, #0
 800381c:	1d1a      	adds	r2, r3, #4
 800381e:	602a      	str	r2, [r5, #0]
 8003820:	681d      	ldr	r5, [r3, #0]
 8003822:	6862      	ldr	r2, [r4, #4]
 8003824:	4628      	mov	r0, r5
 8003826:	f000 f82f 	bl	8003888 <memchr>
 800382a:	b108      	cbz	r0, 8003830 <_printf_i+0x1f4>
 800382c:	1b40      	subs	r0, r0, r5
 800382e:	6060      	str	r0, [r4, #4]
 8003830:	6863      	ldr	r3, [r4, #4]
 8003832:	6123      	str	r3, [r4, #16]
 8003834:	2300      	movs	r3, #0
 8003836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800383a:	e7a8      	b.n	800378e <_printf_i+0x152>
 800383c:	462a      	mov	r2, r5
 800383e:	4649      	mov	r1, r9
 8003840:	4640      	mov	r0, r8
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	47d0      	blx	sl
 8003846:	3001      	adds	r0, #1
 8003848:	d0ab      	beq.n	80037a2 <_printf_i+0x166>
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	079b      	lsls	r3, r3, #30
 800384e:	d413      	bmi.n	8003878 <_printf_i+0x23c>
 8003850:	68e0      	ldr	r0, [r4, #12]
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	4298      	cmp	r0, r3
 8003856:	bfb8      	it	lt
 8003858:	4618      	movlt	r0, r3
 800385a:	e7a4      	b.n	80037a6 <_printf_i+0x16a>
 800385c:	2301      	movs	r3, #1
 800385e:	4632      	mov	r2, r6
 8003860:	4649      	mov	r1, r9
 8003862:	4640      	mov	r0, r8
 8003864:	47d0      	blx	sl
 8003866:	3001      	adds	r0, #1
 8003868:	d09b      	beq.n	80037a2 <_printf_i+0x166>
 800386a:	3501      	adds	r5, #1
 800386c:	68e3      	ldr	r3, [r4, #12]
 800386e:	9903      	ldr	r1, [sp, #12]
 8003870:	1a5b      	subs	r3, r3, r1
 8003872:	42ab      	cmp	r3, r5
 8003874:	dcf2      	bgt.n	800385c <_printf_i+0x220>
 8003876:	e7eb      	b.n	8003850 <_printf_i+0x214>
 8003878:	2500      	movs	r5, #0
 800387a:	f104 0619 	add.w	r6, r4, #25
 800387e:	e7f5      	b.n	800386c <_printf_i+0x230>
 8003880:	08003be1 	.word	0x08003be1
 8003884:	08003bf2 	.word	0x08003bf2

08003888 <memchr>:
 8003888:	4603      	mov	r3, r0
 800388a:	b510      	push	{r4, lr}
 800388c:	b2c9      	uxtb	r1, r1
 800388e:	4402      	add	r2, r0
 8003890:	4293      	cmp	r3, r2
 8003892:	4618      	mov	r0, r3
 8003894:	d101      	bne.n	800389a <memchr+0x12>
 8003896:	2000      	movs	r0, #0
 8003898:	e003      	b.n	80038a2 <memchr+0x1a>
 800389a:	7804      	ldrb	r4, [r0, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	428c      	cmp	r4, r1
 80038a0:	d1f6      	bne.n	8003890 <memchr+0x8>
 80038a2:	bd10      	pop	{r4, pc}

080038a4 <memcpy>:
 80038a4:	440a      	add	r2, r1
 80038a6:	4291      	cmp	r1, r2
 80038a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038ac:	d100      	bne.n	80038b0 <memcpy+0xc>
 80038ae:	4770      	bx	lr
 80038b0:	b510      	push	{r4, lr}
 80038b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038b6:	4291      	cmp	r1, r2
 80038b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038bc:	d1f9      	bne.n	80038b2 <memcpy+0xe>
 80038be:	bd10      	pop	{r4, pc}

080038c0 <memmove>:
 80038c0:	4288      	cmp	r0, r1
 80038c2:	b510      	push	{r4, lr}
 80038c4:	eb01 0402 	add.w	r4, r1, r2
 80038c8:	d902      	bls.n	80038d0 <memmove+0x10>
 80038ca:	4284      	cmp	r4, r0
 80038cc:	4623      	mov	r3, r4
 80038ce:	d807      	bhi.n	80038e0 <memmove+0x20>
 80038d0:	1e43      	subs	r3, r0, #1
 80038d2:	42a1      	cmp	r1, r4
 80038d4:	d008      	beq.n	80038e8 <memmove+0x28>
 80038d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038de:	e7f8      	b.n	80038d2 <memmove+0x12>
 80038e0:	4601      	mov	r1, r0
 80038e2:	4402      	add	r2, r0
 80038e4:	428a      	cmp	r2, r1
 80038e6:	d100      	bne.n	80038ea <memmove+0x2a>
 80038e8:	bd10      	pop	{r4, pc}
 80038ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038f2:	e7f7      	b.n	80038e4 <memmove+0x24>

080038f4 <_free_r>:
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	4605      	mov	r5, r0
 80038f8:	2900      	cmp	r1, #0
 80038fa:	d040      	beq.n	800397e <_free_r+0x8a>
 80038fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003900:	1f0c      	subs	r4, r1, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bfb8      	it	lt
 8003906:	18e4      	addlt	r4, r4, r3
 8003908:	f000 f910 	bl	8003b2c <__malloc_lock>
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <_free_r+0x8c>)
 800390e:	6813      	ldr	r3, [r2, #0]
 8003910:	b933      	cbnz	r3, 8003920 <_free_r+0x2c>
 8003912:	6063      	str	r3, [r4, #4]
 8003914:	6014      	str	r4, [r2, #0]
 8003916:	4628      	mov	r0, r5
 8003918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800391c:	f000 b90c 	b.w	8003b38 <__malloc_unlock>
 8003920:	42a3      	cmp	r3, r4
 8003922:	d908      	bls.n	8003936 <_free_r+0x42>
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	1821      	adds	r1, r4, r0
 8003928:	428b      	cmp	r3, r1
 800392a:	bf01      	itttt	eq
 800392c:	6819      	ldreq	r1, [r3, #0]
 800392e:	685b      	ldreq	r3, [r3, #4]
 8003930:	1809      	addeq	r1, r1, r0
 8003932:	6021      	streq	r1, [r4, #0]
 8003934:	e7ed      	b.n	8003912 <_free_r+0x1e>
 8003936:	461a      	mov	r2, r3
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	b10b      	cbz	r3, 8003940 <_free_r+0x4c>
 800393c:	42a3      	cmp	r3, r4
 800393e:	d9fa      	bls.n	8003936 <_free_r+0x42>
 8003940:	6811      	ldr	r1, [r2, #0]
 8003942:	1850      	adds	r0, r2, r1
 8003944:	42a0      	cmp	r0, r4
 8003946:	d10b      	bne.n	8003960 <_free_r+0x6c>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	4401      	add	r1, r0
 800394c:	1850      	adds	r0, r2, r1
 800394e:	4283      	cmp	r3, r0
 8003950:	6011      	str	r1, [r2, #0]
 8003952:	d1e0      	bne.n	8003916 <_free_r+0x22>
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4401      	add	r1, r0
 800395a:	6011      	str	r1, [r2, #0]
 800395c:	6053      	str	r3, [r2, #4]
 800395e:	e7da      	b.n	8003916 <_free_r+0x22>
 8003960:	d902      	bls.n	8003968 <_free_r+0x74>
 8003962:	230c      	movs	r3, #12
 8003964:	602b      	str	r3, [r5, #0]
 8003966:	e7d6      	b.n	8003916 <_free_r+0x22>
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	1821      	adds	r1, r4, r0
 800396c:	428b      	cmp	r3, r1
 800396e:	bf01      	itttt	eq
 8003970:	6819      	ldreq	r1, [r3, #0]
 8003972:	685b      	ldreq	r3, [r3, #4]
 8003974:	1809      	addeq	r1, r1, r0
 8003976:	6021      	streq	r1, [r4, #0]
 8003978:	6063      	str	r3, [r4, #4]
 800397a:	6054      	str	r4, [r2, #4]
 800397c:	e7cb      	b.n	8003916 <_free_r+0x22>
 800397e:	bd38      	pop	{r3, r4, r5, pc}
 8003980:	20000188 	.word	0x20000188

08003984 <sbrk_aligned>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4e0e      	ldr	r6, [pc, #56]	; (80039c0 <sbrk_aligned+0x3c>)
 8003988:	460c      	mov	r4, r1
 800398a:	6831      	ldr	r1, [r6, #0]
 800398c:	4605      	mov	r5, r0
 800398e:	b911      	cbnz	r1, 8003996 <sbrk_aligned+0x12>
 8003990:	f000 f8bc 	bl	8003b0c <_sbrk_r>
 8003994:	6030      	str	r0, [r6, #0]
 8003996:	4621      	mov	r1, r4
 8003998:	4628      	mov	r0, r5
 800399a:	f000 f8b7 	bl	8003b0c <_sbrk_r>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d00a      	beq.n	80039b8 <sbrk_aligned+0x34>
 80039a2:	1cc4      	adds	r4, r0, #3
 80039a4:	f024 0403 	bic.w	r4, r4, #3
 80039a8:	42a0      	cmp	r0, r4
 80039aa:	d007      	beq.n	80039bc <sbrk_aligned+0x38>
 80039ac:	1a21      	subs	r1, r4, r0
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 f8ac 	bl	8003b0c <_sbrk_r>
 80039b4:	3001      	adds	r0, #1
 80039b6:	d101      	bne.n	80039bc <sbrk_aligned+0x38>
 80039b8:	f04f 34ff 	mov.w	r4, #4294967295
 80039bc:	4620      	mov	r0, r4
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	2000018c 	.word	0x2000018c

080039c4 <_malloc_r>:
 80039c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c8:	1ccd      	adds	r5, r1, #3
 80039ca:	f025 0503 	bic.w	r5, r5, #3
 80039ce:	3508      	adds	r5, #8
 80039d0:	2d0c      	cmp	r5, #12
 80039d2:	bf38      	it	cc
 80039d4:	250c      	movcc	r5, #12
 80039d6:	2d00      	cmp	r5, #0
 80039d8:	4607      	mov	r7, r0
 80039da:	db01      	blt.n	80039e0 <_malloc_r+0x1c>
 80039dc:	42a9      	cmp	r1, r5
 80039de:	d905      	bls.n	80039ec <_malloc_r+0x28>
 80039e0:	230c      	movs	r3, #12
 80039e2:	2600      	movs	r6, #0
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4630      	mov	r0, r6
 80039e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ec:	4e2e      	ldr	r6, [pc, #184]	; (8003aa8 <_malloc_r+0xe4>)
 80039ee:	f000 f89d 	bl	8003b2c <__malloc_lock>
 80039f2:	6833      	ldr	r3, [r6, #0]
 80039f4:	461c      	mov	r4, r3
 80039f6:	bb34      	cbnz	r4, 8003a46 <_malloc_r+0x82>
 80039f8:	4629      	mov	r1, r5
 80039fa:	4638      	mov	r0, r7
 80039fc:	f7ff ffc2 	bl	8003984 <sbrk_aligned>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	4604      	mov	r4, r0
 8003a04:	d14d      	bne.n	8003aa2 <_malloc_r+0xde>
 8003a06:	6834      	ldr	r4, [r6, #0]
 8003a08:	4626      	mov	r6, r4
 8003a0a:	2e00      	cmp	r6, #0
 8003a0c:	d140      	bne.n	8003a90 <_malloc_r+0xcc>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	4631      	mov	r1, r6
 8003a12:	4638      	mov	r0, r7
 8003a14:	eb04 0803 	add.w	r8, r4, r3
 8003a18:	f000 f878 	bl	8003b0c <_sbrk_r>
 8003a1c:	4580      	cmp	r8, r0
 8003a1e:	d13a      	bne.n	8003a96 <_malloc_r+0xd2>
 8003a20:	6821      	ldr	r1, [r4, #0]
 8003a22:	3503      	adds	r5, #3
 8003a24:	1a6d      	subs	r5, r5, r1
 8003a26:	f025 0503 	bic.w	r5, r5, #3
 8003a2a:	3508      	adds	r5, #8
 8003a2c:	2d0c      	cmp	r5, #12
 8003a2e:	bf38      	it	cc
 8003a30:	250c      	movcc	r5, #12
 8003a32:	4638      	mov	r0, r7
 8003a34:	4629      	mov	r1, r5
 8003a36:	f7ff ffa5 	bl	8003984 <sbrk_aligned>
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	d02b      	beq.n	8003a96 <_malloc_r+0xd2>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	442b      	add	r3, r5
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	e00e      	b.n	8003a64 <_malloc_r+0xa0>
 8003a46:	6822      	ldr	r2, [r4, #0]
 8003a48:	1b52      	subs	r2, r2, r5
 8003a4a:	d41e      	bmi.n	8003a8a <_malloc_r+0xc6>
 8003a4c:	2a0b      	cmp	r2, #11
 8003a4e:	d916      	bls.n	8003a7e <_malloc_r+0xba>
 8003a50:	1961      	adds	r1, r4, r5
 8003a52:	42a3      	cmp	r3, r4
 8003a54:	6025      	str	r5, [r4, #0]
 8003a56:	bf18      	it	ne
 8003a58:	6059      	strne	r1, [r3, #4]
 8003a5a:	6863      	ldr	r3, [r4, #4]
 8003a5c:	bf08      	it	eq
 8003a5e:	6031      	streq	r1, [r6, #0]
 8003a60:	5162      	str	r2, [r4, r5]
 8003a62:	604b      	str	r3, [r1, #4]
 8003a64:	4638      	mov	r0, r7
 8003a66:	f104 060b 	add.w	r6, r4, #11
 8003a6a:	f000 f865 	bl	8003b38 <__malloc_unlock>
 8003a6e:	f026 0607 	bic.w	r6, r6, #7
 8003a72:	1d23      	adds	r3, r4, #4
 8003a74:	1af2      	subs	r2, r6, r3
 8003a76:	d0b6      	beq.n	80039e6 <_malloc_r+0x22>
 8003a78:	1b9b      	subs	r3, r3, r6
 8003a7a:	50a3      	str	r3, [r4, r2]
 8003a7c:	e7b3      	b.n	80039e6 <_malloc_r+0x22>
 8003a7e:	6862      	ldr	r2, [r4, #4]
 8003a80:	42a3      	cmp	r3, r4
 8003a82:	bf0c      	ite	eq
 8003a84:	6032      	streq	r2, [r6, #0]
 8003a86:	605a      	strne	r2, [r3, #4]
 8003a88:	e7ec      	b.n	8003a64 <_malloc_r+0xa0>
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	6864      	ldr	r4, [r4, #4]
 8003a8e:	e7b2      	b.n	80039f6 <_malloc_r+0x32>
 8003a90:	4634      	mov	r4, r6
 8003a92:	6876      	ldr	r6, [r6, #4]
 8003a94:	e7b9      	b.n	8003a0a <_malloc_r+0x46>
 8003a96:	230c      	movs	r3, #12
 8003a98:	4638      	mov	r0, r7
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	f000 f84c 	bl	8003b38 <__malloc_unlock>
 8003aa0:	e7a1      	b.n	80039e6 <_malloc_r+0x22>
 8003aa2:	6025      	str	r5, [r4, #0]
 8003aa4:	e7de      	b.n	8003a64 <_malloc_r+0xa0>
 8003aa6:	bf00      	nop
 8003aa8:	20000188 	.word	0x20000188

08003aac <_realloc_r>:
 8003aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab0:	4680      	mov	r8, r0
 8003ab2:	4614      	mov	r4, r2
 8003ab4:	460e      	mov	r6, r1
 8003ab6:	b921      	cbnz	r1, 8003ac2 <_realloc_r+0x16>
 8003ab8:	4611      	mov	r1, r2
 8003aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003abe:	f7ff bf81 	b.w	80039c4 <_malloc_r>
 8003ac2:	b92a      	cbnz	r2, 8003ad0 <_realloc_r+0x24>
 8003ac4:	f7ff ff16 	bl	80038f4 <_free_r>
 8003ac8:	4625      	mov	r5, r4
 8003aca:	4628      	mov	r0, r5
 8003acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad0:	f000 f838 	bl	8003b44 <_malloc_usable_size_r>
 8003ad4:	4284      	cmp	r4, r0
 8003ad6:	4607      	mov	r7, r0
 8003ad8:	d802      	bhi.n	8003ae0 <_realloc_r+0x34>
 8003ada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ade:	d812      	bhi.n	8003b06 <_realloc_r+0x5a>
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	f7ff ff6e 	bl	80039c4 <_malloc_r>
 8003ae8:	4605      	mov	r5, r0
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d0ed      	beq.n	8003aca <_realloc_r+0x1e>
 8003aee:	42bc      	cmp	r4, r7
 8003af0:	4622      	mov	r2, r4
 8003af2:	4631      	mov	r1, r6
 8003af4:	bf28      	it	cs
 8003af6:	463a      	movcs	r2, r7
 8003af8:	f7ff fed4 	bl	80038a4 <memcpy>
 8003afc:	4631      	mov	r1, r6
 8003afe:	4640      	mov	r0, r8
 8003b00:	f7ff fef8 	bl	80038f4 <_free_r>
 8003b04:	e7e1      	b.n	8003aca <_realloc_r+0x1e>
 8003b06:	4635      	mov	r5, r6
 8003b08:	e7df      	b.n	8003aca <_realloc_r+0x1e>
	...

08003b0c <_sbrk_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	2300      	movs	r3, #0
 8003b10:	4d05      	ldr	r5, [pc, #20]	; (8003b28 <_sbrk_r+0x1c>)
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	602b      	str	r3, [r5, #0]
 8003b18:	f7fc ff52 	bl	80009c0 <_sbrk>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_sbrk_r+0x1a>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_sbrk_r+0x1a>
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	20000190 	.word	0x20000190

08003b2c <__malloc_lock>:
 8003b2c:	4801      	ldr	r0, [pc, #4]	; (8003b34 <__malloc_lock+0x8>)
 8003b2e:	f000 b811 	b.w	8003b54 <__retarget_lock_acquire_recursive>
 8003b32:	bf00      	nop
 8003b34:	20000194 	.word	0x20000194

08003b38 <__malloc_unlock>:
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <__malloc_unlock+0x8>)
 8003b3a:	f000 b80c 	b.w	8003b56 <__retarget_lock_release_recursive>
 8003b3e:	bf00      	nop
 8003b40:	20000194 	.word	0x20000194

08003b44 <_malloc_usable_size_r>:
 8003b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b48:	1f18      	subs	r0, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfbc      	itt	lt
 8003b4e:	580b      	ldrlt	r3, [r1, r0]
 8003b50:	18c0      	addlt	r0, r0, r3
 8003b52:	4770      	bx	lr

08003b54 <__retarget_lock_acquire_recursive>:
 8003b54:	4770      	bx	lr

08003b56 <__retarget_lock_release_recursive>:
 8003b56:	4770      	bx	lr

08003b58 <_init>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	bf00      	nop
 8003b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5e:	bc08      	pop	{r3}
 8003b60:	469e      	mov	lr, r3
 8003b62:	4770      	bx	lr

08003b64 <_fini>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr
