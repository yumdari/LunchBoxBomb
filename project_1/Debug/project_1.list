
project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d8  080060d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080060d8  080060d8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060d8  080060d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000074  08006154  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08006154  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe3c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258e  00000000  00000000  0002fed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00032468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  000335d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019756  00000000  00000000  00034668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c5f  00000000  00000000  0004ddbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093247  00000000  00000000  00060a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3c64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ec  00000000  00000000  000f3cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f98 	.word	0x08005f98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005f98 	.word	0x08005f98

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup 4E or 3F 27

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f002 fadf 	bl	800275c <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000104 	.word	0x20000104

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f002 faaf 	bl	800275c <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000104 	.word	0x20000104

0800020c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    switch (row)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d003      	beq.n	8000224 <lcd_put_cur+0x18>
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d005      	beq.n	800022e <lcd_put_cur+0x22>
 8000222:	e009      	b.n	8000238 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800022a:	603b      	str	r3, [r7, #0]
            break;
 800022c:	e004      	b.n	8000238 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000234:	603b      	str	r3, [r7, #0]
            break;
 8000236:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <lcd_send_cmd>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <lcd_init>:


void lcd_init (void)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800024e:	2032      	movs	r0, #50	; 0x32
 8000250:	f001 f8a0 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000254:	2030      	movs	r0, #48	; 0x30
 8000256:	f7ff ff79 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800025a:	2005      	movs	r0, #5
 800025c:	f001 f89a 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000260:	2030      	movs	r0, #48	; 0x30
 8000262:	f7ff ff73 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000266:	2001      	movs	r0, #1
 8000268:	f001 f894 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x30);
 800026c:	2030      	movs	r0, #48	; 0x30
 800026e:	f7ff ff6d 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000272:	200a      	movs	r0, #10
 8000274:	f001 f88e 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000278:	2020      	movs	r0, #32
 800027a:	f7ff ff67 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800027e:	200a      	movs	r0, #10
 8000280:	f001 f888 	bl	8001394 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000284:	2028      	movs	r0, #40	; 0x28
 8000286:	f7ff ff61 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f001 f882 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000290:	2008      	movs	r0, #8
 8000292:	f7ff ff5b 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f001 f87c 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ff55 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002a2:	2001      	movs	r0, #1
 80002a4:	f001 f876 	bl	8001394 <HAL_Delay>
	HAL_Delay(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f001 f873 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002ae:	2006      	movs	r0, #6
 80002b0:	f7ff ff4c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f001 f86d 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002ba:	200c      	movs	r0, #12
 80002bc:	f7ff ff46 	bl	800014c <lcd_send_cmd>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002cc:	e006      	b.n	80002dc <lcd_send_string+0x18>
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff68 	bl	80001ac <lcd_send_data>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f4      	bne.n	80002ce <lcd_send_string+0xa>
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <map>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
//----------------------------------- Gyro sensor------------------------------------
long map(long x, long in_min, long in_max, long out_min, long out_max)
	 {
 80002ee:	b480      	push	{r7}
 80002f0:	b085      	sub	sp, #20
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	60f8      	str	r0, [r7, #12]
 80002f6:	60b9      	str	r1, [r7, #8]
 80002f8:	607a      	str	r2, [r7, #4]
 80002fa:	603b      	str	r3, [r7, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	69b9      	ldr	r1, [r7, #24]
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	1a8a      	subs	r2, r1, r2
 8000308:	fb03 f202 	mul.w	r2, r3, r2
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	1acb      	subs	r3, r1, r3
 8000312:	fb92 f2f3 	sdiv	r2, r2, r3
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	4413      	add	r3, r2
	 }
 800031a:	4618      	mov	r0, r3
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr

08000324 <servoReady>:
char Sec[10];
//------------------------------------------------------------------------------------

//------------------------------------ Servo motor ------------------------------------
void servoReady()
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 2000); //Servo1 1ms PWM - 90defree
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <servoReady+0x20>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000330:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 1000); //setvo2 1ms PWM - 0defree
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <servoReady+0x20>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800033a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	200001a0 	.word	0x200001a0

08000348 <servoBoom>:

void servoBoom()
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 1000);
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <servoBoom+0x20>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000354:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 2000);
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <servoBoom+0x20>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800035e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	200001a0 	.word	0x200001a0

0800036c <Explosion>:
int Explosion_1 = 0;
int Is_1 = 0;
int Art_1 = 0;

void Explosion()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	if(Explosion_1==0){
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <Explosion+0x38>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d112      	bne.n	800039e <Explosion+0x32>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037e:	480a      	ldr	r0, [pc, #40]	; (80003a8 <Explosion+0x3c>)
 8000380:	f002 f878 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000384:	2064      	movs	r0, #100	; 0x64
 8000386:	f001 f805 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000390:	4805      	ldr	r0, [pc, #20]	; (80003a8 <Explosion+0x3c>)
 8000392:	f002 f86f 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(800);
 8000396:	f44f 7048 	mov.w	r0, #800	; 0x320
 800039a:	f000 fffb 	bl	8001394 <HAL_Delay>
	}
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000254 	.word	0x20000254
 80003a8:	40011000 	.word	0x40011000

080003ac <Is>:

void Is()
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	if(Is_1==0){
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <Is+0x5c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d125      	bne.n	8000404 <Is+0x58>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003be:	4813      	ldr	r0, [pc, #76]	; (800040c <Is+0x60>)
 80003c0:	f002 f858 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80003c4:	2064      	movs	r0, #100	; 0x64
 80003c6:	f000 ffe5 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d0:	480e      	ldr	r0, [pc, #56]	; (800040c <Is+0x60>)
 80003d2:	f002 f84f 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 80003d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003da:	f000 ffdb 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_SET);
 80003de:	2201      	movs	r2, #1
 80003e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e4:	4809      	ldr	r0, [pc, #36]	; (800040c <Is+0x60>)
 80003e6:	f002 f845 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80003ea:	2064      	movs	r0, #100	; 0x64
 80003ec:	f000 ffd2 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <Is+0x60>)
 80003f8:	f002 f83c 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 80003fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000400:	f000 ffc8 	bl	8001394 <HAL_Delay>
	}
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000258 	.word	0x20000258
 800040c:	40011000 	.word	0x40011000

08000410 <Art>:

void Art()
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	if(Art_1==0){
 8000414:	4b2f      	ldr	r3, [pc, #188]	; (80004d4 <Art+0xc4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d159      	bne.n	80004d0 <Art+0xc0>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000422:	482d      	ldr	r0, [pc, #180]	; (80004d8 <Art+0xc8>)
 8000424:	f002 f826 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8000428:	2032      	movs	r0, #50	; 0x32
 800042a:	f000 ffb3 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000434:	4828      	ldr	r0, [pc, #160]	; (80004d8 <Art+0xc8>)
 8000436:	f002 f81d 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800043a:	2032      	movs	r0, #50	; 0x32
 800043c:	f000 ffaa 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_SET);
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000446:	4824      	ldr	r0, [pc, #144]	; (80004d8 <Art+0xc8>)
 8000448:	f002 f814 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800044c:	2032      	movs	r0, #50	; 0x32
 800044e:	f000 ffa1 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000458:	481f      	ldr	r0, [pc, #124]	; (80004d8 <Art+0xc8>)
 800045a:	f002 f80b 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800045e:	2032      	movs	r0, #50	; 0x32
 8000460:	f000 ff98 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_SET);
 8000464:	2201      	movs	r2, #1
 8000466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046a:	481b      	ldr	r0, [pc, #108]	; (80004d8 <Art+0xc8>)
 800046c:	f002 f802 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8000470:	2032      	movs	r0, #50	; 0x32
 8000472:	f000 ff8f 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047c:	4816      	ldr	r0, [pc, #88]	; (80004d8 <Art+0xc8>)
 800047e:	f001 fff9 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8000482:	2032      	movs	r0, #50	; 0x32
 8000484:	f000 ff86 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800048e:	4812      	ldr	r0, [pc, #72]	; (80004d8 <Art+0xc8>)
 8000490:	f001 fff0 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8000494:	2032      	movs	r0, #50	; 0x32
 8000496:	f000 ff7d 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a0:	480d      	ldr	r0, [pc, #52]	; (80004d8 <Art+0xc8>)
 80004a2:	f001 ffe7 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 80004a6:	2032      	movs	r0, #50	; 0x32
 80004a8:	f000 ff74 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b2:	4809      	ldr	r0, [pc, #36]	; (80004d8 <Art+0xc8>)
 80004b4:	f001 ffde 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 80004b8:	2032      	movs	r0, #50	; 0x32
 80004ba:	f000 ff6b 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, buzzer_Pin, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <Art+0xc8>)
 80004c6:	f001 ffd5 	bl	8002474 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 80004ca:	2032      	movs	r0, #50	; 0x32
 80004cc:	f000 ff62 	bl	8001394 <HAL_Delay>
	}
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000025c 	.word	0x2000025c
 80004d8:	40011000 	.word	0x40011000

080004dc <start>:
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
void start()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	lcd_init();
 80004e0:	f7ff feb3 	bl	800024a <lcd_init>
	HAL_TIM_Base_Start_IT(&htim2);
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <start+0x34>)
 80004e6:	f003 f95f 	bl	80037a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80004ea:	2100      	movs	r1, #0
 80004ec:	4808      	ldr	r0, [pc, #32]	; (8000510 <start+0x34>)
 80004ee:	f003 fa05 	bl	80038fc <HAL_TIM_OC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // setvo1 motor
 80004f2:	2100      	movs	r1, #0
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <start+0x38>)
 80004f6:	f003 fb41 	bl	8003b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // setvo2 motor
 80004fa:	2104      	movs	r1, #4
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <start+0x38>)
 80004fe:	f003 fb3d 	bl	8003b7c <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 3); // Gyro
 8000502:	2203      	movs	r2, #3
 8000504:	4904      	ldr	r1, [pc, #16]	; (8000518 <start+0x3c>)
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <start+0x40>)
 8000508:	f001 f840 	bl	800158c <HAL_ADC_Start_DMA>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000158 	.word	0x20000158
 8000514:	200001a0 	.word	0x200001a0
 8000518:	2000022c 	.word	0x2000022c
 800051c:	20000090 	.word	0x20000090

08000520 <Burzzer>:
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void Burzzer()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	if(sec < 14)
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <Burzzer+0x24>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b0d      	cmp	r3, #13
 800052a:	d808      	bhi.n	800053e <Burzzer+0x1e>
		  {
			  Explosion();
 800052c:	f7ff ff1e 	bl	800036c <Explosion>
			  if(sec == 9)
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <Burzzer+0x24>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b09      	cmp	r3, #9
 8000536:	d102      	bne.n	800053e <Burzzer+0x1e>
			  	  {
				  Explosion_1 = 1;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <Burzzer+0x28>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
			  	  }
		  }
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000254 	.word	0x20000254

0800054c <Burzzer1>:

void Burzzer1()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	if(sec < 10)
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <Burzzer1+0x24>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b09      	cmp	r3, #9
 8000556:	d808      	bhi.n	800056a <Burzzer1+0x1e>
		{
			Is();
 8000558:	f7ff ff28 	bl	80003ac <Is>
			if(sec == 4)
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <Burzzer1+0x24>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b04      	cmp	r3, #4
 8000562:	d102      	bne.n	800056a <Burzzer1+0x1e>
				{
				Is_1 = 1;
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <Burzzer1+0x28>)
 8000566:	2201      	movs	r2, #1
 8000568:	601a      	str	r2, [r3, #0]
				}
		 }
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000000 	.word	0x20000000
 8000574:	20000258 	.word	0x20000258

08000578 <Burzzer2>:

void Burzzer2()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	if(sec < 5)
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <Burzzer2+0x24>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b04      	cmp	r3, #4
 8000582:	d808      	bhi.n	8000596 <Burzzer2+0x1e>
		{
			Art();
 8000584:	f7ff ff44 	bl	8000410 <Art>
			if(sec == 0)
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <Burzzer2+0x24>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d102      	bne.n	8000596 <Burzzer2+0x1e>
				{
				Art_1 = 1;
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <Burzzer2+0x28>)
 8000592:	2201      	movs	r2, #1
 8000594:	601a      	str	r2, [r3, #0]
				}
		 }
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000
 80005a0:	2000025c 	.word	0x2000025c

080005a4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005ac:	1d39      	adds	r1, r7, #4
 80005ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b2:	2201      	movs	r2, #1
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <__io_putchar+0x20>)
 80005b6:	f004 f9e2 	bl	800497e <HAL_UART_Transmit>

  return ch;
 80005ba:	687b      	ldr	r3, [r7, #4]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200001e8 	.word	0x200001e8

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fe7f 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f875 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 fa93 	bl	8000b00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005da:	f000 fa49 	bl	8000a70 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005de:	f000 f923 	bl	8000828 <MX_I2C1_Init>
  MX_DMA_Init();
 80005e2:	f000 fa6f 	bl	8000ac4 <MX_DMA_Init>
  MX_TIM3_Init();
 80005e6:	f000 f9c1 	bl	800096c <MX_TIM3_Init>
  MX_ADC1_Init();
 80005ea:	f000 f8c1 	bl	8000770 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005ee:	f000 f949 	bl	8000884 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  start();
 80005f2:	f7ff ff73 	bl	80004dc <start>
  servoReady();
 80005f6:	f7ff fe95 	bl	8000324 <servoReady>

	//------------- burzzer
	Explosion_1 = 0;
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <main+0xd4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
	Is_1 = 0;
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <main+0xd8>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
	Art_1 = 0;
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <main+0xdc>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //-------------------------------- Gyro mappoing
	  xAng = map(adc_value[0], 1554, 2356, -90, 90);
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <main+0xe0>)
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	235a      	movs	r3, #90	; 0x5a
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8000618:	f640 1234 	movw	r2, #2356	; 0x934
 800061c:	f240 6112 	movw	r1, #1554	; 0x612
 8000620:	f7ff fe65 	bl	80002ee <map>
 8000624:	4603      	mov	r3, r0
 8000626:	4a21      	ldr	r2, [pc, #132]	; (80006ac <main+0xe4>)
 8000628:	6013      	str	r3, [r2, #0]
	  yAng = map(adc_value[1], 1544, 2378, -90, 90);
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <main+0xe0>)
 800062c:	6858      	ldr	r0, [r3, #4]
 800062e:	235a      	movs	r3, #90	; 0x5a
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8000636:	f640 124a 	movw	r2, #2378	; 0x94a
 800063a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800063e:	f7ff fe56 	bl	80002ee <map>
 8000642:	4603      	mov	r3, r0
 8000644:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <main+0xe8>)
 8000646:	6013      	str	r3, [r2, #0]
	  zAng = map(adc_value[2], 1723, 3346, -90, 90);
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <main+0xe0>)
 800064a:	6898      	ldr	r0, [r3, #8]
 800064c:	235a      	movs	r3, #90	; 0x5a
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8000654:	f640 5212 	movw	r2, #3346	; 0xd12
 8000658:	f240 61bb 	movw	r1, #1723	; 0x6bb
 800065c:	f7ff fe47 	bl	80002ee <map>
 8000660:	4603      	mov	r3, r0
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <main+0xec>)
 8000664:	6013      	str	r3, [r2, #0]
	  //------------------------------------------------

	  //--------------------------------- Gyro -> putty
	  printf("X_Value : %ld, Y_Value : %ld,  Z_Value : %ld\r\n", xAng, yAng, zAng);
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <main+0xe4>)
 8000668:	6819      	ldr	r1, [r3, #0]
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <main+0xe8>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <main+0xec>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <main+0xf0>)
 8000674:	f004 fb20 	bl	8004cb8 <iprintf>
	  HAL_Delay(200);
 8000678:	20c8      	movs	r0, #200	; 0xc8
 800067a:	f000 fe8b 	bl	8001394 <HAL_Delay>
	  //-----------------------------------------------


	  if(xAng > 30)
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <main+0xe4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b1e      	cmp	r3, #30
 8000684:	dd02      	ble.n	800068c <main+0xc4>
	  {
		  flag_sw1 = 1;
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <main+0xf4>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
	  }

	  Burzzer();
 800068c:	f7ff ff48 	bl	8000520 <Burzzer>
	  Burzzer1();
 8000690:	f7ff ff5c 	bl	800054c <Burzzer1>
	  Burzzer2();
 8000694:	f7ff ff70 	bl	8000578 <Burzzer2>
	  xAng = map(adc_value[0], 1554, 2356, -90, 90);
 8000698:	e7b8      	b.n	800060c <main+0x44>
 800069a:	bf00      	nop
 800069c:	20000254 	.word	0x20000254
 80006a0:	20000258 	.word	0x20000258
 80006a4:	2000025c 	.word	0x2000025c
 80006a8:	2000022c 	.word	0x2000022c
 80006ac:	20000238 	.word	0x20000238
 80006b0:	2000023c 	.word	0x2000023c
 80006b4:	20000240 	.word	0x20000240
 80006b8:	08005fb0 	.word	0x08005fb0
 80006bc:	20000244 	.word	0x20000244

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ca:	2228      	movs	r2, #40	; 0x28
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 faea 	bl	8004ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000700:	2300      	movs	r3, #0
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000704:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fb2a 	bl	8002d68 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800071a:	f000 fb35 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2302      	movs	r3, #2
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2102      	movs	r1, #2
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fd96 	bl	800326c <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000746:	f000 fb1f 	bl	8000d88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800074a:	2302      	movs	r3, #2
 800074c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800074e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000752:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f002 ff20 	bl	800359c <HAL_RCCEx_PeriphCLKConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000762:	f000 fb11 	bl	8000d88 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <MX_ADC1_Init+0xb0>)
 8000782:	4a28      	ldr	r2, [pc, #160]	; (8000824 <MX_ADC1_Init+0xb4>)
 8000784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_ADC1_Init+0xb0>)
 8000788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <MX_ADC1_Init+0xb0>)
 8000790:	2201      	movs	r2, #1
 8000792:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <MX_ADC1_Init+0xb0>)
 8000796:	2200      	movs	r2, #0
 8000798:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_ADC1_Init+0xb0>)
 800079c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_ADC1_Init+0xb0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_ADC1_Init+0xb0>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ae:	481c      	ldr	r0, [pc, #112]	; (8000820 <MX_ADC1_Init+0xb0>)
 80007b0:	f000 fe14 	bl	80013dc <HAL_ADC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80007ba:	f000 fae5 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007c6:	2307      	movs	r3, #7
 80007c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_ADC1_Init+0xb0>)
 80007d0:	f000 ffd6 	bl	8001780 <HAL_ADC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 fad5 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007de:	2301      	movs	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <MX_ADC1_Init+0xb0>)
 80007ec:	f000 ffc8 	bl	8001780 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007f6:	f000 fac7 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007fe:	2303      	movs	r3, #3
 8000800:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <MX_ADC1_Init+0xb0>)
 8000808:	f000 ffba 	bl	8001780 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000812:	f000 fab9 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000090 	.word	0x20000090
 8000824:	40012400 	.word	0x40012400

08000828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x50>)
 800082e:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_I2C1_Init+0x54>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C1_Init+0x50>)
 8000834:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_I2C1_Init+0x58>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_I2C1_Init+0x50>)
 8000846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800084a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_I2C1_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_I2C1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_I2C1_Init+0x50>)
 8000866:	f001 fe35 	bl	80024d4 <HAL_I2C_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000870:	f000 fa8a 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000104 	.word	0x20000104
 800087c:	40005400 	.word	0x40005400
 8000880:	000186a0 	.word	0x000186a0

08000884 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	; 0x38
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008be:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80008c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b28      	ldr	r3, [pc, #160]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80008d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008de:	4822      	ldr	r0, [pc, #136]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008e0:	f002 ff12 	bl	8003708 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008ea:	f000 fa4d 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481b      	ldr	r0, [pc, #108]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008fc:	f003 fbfe 	bl	80040fc <HAL_TIM_ConfigClockSource>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000906:	f000 fa3f 	bl	8000d88 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800090a:	4817      	ldr	r0, [pc, #92]	; (8000968 <MX_TIM2_Init+0xe4>)
 800090c:	f002 ff9e 	bl	800384c <HAL_TIM_OC_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000916:	f000 fa37 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	4619      	mov	r1, r3
 8000928:	480f      	ldr	r0, [pc, #60]	; (8000968 <MX_TIM2_Init+0xe4>)
 800092a:	f003 ff6b 	bl	8004804 <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000934:	f000 fa28 	bl	8000d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000-1;
 800093c:	f242 730f 	movw	r3, #9999	; 0x270f
 8000940:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_TIM2_Init+0xe4>)
 8000952:	f003 fabd 	bl	8003ed0 <HAL_TIM_OC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800095c:	f000 fa14 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3738      	adds	r7, #56	; 0x38
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000158 	.word	0x20000158

0800096c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08e      	sub	sp, #56	; 0x38
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]
 800099a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800099c:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <MX_TIM3_Init+0xfc>)
 800099e:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <MX_TIM3_Init+0x100>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <MX_TIM3_Init+0xfc>)
 80009a4:	223f      	movs	r2, #63	; 0x3f
 80009a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <MX_TIM3_Init+0xfc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <MX_TIM3_Init+0xfc>)
 80009b0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80009b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <MX_TIM3_Init+0xfc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_TIM3_Init+0xfc>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009c2:	4829      	ldr	r0, [pc, #164]	; (8000a68 <MX_TIM3_Init+0xfc>)
 80009c4:	f002 fea0 	bl	8003708 <HAL_TIM_Base_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009ce:	f000 f9db 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009dc:	4619      	mov	r1, r3
 80009de:	4822      	ldr	r0, [pc, #136]	; (8000a68 <MX_TIM3_Init+0xfc>)
 80009e0:	f003 fb8c 	bl	80040fc <HAL_TIM_ConfigClockSource>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009ea:	f000 f9cd 	bl	8000d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ee:	481e      	ldr	r0, [pc, #120]	; (8000a68 <MX_TIM3_Init+0xfc>)
 80009f0:	f003 f86c 	bl	8003acc <HAL_TIM_PWM_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009fa:	f000 f9c5 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4816      	ldr	r0, [pc, #88]	; (8000a68 <MX_TIM3_Init+0xfc>)
 8000a0e:	f003 fef9 	bl	8004804 <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a18:	f000 f9b6 	bl	8000d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1c:	2360      	movs	r3, #96	; 0x60
 8000a1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000-1;
 8000a20:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000a24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_TIM3_Init+0xfc>)
 8000a36:	f003 faa3 	bl	8003f80 <HAL_TIM_PWM_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a40:	f000 f9a2 	bl	8000d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2204      	movs	r2, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <MX_TIM3_Init+0xfc>)
 8000a4c:	f003 fa98 	bl	8003f80 <HAL_TIM_PWM_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000a56:	f000 f997 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <MX_TIM3_Init+0xfc>)
 8000a5c:	f000 faaa 	bl	8000fb4 <HAL_TIM_MspPostInit>

}
 8000a60:	bf00      	nop
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200001a0 	.word	0x200001a0
 8000a6c:	40000400 	.word	0x40000400

08000a70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_USART2_UART_Init+0x50>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_USART2_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f003 ff1c 	bl	80048e4 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ab2:	f000 f969 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200001e8 	.word	0x200001e8
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_DMA_Init+0x38>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <MX_DMA_Init+0x38>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_DMA_Init+0x38>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	200b      	movs	r0, #11
 8000ae8:	f001 f91b 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aec:	200b      	movs	r0, #11
 8000aee:	f001 f934 	bl	8001d5a <HAL_NVIC_EnableIRQ>

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b14:	4b4c      	ldr	r3, [pc, #304]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a4b      	ldr	r2, [pc, #300]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b49      	ldr	r3, [pc, #292]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0310 	and.w	r3, r3, #16
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2c:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a45      	ldr	r2, [pc, #276]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b32:	f043 0320 	orr.w	r3, r3, #32
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b43      	ldr	r3, [pc, #268]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0320 	and.w	r3, r3, #32
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a3f      	ldr	r2, [pc, #252]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b3d      	ldr	r3, [pc, #244]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a39      	ldr	r2, [pc, #228]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2120      	movs	r1, #32
 8000b78:	4834      	ldr	r0, [pc, #208]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b7a:	f001 fc7b 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b84:	4832      	ldr	r0, [pc, #200]	; (8000c50 <MX_GPIO_Init+0x150>)
 8000b86:	f001 fc75 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_GPIO_Init+0x154>)
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	482c      	ldr	r0, [pc, #176]	; (8000c50 <MX_GPIO_Init+0x150>)
 8000ba0:	f001 fae4 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4824      	ldr	r0, [pc, #144]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000bbc:	f001 fad6 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	481d      	ldr	r0, [pc, #116]	; (8000c50 <MX_GPIO_Init+0x150>)
 8000bda:	f001 fac7 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : sw1_Pin */
  GPIO_InitStruct.Pin = sw1_Pin;
 8000bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_GPIO_Init+0x154>)
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(sw1_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4816      	ldr	r0, [pc, #88]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000bf4:	f001 faba 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : reset_Pin */
  GPIO_InitStruct.Pin = reset_Pin;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_GPIO_Init+0x154>)
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(reset_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4813      	ldr	r0, [pc, #76]	; (8000c58 <MX_GPIO_Init+0x158>)
 8000c0c:	f001 faae 	bl	800216c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	200a      	movs	r0, #10
 8000c16:	f001 f884 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f001 f89d 	bl	8001d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2017      	movs	r0, #23
 8000c26:	f001 f87c 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c2a:	2017      	movs	r0, #23
 8000c2c:	f001 f895 	bl	8001d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2028      	movs	r0, #40	; 0x28
 8000c36:	f001 f874 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c3a:	2028      	movs	r0, #40	; 0x28
 8000c3c:	f001 f88d 	bl	8001d5a <HAL_NVIC_EnableIRQ>

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	40011000 	.word	0x40011000
 8000c54:	10110000 	.word	0x10110000
 8000c58:	40010c00 	.word	0x40010c00

08000c5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == sw1_Pin)
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c6c:	d105      	bne.n	8000c7a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		flag_sw1 = 1;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_GPIO_EXTI_Callback+0x50>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
		sec = 15;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c76:	220f      	movs	r2, #15
 8000c78:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == reset_Pin)
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d110      	bne.n	8000ca2 <HAL_GPIO_EXTI_Callback+0x46>
	{
		flag_sw1 = 0;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_GPIO_EXTI_Callback+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
		sec = 15;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c88:	220f      	movs	r2, #15
 8000c8a:	701a      	strb	r2, [r3, #0]
		//------------ servo
		servoReady();
 8000c8c:	f7ff fb4a 	bl	8000324 <servoReady>
		//------------------

		//------------- burzzer
		Explosion_1 = 0;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
		Is_1 = 0;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
		Art_1 = 0;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <HAL_GPIO_EXTI_Callback+0x60>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
		//------------------
	}

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000244 	.word	0x20000244
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000254 	.word	0x20000254
 8000cb8:	20000258 	.word	0x20000258
 8000cbc:	2000025c 	.word	0x2000025c

08000cc0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	lcd_put_cur(0, 0);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fa9e 	bl	800020c <lcd_put_cur>
	lcd_send_string("STATUS:");
 8000cd0:	4819      	ldr	r0, [pc, #100]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cd2:	f7ff faf7 	bl	80002c4 <lcd_send_string>
	lcd_put_cur(0, 7);
 8000cd6:	2107      	movs	r1, #7
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff fa97 	bl	800020c <lcd_put_cur>
	lcd_send_string("READY....");
 8000cde:	4817      	ldr	r0, [pc, #92]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ce0:	f7ff faf0 	bl	80002c4 <lcd_send_string>

	if(flag_sw1 == 1)
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d121      	bne.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		if(sec > 0)
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00d      	beq.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			sec--;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cfe:	701a      	strb	r2, [r3, #0]
			lcd_put_cur(0, 7);
 8000d00:	2107      	movs	r1, #7
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fa82 	bl	800020c <lcd_put_cur>
			lcd_send_string("COUNTDOWN");
 8000d08:	480f      	ldr	r0, [pc, #60]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d0a:	f7ff fadb 	bl	80002c4 <lcd_send_string>
			//------------ servo
			servoBoom();
			//------------------
		}
	}
}
 8000d0e:	e00f      	b.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x70>
		else if (sec ==0)
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10b      	bne.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x70>
			lcd_put_cur(0, 7);
 8000d18:	2107      	movs	r1, #7
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fa76 	bl	800020c <lcd_put_cur>
			lcd_send_string("!!BOOOM!!");
 8000d20:	480a      	ldr	r0, [pc, #40]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d22:	f7ff facf 	bl	80002c4 <lcd_send_string>
			sec = 0;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
			servoBoom();
 8000d2c:	f7ff fb0c 	bl	8000348 <servoBoom>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	08005fe0 	.word	0x08005fe0
 8000d3c:	08005fe8 	.word	0x08005fe8
 8000d40:	20000244 	.word	0x20000244
 8000d44:	20000000 	.word	0x20000000
 8000d48:	08005ff4 	.word	0x08005ff4
 8000d4c:	08006000 	.word	0x08006000

08000d50 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
		lcd_put_cur(1,0);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff fa56 	bl	800020c <lcd_put_cur>
		sprintf(Sec,"TIME:%02d",sec);
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4906      	ldr	r1, [pc, #24]	; (8000d80 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8000d6a:	f003 ffbd 	bl	8004ce8 <siprintf>
		lcd_send_string(Sec);
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8000d70:	f7ff faa8 	bl	80002c4 <lcd_send_string>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	0800600c 	.word	0x0800600c
 8000d84:	20000248 	.word	0x20000248

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_MspInit+0x5c>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <HAL_MspInit+0x5c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_MspInit+0x5c>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_MspInit+0x5c>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_MspInit+0x5c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	61d3      	str	r3, [r2, #28]
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x5c>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_MspInit+0x60>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_MspInit+0x60>)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010000 	.word	0x40010000

08000df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <HAL_ADC_MspInit+0xbc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d149      	bne.n	8000eac <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000e48:	2313      	movs	r3, #19
 8000e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	4819      	ldr	r0, [pc, #100]	; (8000ebc <HAL_ADC_MspInit+0xc4>)
 8000e58:	f001 f988 	bl	800216c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e5e:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <HAL_ADC_MspInit+0xcc>)
 8000e60:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e82:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e86:	2220      	movs	r2, #32
 8000e88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e92:	f000 ff7d 	bl	8001d90 <HAL_DMA_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e9c:	f7ff ff74 	bl	8000d88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000ea4:	621a      	str	r2, [r3, #32]
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40012400 	.word	0x40012400
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	200000c0 	.word	0x200000c0
 8000ec4:	40020008 	.word	0x40020008

08000ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <HAL_I2C_MspInit+0x70>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d123      	bne.n	8000f30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_I2C_MspInit+0x74>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <HAL_I2C_MspInit+0x74>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_I2C_MspInit+0x74>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f00:	23c0      	movs	r3, #192	; 0xc0
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f04:	2312      	movs	r3, #18
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <HAL_I2C_MspInit+0x78>)
 8000f14:	f001 f92a 	bl	800216c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_I2C_MspInit+0x74>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_I2C_MspInit+0x74>)
 8000f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f22:	61d3      	str	r3, [r2, #28]
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_I2C_MspInit+0x74>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010c00 	.word	0x40010c00

08000f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f54:	d114      	bne.n	8000f80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	201c      	movs	r0, #28
 8000f74:	f000 fed5 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f78:	201c      	movs	r0, #28
 8000f7a:	f000 feee 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f7e:	e010      	b.n	8000fa2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_TIM_Base_MspInit+0x6c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10b      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_TIM_Base_MspInit+0x68>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40000400 	.word	0x40000400

08000fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_TIM_MspPostInit+0x58>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d117      	bne.n	8001004 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_TIM_MspPostInit+0x5c>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <HAL_TIM_MspPostInit+0x5c>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_TIM_MspPostInit+0x5c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fec:	23c0      	movs	r3, #192	; 0xc0
 8000fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_TIM_MspPostInit+0x60>)
 8001000:	f001 f8b4 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40000400 	.word	0x40000400
 8001010:	40021000 	.word	0x40021000
 8001014:	40010800 	.word	0x40010800

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a15      	ldr	r2, [pc, #84]	; (8001088 <HAL_UART_MspInit+0x70>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d123      	bne.n	8001080 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_UART_MspInit+0x74>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <HAL_UART_MspInit+0x74>)
 800103e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001042:	61d3      	str	r3, [r2, #28]
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_UART_MspInit+0x74>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_UART_MspInit+0x74>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_UART_MspInit+0x74>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_UART_MspInit+0x74>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001068:	230c      	movs	r3, #12
 800106a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2302      	movs	r3, #2
 8001072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_UART_MspInit+0x78>)
 800107c:	f001 f876 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40004400 	.word	0x40004400
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010da:	f000 f93f 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(reset_Pin);
 80010e6:	2010      	movs	r0, #16
 80010e8:	f001 f9dc 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <DMA1_Channel1_IRQHandler+0x10>)
 80010f6:	f000 ff05 	bl	8001f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000c0 	.word	0x200000c0

08001104 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sw1_Pin);
 8001108:	f44f 7080 	mov.w	r0, #256	; 0x100
 800110c:	f001 f9ca 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <TIM2_IRQHandler+0x10>)
 800111a:	f002 fdd1 	bl	8003cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000158 	.word	0x20000158

08001128 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800112c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001130:	f001 f9b8 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e00a      	b.n	8001160 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800114a:	f3af 8000 	nop.w
 800114e:	4601      	mov	r1, r0
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	b2ca      	uxtb	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf0      	blt.n	800114a <_read+0x12>
	}

return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e009      	b.n	8001198 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	60ba      	str	r2, [r7, #8]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fa09 	bl	80005a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbf1      	blt.n	8001184 <_write+0x12>
	}
	return len;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_close>:

int _close(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	return -1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d0:	605a      	str	r2, [r3, #4]
	return 0;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <_isatty>:

int _isatty(int file)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	return 1;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b085      	sub	sp, #20
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
	return 0;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
	...

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f003 fd0a 	bl	8004c54 <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20005000 	.word	0x20005000
 800126c:	00000400 	.word	0x00000400
 8001270:	20000260 	.word	0x20000260
 8001274:	20000278 	.word	0x20000278

08001278 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800129c:	4c0a      	ldr	r4, [pc, #40]	; (80012c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012aa:	f7ff ffe5 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f003 fcd7 	bl	8004c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b2:	f7ff f989 	bl	80005c8 <main>
  bx lr
 80012b6:	4770      	bx	lr
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012c0:	080060e0 	.word	0x080060e0
  ldr r2, =_sbss
 80012c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012c8:	20000278 	.word	0x20000278

080012cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC1_2_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_Init+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_Init+0x28>)
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 fd13 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 f808 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fd52 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fd2b 	bl	8001d76 <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 fcf3 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000004 	.word	0x20000004
 8001354:	2000000c 	.word	0x2000000c
 8001358:	20000008 	.word	0x20000008

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_IncTick+0x20>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	2000000c 	.word	0x2000000c
 800137c:	20000264 	.word	0x20000264

08001380 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000264 	.word	0x20000264

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fff0 	bl	8001380 <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffe0 	bl	8001380 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000000c 	.word	0x2000000c

080013dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0be      	b.n	800157c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	d109      	bne.n	8001420 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fcec 	bl	8000df8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 faff 	bl	8001a24 <ADC_ConversionStop_Disable>
 8001426:	4603      	mov	r3, r0
 8001428:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 8099 	bne.w	800156a <HAL_ADC_Init+0x18e>
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 8095 	bne.w	800156a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001448:	f023 0302 	bic.w	r3, r3, #2
 800144c:	f043 0202 	orr.w	r2, r3, #2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800145c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7b1b      	ldrb	r3, [r3, #12]
 8001462:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001464:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	4313      	orrs	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001474:	d003      	beq.n	800147e <HAL_ADC_Init+0xa2>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d102      	bne.n	8001484 <HAL_ADC_Init+0xa8>
 800147e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001482:	e000      	b.n	8001486 <HAL_ADC_Init+0xaa>
 8001484:	2300      	movs	r3, #0
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7d1b      	ldrb	r3, [r3, #20]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d119      	bne.n	80014c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7b1b      	ldrb	r3, [r3, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d109      	bne.n	80014b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	035a      	lsls	r2, r3, #13
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	e00b      	b.n	80014c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	f043 0220 	orr.w	r2, r3, #32
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	430a      	orrs	r2, r1
 80014da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_ADC_Init+0x1a8>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f8:	d003      	beq.n	8001502 <HAL_ADC_Init+0x126>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d104      	bne.n	800150c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	3b01      	subs	r3, #1
 8001508:	051b      	lsls	r3, r3, #20
 800150a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	430a      	orrs	r2, r1
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_ADC_Init+0x1ac>)
 8001528:	4013      	ands	r3, r2
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d10b      	bne.n	8001548 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f023 0303 	bic.w	r3, r3, #3
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001546:	e018      	b.n	800157a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	f023 0312 	bic.w	r3, r3, #18
 8001550:	f043 0210 	orr.w	r2, r3, #16
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	f043 0201 	orr.w	r2, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001568:	e007      	b.n	800157a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	f043 0210 	orr.w	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800157a:	7dfb      	ldrb	r3, [r7, #23]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	ffe1f7fd 	.word	0xffe1f7fd
 8001588:	ff1f0efe 	.word	0xff1f0efe

0800158c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a64      	ldr	r2, [pc, #400]	; (8001734 <HAL_ADC_Start_DMA+0x1a8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d004      	beq.n	80015b0 <HAL_ADC_Start_DMA+0x24>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_ADC_Start_DMA+0x1ac>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d106      	bne.n	80015be <HAL_ADC_Start_DMA+0x32>
 80015b0:	4b60      	ldr	r3, [pc, #384]	; (8001734 <HAL_ADC_Start_DMA+0x1a8>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 80b3 	bne.w	8001724 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_ADC_Start_DMA+0x40>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e0ae      	b.n	800172a <HAL_ADC_Start_DMA+0x19e>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f9cb 	bl	8001970 <ADC_Enable>
 80015da:	4603      	mov	r3, r0
 80015dc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 809a 	bne.w	800171a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a4e      	ldr	r2, [pc, #312]	; (8001738 <HAL_ADC_Start_DMA+0x1ac>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d105      	bne.n	8001610 <HAL_ADC_Start_DMA+0x84>
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_ADC_Start_DMA+0x1a8>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d115      	bne.n	800163c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001626:	2b00      	cmp	r3, #0
 8001628:	d026      	beq.n	8001678 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001632:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800163a:	e01d      	b.n	8001678 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a39      	ldr	r2, [pc, #228]	; (8001734 <HAL_ADC_Start_DMA+0x1a8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d004      	beq.n	800165c <HAL_ADC_Start_DMA+0xd0>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a38      	ldr	r2, [pc, #224]	; (8001738 <HAL_ADC_Start_DMA+0x1ac>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d10d      	bne.n	8001678 <HAL_ADC_Start_DMA+0xec>
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <HAL_ADC_Start_DMA+0x1a8>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001670:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	f023 0206 	bic.w	r2, r3, #6
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001690:	e002      	b.n	8001698 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a25      	ldr	r2, [pc, #148]	; (800173c <HAL_ADC_Start_DMA+0x1b0>)
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a24      	ldr	r2, [pc, #144]	; (8001740 <HAL_ADC_Start_DMA+0x1b4>)
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a23      	ldr	r2, [pc, #140]	; (8001744 <HAL_ADC_Start_DMA+0x1b8>)
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0202 	mvn.w	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016d0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a18      	ldr	r0, [r3, #32]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	334c      	adds	r3, #76	; 0x4c
 80016dc:	4619      	mov	r1, r3
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f000 fbaf 	bl	8001e44 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016f0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016f4:	d108      	bne.n	8001708 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001704:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001706:	e00f      	b.n	8001728 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001716:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001718:	e006      	b.n	8001728 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001722:	e001      	b.n	8001728 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001728:	7dfb      	ldrb	r3, [r7, #23]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40012400 	.word	0x40012400
 8001738:	40012800 	.word	0x40012800
 800173c:	08001aa7 	.word	0x08001aa7
 8001740:	08001b23 	.word	0x08001b23
 8001744:	08001b3f 	.word	0x08001b3f

08001748 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
	...

08001780 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x20>
 800179c:	2302      	movs	r3, #2
 800179e:	e0dc      	b.n	800195a <HAL_ADC_ConfigChannel+0x1da>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b06      	cmp	r3, #6
 80017ae:	d81c      	bhi.n	80017ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	3b05      	subs	r3, #5
 80017c2:	221f      	movs	r2, #31
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4019      	ands	r1, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	3b05      	subs	r3, #5
 80017dc:	fa00 f203 	lsl.w	r2, r0, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34
 80017e8:	e03c      	b.n	8001864 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d81c      	bhi.n	800182c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3b23      	subs	r3, #35	; 0x23
 8001804:	221f      	movs	r2, #31
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	4019      	ands	r1, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	3b23      	subs	r3, #35	; 0x23
 800181e:	fa00 f203 	lsl.w	r2, r0, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
 800182a:	e01b      	b.n	8001864 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	3b41      	subs	r3, #65	; 0x41
 800183e:	221f      	movs	r2, #31
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4019      	ands	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	3b41      	subs	r3, #65	; 0x41
 8001858:	fa00 f203 	lsl.w	r2, r0, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b09      	cmp	r3, #9
 800186a:	d91c      	bls.n	80018a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68d9      	ldr	r1, [r3, #12]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	3b1e      	subs	r3, #30
 800187e:	2207      	movs	r2, #7
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	4019      	ands	r1, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6898      	ldr	r0, [r3, #8]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	3b1e      	subs	r3, #30
 8001898:	fa00 f203 	lsl.w	r2, r0, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	e019      	b.n	80018da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6919      	ldr	r1, [r3, #16]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	2207      	movs	r2, #7
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	4019      	ands	r1, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6898      	ldr	r0, [r3, #8]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	fa00 f203 	lsl.w	r2, r0, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d003      	beq.n	80018ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018e6:	2b11      	cmp	r3, #17
 80018e8:	d132      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <HAL_ADC_ConfigChannel+0x1e4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d125      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d126      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001910:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d11a      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_ADC_ConfigChannel+0x1e8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <HAL_ADC_ConfigChannel+0x1ec>)
 8001920:	fba2 2303 	umull	r2, r3, r2, r3
 8001924:	0c9a      	lsrs	r2, r3, #18
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001930:	e002      	b.n	8001938 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	3b01      	subs	r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f9      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x1b2>
 800193e:	e007      	b.n	8001950 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	f043 0220 	orr.w	r2, r3, #32
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40012400 	.word	0x40012400
 8001968:	20000004 	.word	0x20000004
 800196c:	431bde83 	.word	0x431bde83

08001970 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b01      	cmp	r3, #1
 800198c:	d040      	beq.n	8001a10 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0201 	orr.w	r2, r2, #1
 800199c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <ADC_Enable+0xac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <ADC_Enable+0xb0>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	0c9b      	lsrs	r3, r3, #18
 80019aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019ac:	e002      	b.n	80019b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f9      	bne.n	80019ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019ba:	f7ff fce1 	bl	8001380 <HAL_GetTick>
 80019be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019c0:	e01f      	b.n	8001a02 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019c2:	f7ff fcdd 	bl	8001380 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d918      	bls.n	8001a02 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d011      	beq.n	8001a02 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	f043 0210 	orr.w	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e007      	b.n	8001a12 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d1d8      	bne.n	80019c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	431bde83 	.word	0x431bde83

08001a24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d12e      	bne.n	8001a9c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a4e:	f7ff fc97 	bl	8001380 <HAL_GetTick>
 8001a52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a54:	e01b      	b.n	8001a8e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a56:	f7ff fc93 	bl	8001380 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d914      	bls.n	8001a8e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d10d      	bne.n	8001a8e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f043 0210 	orr.w	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	f043 0201 	orr.w	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e007      	b.n	8001a9e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d0dc      	beq.n	8001a56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d127      	bne.n	8001b10 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ad6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ada:	d115      	bne.n	8001b08 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d111      	bne.n	8001b08 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f7ff fe1d 	bl	8001748 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b0e:	e004      	b.n	8001b1a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff fe12 	bl	800175a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f043 0204 	orr.w	r2, r3, #4
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff fe01 	bl	800176c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4906      	ldr	r1, [pc, #24]	; (8001c0c <__NVIC_EnableIRQ+0x34>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff90 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff2d 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff42 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff90 	bl	8001c64 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5f 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff35 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e043      	b.n	8001e2e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_DMA_Init+0xa8>)
 8001dae:	4413      	add	r3, r2
 8001db0:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <HAL_DMA_Init+0xac>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	009a      	lsls	r2, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_DMA_Init+0xb0>)
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001dda:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001dde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	bffdfff8 	.word	0xbffdfff8
 8001e3c:	cccccccd 	.word	0xcccccccd
 8001e40:	40020000 	.word	0x40020000

08001e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Start_IT+0x20>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e04a      	b.n	8001efa <HAL_DMA_Start_IT+0xb6>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d13a      	bne.n	8001eec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f938 	bl	8002110 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 020e 	orr.w	r2, r2, #14
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e00f      	b.n	8001eda <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0204 	bic.w	r2, r2, #4
 8001ec8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 020a 	orr.w	r2, r2, #10
 8001ed8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e005      	b.n	8001ef8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	2204      	movs	r2, #4
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d04f      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xc8>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d04a      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0204 	bic.w	r2, r2, #4
 8001f52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a66      	ldr	r2, [pc, #408]	; (80020f4 <HAL_DMA_IRQHandler+0x1f0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d029      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xae>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_DMA_IRQHandler+0x1f4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d022      	beq.n	8001fae <HAL_DMA_IRQHandler+0xaa>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a63      	ldr	r2, [pc, #396]	; (80020fc <HAL_DMA_IRQHandler+0x1f8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01a      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0xa4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a62      	ldr	r2, [pc, #392]	; (8002100 <HAL_DMA_IRQHandler+0x1fc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d012      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x9e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a60      	ldr	r2, [pc, #384]	; (8002104 <HAL_DMA_IRQHandler+0x200>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00a      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x98>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a5f      	ldr	r2, [pc, #380]	; (8002108 <HAL_DMA_IRQHandler+0x204>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d102      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x92>
 8001f90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f94:	e00e      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001f96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f9a:	e00b      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001f9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fa0:	e008      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001fa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa6:	e005      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fac:	e002      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001fae:	2340      	movs	r3, #64	; 0x40
 8001fb0:	e000      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	4a55      	ldr	r2, [pc, #340]	; (800210c <HAL_DMA_IRQHandler+0x208>)
 8001fb6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8094 	beq.w	80020ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fca:	e08e      	b.n	80020ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d056      	beq.n	800208a <HAL_DMA_IRQHandler+0x186>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d051      	beq.n	800208a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10b      	bne.n	800200c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 020a 	bic.w	r2, r2, #10
 8002002:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a38      	ldr	r2, [pc, #224]	; (80020f4 <HAL_DMA_IRQHandler+0x1f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d029      	beq.n	800206a <HAL_DMA_IRQHandler+0x166>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a37      	ldr	r2, [pc, #220]	; (80020f8 <HAL_DMA_IRQHandler+0x1f4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMA_IRQHandler+0x162>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a35      	ldr	r2, [pc, #212]	; (80020fc <HAL_DMA_IRQHandler+0x1f8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01a      	beq.n	8002060 <HAL_DMA_IRQHandler+0x15c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_DMA_IRQHandler+0x1fc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d012      	beq.n	800205a <HAL_DMA_IRQHandler+0x156>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a32      	ldr	r2, [pc, #200]	; (8002104 <HAL_DMA_IRQHandler+0x200>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00a      	beq.n	8002054 <HAL_DMA_IRQHandler+0x150>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a31      	ldr	r2, [pc, #196]	; (8002108 <HAL_DMA_IRQHandler+0x204>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d102      	bne.n	800204e <HAL_DMA_IRQHandler+0x14a>
 8002048:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800204c:	e00e      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 800204e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002052:	e00b      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 8002054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002058:	e008      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 800205a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205e:	e005      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 8002060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002064:	e002      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 8002066:	2320      	movs	r3, #32
 8002068:	e000      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 800206a:	2302      	movs	r3, #2
 800206c:	4a27      	ldr	r2, [pc, #156]	; (800210c <HAL_DMA_IRQHandler+0x208>)
 800206e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	d034      	beq.n	80020ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002088:	e02f      	b.n	80020ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	2208      	movs	r2, #8
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d028      	beq.n	80020ec <HAL_DMA_IRQHandler+0x1e8>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d023      	beq.n	80020ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 020e 	bic.w	r2, r2, #14
 80020b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	2101      	movs	r1, #1
 80020be:	fa01 f202 	lsl.w	r2, r1, r2
 80020c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d004      	beq.n	80020ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
    }
  }
  return;
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
}
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40020008 	.word	0x40020008
 80020f8:	4002001c 	.word	0x4002001c
 80020fc:	40020030 	.word	0x40020030
 8002100:	40020044 	.word	0x40020044
 8002104:	40020058 	.word	0x40020058
 8002108:	4002006c 	.word	0x4002006c
 800210c:	40020000 	.word	0x40020000

08002110 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b10      	cmp	r3, #16
 800213c:	d108      	bne.n	8002150 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800214e:	e007      	b.n	8002160 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
	...

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b08b      	sub	sp, #44	; 0x2c
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217e:	e169      	b.n	8002454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002180:	2201      	movs	r2, #1
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 8158 	bne.w	800244e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a9a      	ldr	r2, [pc, #616]	; (800240c <HAL_GPIO_Init+0x2a0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d05e      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021a8:	4a98      	ldr	r2, [pc, #608]	; (800240c <HAL_GPIO_Init+0x2a0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d875      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021ae:	4a98      	ldr	r2, [pc, #608]	; (8002410 <HAL_GPIO_Init+0x2a4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d058      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021b4:	4a96      	ldr	r2, [pc, #600]	; (8002410 <HAL_GPIO_Init+0x2a4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d86f      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021ba:	4a96      	ldr	r2, [pc, #600]	; (8002414 <HAL_GPIO_Init+0x2a8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d052      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021c0:	4a94      	ldr	r2, [pc, #592]	; (8002414 <HAL_GPIO_Init+0x2a8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d869      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021c6:	4a94      	ldr	r2, [pc, #592]	; (8002418 <HAL_GPIO_Init+0x2ac>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d04c      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021cc:	4a92      	ldr	r2, [pc, #584]	; (8002418 <HAL_GPIO_Init+0x2ac>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d863      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021d2:	4a92      	ldr	r2, [pc, #584]	; (800241c <HAL_GPIO_Init+0x2b0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d046      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021d8:	4a90      	ldr	r2, [pc, #576]	; (800241c <HAL_GPIO_Init+0x2b0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d85d      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021de:	2b12      	cmp	r3, #18
 80021e0:	d82a      	bhi.n	8002238 <HAL_GPIO_Init+0xcc>
 80021e2:	2b12      	cmp	r3, #18
 80021e4:	d859      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <HAL_GPIO_Init+0x80>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	08002267 	.word	0x08002267
 80021f0:	08002241 	.word	0x08002241
 80021f4:	08002253 	.word	0x08002253
 80021f8:	08002295 	.word	0x08002295
 80021fc:	0800229b 	.word	0x0800229b
 8002200:	0800229b 	.word	0x0800229b
 8002204:	0800229b 	.word	0x0800229b
 8002208:	0800229b 	.word	0x0800229b
 800220c:	0800229b 	.word	0x0800229b
 8002210:	0800229b 	.word	0x0800229b
 8002214:	0800229b 	.word	0x0800229b
 8002218:	0800229b 	.word	0x0800229b
 800221c:	0800229b 	.word	0x0800229b
 8002220:	0800229b 	.word	0x0800229b
 8002224:	0800229b 	.word	0x0800229b
 8002228:	0800229b 	.word	0x0800229b
 800222c:	0800229b 	.word	0x0800229b
 8002230:	08002249 	.word	0x08002249
 8002234:	0800225d 	.word	0x0800225d
 8002238:	4a79      	ldr	r2, [pc, #484]	; (8002420 <HAL_GPIO_Init+0x2b4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800223e:	e02c      	b.n	800229a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	623b      	str	r3, [r7, #32]
          break;
 8002246:	e029      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	3304      	adds	r3, #4
 800224e:	623b      	str	r3, [r7, #32]
          break;
 8002250:	e024      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	3308      	adds	r3, #8
 8002258:	623b      	str	r3, [r7, #32]
          break;
 800225a:	e01f      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	330c      	adds	r3, #12
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e01a      	b.n	800229c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800226e:	2304      	movs	r3, #4
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e013      	b.n	800229c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800227c:	2308      	movs	r3, #8
 800227e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	611a      	str	r2, [r3, #16]
          break;
 8002286:	e009      	b.n	800229c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002288:	2308      	movs	r3, #8
 800228a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	615a      	str	r2, [r3, #20]
          break;
 8002292:	e003      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
          break;
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x130>
          break;
 800229a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2bff      	cmp	r3, #255	; 0xff
 80022a0:	d801      	bhi.n	80022a6 <HAL_GPIO_Init+0x13a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	e001      	b.n	80022aa <HAL_GPIO_Init+0x13e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d802      	bhi.n	80022b8 <HAL_GPIO_Init+0x14c>
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	e002      	b.n	80022be <HAL_GPIO_Init+0x152>
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	3b08      	subs	r3, #8
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	210f      	movs	r1, #15
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	401a      	ands	r2, r3
 80022d0:	6a39      	ldr	r1, [r7, #32]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	431a      	orrs	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80b1 	beq.w	800244e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022ec:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <HAL_GPIO_Init+0x2b8>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <HAL_GPIO_Init+0x2b8>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6193      	str	r3, [r2, #24]
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <HAL_GPIO_Init+0x2b8>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002304:	4a48      	ldr	r2, [pc, #288]	; (8002428 <HAL_GPIO_Init+0x2bc>)
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a40      	ldr	r2, [pc, #256]	; (800242c <HAL_GPIO_Init+0x2c0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_GPIO_Init+0x1ec>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a3f      	ldr	r2, [pc, #252]	; (8002430 <HAL_GPIO_Init+0x2c4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00d      	beq.n	8002354 <HAL_GPIO_Init+0x1e8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3e      	ldr	r2, [pc, #248]	; (8002434 <HAL_GPIO_Init+0x2c8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <HAL_GPIO_Init+0x1e4>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3d      	ldr	r2, [pc, #244]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_GPIO_Init+0x1e0>
 8002348:	2303      	movs	r3, #3
 800234a:	e006      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 800234c:	2304      	movs	r3, #4
 800234e:	e004      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 8002350:	2302      	movs	r3, #2
 8002352:	e002      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 8002358:	2300      	movs	r3, #0
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	f002 0203 	and.w	r2, r2, #3
 8002360:	0092      	lsls	r2, r2, #2
 8002362:	4093      	lsls	r3, r2
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800236a:	492f      	ldr	r1, [pc, #188]	; (8002428 <HAL_GPIO_Init+0x2bc>)
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_GPIO_Init+0x2d0>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	492c      	ldr	r1, [pc, #176]	; (800243c <HAL_GPIO_Init+0x2d0>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <HAL_GPIO_Init+0x2d0>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	43db      	mvns	r3, r3
 800239a:	4928      	ldr	r1, [pc, #160]	; (800243c <HAL_GPIO_Init+0x2d0>)
 800239c:	4013      	ands	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023ac:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	491e      	ldr	r1, [pc, #120]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4918      	ldr	r1, [pc, #96]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	4914      	ldr	r1, [pc, #80]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d021      	beq.n	8002440 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_GPIO_Init+0x2d0>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
 8002408:	e021      	b.n	800244e <HAL_GPIO_Init+0x2e2>
 800240a:	bf00      	nop
 800240c:	10320000 	.word	0x10320000
 8002410:	10310000 	.word	0x10310000
 8002414:	10220000 	.word	0x10220000
 8002418:	10210000 	.word	0x10210000
 800241c:	10120000 	.word	0x10120000
 8002420:	10110000 	.word	0x10110000
 8002424:	40021000 	.word	0x40021000
 8002428:	40010000 	.word	0x40010000
 800242c:	40010800 	.word	0x40010800
 8002430:	40010c00 	.word	0x40010c00
 8002434:	40011000 	.word	0x40011000
 8002438:	40011400 	.word	0x40011400
 800243c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	43db      	mvns	r3, r3
 8002448:	4909      	ldr	r1, [pc, #36]	; (8002470 <HAL_GPIO_Init+0x304>)
 800244a:	4013      	ands	r3, r2
 800244c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	3301      	adds	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	f47f ae8e 	bne.w	8002180 <HAL_GPIO_Init+0x14>
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	372c      	adds	r7, #44	; 0x2c
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	611a      	str	r2, [r3, #16]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fbca 	bl	8000c5c <HAL_GPIO_EXTI_Callback>
  }
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40010400 	.word	0x40010400

080024d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e12b      	b.n	800273e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fce4 	bl	8000ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2224      	movs	r2, #36	; 0x24
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002538:	f000 ffea 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 800253c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4a81      	ldr	r2, [pc, #516]	; (8002748 <HAL_I2C_Init+0x274>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d807      	bhi.n	8002558 <HAL_I2C_Init+0x84>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a80      	ldr	r2, [pc, #512]	; (800274c <HAL_I2C_Init+0x278>)
 800254c:	4293      	cmp	r3, r2
 800254e:	bf94      	ite	ls
 8002550:	2301      	movls	r3, #1
 8002552:	2300      	movhi	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	e006      	b.n	8002566 <HAL_I2C_Init+0x92>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a7d      	ldr	r2, [pc, #500]	; (8002750 <HAL_I2C_Init+0x27c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	bf94      	ite	ls
 8002560:	2301      	movls	r3, #1
 8002562:	2300      	movhi	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0e7      	b.n	800273e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4a78      	ldr	r2, [pc, #480]	; (8002754 <HAL_I2C_Init+0x280>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0c9b      	lsrs	r3, r3, #18
 8002578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	430a      	orrs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a6a      	ldr	r2, [pc, #424]	; (8002748 <HAL_I2C_Init+0x274>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d802      	bhi.n	80025a8 <HAL_I2C_Init+0xd4>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	3301      	adds	r3, #1
 80025a6:	e009      	b.n	80025bc <HAL_I2C_Init+0xe8>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	4a69      	ldr	r2, [pc, #420]	; (8002758 <HAL_I2C_Init+0x284>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	3301      	adds	r3, #1
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	495c      	ldr	r1, [pc, #368]	; (8002748 <HAL_I2C_Init+0x274>)
 80025d8:	428b      	cmp	r3, r1
 80025da:	d819      	bhi.n	8002610 <HAL_I2C_Init+0x13c>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e59      	subs	r1, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ea:	1c59      	adds	r1, r3, #1
 80025ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025f0:	400b      	ands	r3, r1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_I2C_Init+0x138>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1e59      	subs	r1, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fbb1 f3f3 	udiv	r3, r1, r3
 8002604:	3301      	adds	r3, #1
 8002606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260a:	e051      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 800260c:	2304      	movs	r3, #4
 800260e:	e04f      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d111      	bne.n	800263c <HAL_I2C_Init+0x168>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1e58      	subs	r0, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	440b      	add	r3, r1
 8002626:	fbb0 f3f3 	udiv	r3, r0, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e012      	b.n	8002662 <HAL_I2C_Init+0x18e>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	0099      	lsls	r1, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Init+0x196>
 8002666:	2301      	movs	r3, #1
 8002668:	e022      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10e      	bne.n	8002690 <HAL_I2C_Init+0x1bc>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1e58      	subs	r0, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	440b      	add	r3, r1
 8002680:	fbb0 f3f3 	udiv	r3, r0, r3
 8002684:	3301      	adds	r3, #1
 8002686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268e:	e00f      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e58      	subs	r0, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	0099      	lsls	r1, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	6809      	ldr	r1, [r1, #0]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6911      	ldr	r1, [r2, #16]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68d2      	ldr	r2, [r2, #12]
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	000186a0 	.word	0x000186a0
 800274c:	001e847f 	.word	0x001e847f
 8002750:	003d08ff 	.word	0x003d08ff
 8002754:	431bde83 	.word	0x431bde83
 8002758:	10624dd3 	.word	0x10624dd3

0800275c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	461a      	mov	r2, r3
 8002768:	460b      	mov	r3, r1
 800276a:	817b      	strh	r3, [r7, #10]
 800276c:	4613      	mov	r3, r2
 800276e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7fe fe06 	bl	8001380 <HAL_GetTick>
 8002774:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b20      	cmp	r3, #32
 8002780:	f040 80e0 	bne.w	8002944 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2319      	movs	r3, #25
 800278a:	2201      	movs	r2, #1
 800278c:	4970      	ldr	r1, [pc, #448]	; (8002950 <HAL_I2C_Master_Transmit+0x1f4>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f964 	bl	8002a5c <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
 800279c:	e0d3      	b.n	8002946 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_I2C_Master_Transmit+0x50>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e0cc      	b.n	8002946 <HAL_I2C_Master_Transmit+0x1ea>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d007      	beq.n	80027d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2221      	movs	r2, #33	; 0x21
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2210      	movs	r2, #16
 80027ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	893a      	ldrh	r2, [r7, #8]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a50      	ldr	r2, [pc, #320]	; (8002954 <HAL_I2C_Master_Transmit+0x1f8>)
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002814:	8979      	ldrh	r1, [r7, #10]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	6a3a      	ldr	r2, [r7, #32]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f89c 	bl	8002958 <I2C_MasterRequestWrite>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e08d      	b.n	8002946 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002840:	e066      	b.n	8002910 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	6a39      	ldr	r1, [r7, #32]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f9de 	bl	8002c08 <I2C_WaitOnTXEFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b04      	cmp	r3, #4
 8002858:	d107      	bne.n	800286a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002868:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e06b      	b.n	8002946 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	781a      	ldrb	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d11b      	bne.n	80028e4 <HAL_I2C_Master_Transmit+0x188>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d017      	beq.n	80028e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	6a39      	ldr	r1, [r7, #32]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f9ce 	bl	8002c8a <I2C_WaitOnBTFFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00d      	beq.n	8002910 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d107      	bne.n	800290c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e01a      	b.n	8002946 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d194      	bne.n	8002842 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	00100002 	.word	0x00100002
 8002954:	ffff0000 	.word	0xffff0000

08002958 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	460b      	mov	r3, r1
 8002966:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d006      	beq.n	8002982 <I2C_MasterRequestWrite+0x2a>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d003      	beq.n	8002982 <I2C_MasterRequestWrite+0x2a>
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002980:	d108      	bne.n	8002994 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e00b      	b.n	80029ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	2b12      	cmp	r3, #18
 800299a:	d107      	bne.n	80029ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f84f 	bl	8002a5c <I2C_WaitOnFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00d      	beq.n	80029e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d2:	d103      	bne.n	80029dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e035      	b.n	8002a4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e8:	d108      	bne.n	80029fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	e01b      	b.n	8002a34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029fc:	897b      	ldrh	r3, [r7, #10]
 80029fe:	11db      	asrs	r3, r3, #7
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f003 0306 	and.w	r3, r3, #6
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f063 030f 	orn	r3, r3, #15
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <I2C_MasterRequestWrite+0xfc>)
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f875 	bl	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e010      	b.n	8002a4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <I2C_MasterRequestWrite+0x100>)
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f865 	bl	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	00010008 	.word	0x00010008
 8002a58:	00010002 	.word	0x00010002

08002a5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a6c:	e025      	b.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d021      	beq.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a76:	f7fe fc83 	bl	8001380 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d116      	bne.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e023      	b.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10d      	bne.n	8002ae0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	43da      	mvns	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	e00c      	b.n	8002afa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4013      	ands	r3, r2
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf0c      	ite	eq
 8002af2:	2301      	moveq	r3, #1
 8002af4:	2300      	movne	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d0b6      	beq.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b18:	e051      	b.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d123      	bne.n	8002b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0204 	orr.w	r2, r3, #4
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e046      	b.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d021      	beq.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7a:	f7fe fc01 	bl	8001380 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d302      	bcc.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d116      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f043 0220 	orr.w	r2, r3, #32
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e020      	b.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d10c      	bne.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bf14      	ite	ne
 8002bda:	2301      	movne	r3, #1
 8002bdc:	2300      	moveq	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	e00b      	b.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	43da      	mvns	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	4013      	ands	r3, r2
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d18d      	bne.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c14:	e02d      	b.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f878 	bl	8002d0c <I2C_IsAcknowledgeFailed>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e02d      	b.n	8002c82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d021      	beq.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7fe fba7 	bl	8001380 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d302      	bcc.n	8002c44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d116      	bne.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f043 0220 	orr.w	r2, r3, #32
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e007      	b.n	8002c82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d1ca      	bne.n	8002c16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c96:	e02d      	b.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f837 	bl	8002d0c <I2C_IsAcknowledgeFailed>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e02d      	b.n	8002d04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d021      	beq.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb0:	f7fe fb66 	bl	8001380 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d302      	bcc.n	8002cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d116      	bne.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e007      	b.n	8002d04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d1ca      	bne.n	8002c98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d22:	d11b      	bne.n	8002d5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0204 	orr.w	r2, r3, #4
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e272      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8087 	beq.w	8002e96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d88:	4b92      	ldr	r3, [pc, #584]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d00c      	beq.n	8002dae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d94:	4b8f      	ldr	r3, [pc, #572]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d112      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x5e>
 8002da0:	4b8c      	ldr	r3, [pc, #560]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dac:	d10b      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dae:	4b89      	ldr	r3, [pc, #548]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d06c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x12c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d168      	bne.n	8002e94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e24c      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_OscConfig+0x76>
 8002dd0:	4b80      	ldr	r3, [pc, #512]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a7f      	ldr	r2, [pc, #508]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	e02e      	b.n	8002e3c <HAL_RCC_OscConfig+0xd4>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x98>
 8002de6:	4b7b      	ldr	r3, [pc, #492]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7a      	ldr	r2, [pc, #488]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b78      	ldr	r3, [pc, #480]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a77      	ldr	r2, [pc, #476]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e01d      	b.n	8002e3c <HAL_RCC_OscConfig+0xd4>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0xbc>
 8002e0a:	4b72      	ldr	r3, [pc, #456]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a71      	ldr	r2, [pc, #452]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a6e      	ldr	r2, [pc, #440]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e00b      	b.n	8002e3c <HAL_RCC_OscConfig+0xd4>
 8002e24:	4b6b      	ldr	r3, [pc, #428]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a6a      	ldr	r2, [pc, #424]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a67      	ldr	r2, [pc, #412]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe fa9c 	bl	8001380 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fa98 	bl	8001380 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e200      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	4b5d      	ldr	r3, [pc, #372]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0xe4>
 8002e6a:	e014      	b.n	8002e96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fa88 	bl	8001380 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e74:	f7fe fa84 	bl	8001380 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b64      	cmp	r3, #100	; 0x64
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e1ec      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e86:	4b53      	ldr	r3, [pc, #332]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x10c>
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d063      	beq.n	8002f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ea2:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d11c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x18c>
 8002eba:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d116      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_RCC_OscConfig+0x176>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d001      	beq.n	8002ede <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e1c0      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ede:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4939      	ldr	r1, [pc, #228]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef2:	e03a      	b.n	8002f6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002efc:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7fe fa3d 	bl	8001380 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fa39 	bl	8001380 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e1a1      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f28:	4b2a      	ldr	r3, [pc, #168]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4927      	ldr	r1, [pc, #156]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
 8002f3c:	e015      	b.n	8002f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3e:	4b26      	ldr	r3, [pc, #152]	; (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7fe fa1c 	bl	8001380 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4c:	f7fe fa18 	bl	8001380 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e180      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d03a      	beq.n	8002fec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d019      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f84:	f7fe f9fc 	bl	8001380 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8c:	f7fe f9f8 	bl	8001380 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e160      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f000 fad8 	bl	8003560 <RCC_Delay>
 8002fb0:	e01c      	b.n	8002fec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb8:	f7fe f9e2 	bl	8001380 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbe:	e00f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe f9de 	bl	8001380 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d908      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e146      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	42420000 	.word	0x42420000
 8002fdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe0:	4b92      	ldr	r3, [pc, #584]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e9      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a6 	beq.w	8003146 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffe:	4b8b      	ldr	r3, [pc, #556]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4a87      	ldr	r2, [pc, #540]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003014:	61d3      	str	r3, [r2, #28]
 8003016:	4b85      	ldr	r3, [pc, #532]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003026:	4b82      	ldr	r3, [pc, #520]	; (8003230 <HAL_RCC_OscConfig+0x4c8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d118      	bne.n	8003064 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003032:	4b7f      	ldr	r3, [pc, #508]	; (8003230 <HAL_RCC_OscConfig+0x4c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a7e      	ldr	r2, [pc, #504]	; (8003230 <HAL_RCC_OscConfig+0x4c8>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303e:	f7fe f99f 	bl	8001380 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003046:	f7fe f99b 	bl	8001380 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b64      	cmp	r3, #100	; 0x64
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e103      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	4b75      	ldr	r3, [pc, #468]	; (8003230 <HAL_RCC_OscConfig+0x4c8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d106      	bne.n	800307a <HAL_RCC_OscConfig+0x312>
 800306c:	4b6f      	ldr	r3, [pc, #444]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	4a6e      	ldr	r2, [pc, #440]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6213      	str	r3, [r2, #32]
 8003078:	e02d      	b.n	80030d6 <HAL_RCC_OscConfig+0x36e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x334>
 8003082:	4b6a      	ldr	r3, [pc, #424]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4a69      	ldr	r2, [pc, #420]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6213      	str	r3, [r2, #32]
 800308e:	4b67      	ldr	r3, [pc, #412]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4a66      	ldr	r2, [pc, #408]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	6213      	str	r3, [r2, #32]
 800309a:	e01c      	b.n	80030d6 <HAL_RCC_OscConfig+0x36e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b05      	cmp	r3, #5
 80030a2:	d10c      	bne.n	80030be <HAL_RCC_OscConfig+0x356>
 80030a4:	4b61      	ldr	r3, [pc, #388]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4a60      	ldr	r2, [pc, #384]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	f043 0304 	orr.w	r3, r3, #4
 80030ae:	6213      	str	r3, [r2, #32]
 80030b0:	4b5e      	ldr	r3, [pc, #376]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4a5d      	ldr	r2, [pc, #372]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	e00b      	b.n	80030d6 <HAL_RCC_OscConfig+0x36e>
 80030be:	4b5b      	ldr	r3, [pc, #364]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4a5a      	ldr	r2, [pc, #360]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	6213      	str	r3, [r2, #32]
 80030ca:	4b58      	ldr	r3, [pc, #352]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4a57      	ldr	r2, [pc, #348]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d015      	beq.n	800310a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030de:	f7fe f94f 	bl	8001380 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe f94b 	bl	8001380 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e0b1      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fc:	4b4b      	ldr	r3, [pc, #300]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ee      	beq.n	80030e6 <HAL_RCC_OscConfig+0x37e>
 8003108:	e014      	b.n	8003134 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310a:	f7fe f939 	bl	8001380 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003110:	e00a      	b.n	8003128 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe f935 	bl	8001380 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e09b      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003128:	4b40      	ldr	r3, [pc, #256]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ee      	bne.n	8003112 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d105      	bne.n	8003146 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b3c      	ldr	r3, [pc, #240]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4a3b      	ldr	r2, [pc, #236]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 8087 	beq.w	800325e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b08      	cmp	r3, #8
 800315a:	d061      	beq.n	8003220 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d146      	bne.n	80031f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003164:	4b33      	ldr	r3, [pc, #204]	; (8003234 <HAL_RCC_OscConfig+0x4cc>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe f909 	bl	8001380 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003172:	f7fe f905 	bl	8001380 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e06d      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003184:	4b29      	ldr	r3, [pc, #164]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d108      	bne.n	80031ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	4921      	ldr	r1, [pc, #132]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a19      	ldr	r1, [r3, #32]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	430b      	orrs	r3, r1
 80031be:	491b      	ldr	r1, [pc, #108]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_RCC_OscConfig+0x4cc>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fe f8d9 	bl	8001380 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fe f8d5 	bl	8001380 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e03d      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x46a>
 80031f0:	e035      	b.n	800325e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_RCC_OscConfig+0x4cc>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fe f8c2 	bl	8001380 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe f8be 	bl	8001380 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e026      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_OscConfig+0x4c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x498>
 800321e:	e01e      	b.n	800325e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d107      	bne.n	8003238 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e019      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
 800322c:	40021000 	.word	0x40021000
 8003230:	40007000 	.word	0x40007000
 8003234:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_OscConfig+0x500>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	429a      	cmp	r2, r3
 800324a:	d106      	bne.n	800325a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d001      	beq.n	800325e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000

0800326c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0d0      	b.n	8003422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003280:	4b6a      	ldr	r3, [pc, #424]	; (800342c <HAL_RCC_ClockConfig+0x1c0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d910      	bls.n	80032b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	4b67      	ldr	r3, [pc, #412]	; (800342c <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 0207 	bic.w	r2, r3, #7
 8003296:	4965      	ldr	r1, [pc, #404]	; (800342c <HAL_RCC_ClockConfig+0x1c0>)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b63      	ldr	r3, [pc, #396]	; (800342c <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0b8      	b.n	8003422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d020      	beq.n	80032fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c8:	4b59      	ldr	r3, [pc, #356]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a58      	ldr	r2, [pc, #352]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e0:	4b53      	ldr	r3, [pc, #332]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4a52      	ldr	r2, [pc, #328]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ec:	4b50      	ldr	r3, [pc, #320]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	494d      	ldr	r1, [pc, #308]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d040      	beq.n	800338c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d115      	bne.n	800334a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e07f      	b.n	8003422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332a:	4b41      	ldr	r3, [pc, #260]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e073      	b.n	8003422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e06b      	b.n	8003422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f023 0203 	bic.w	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4936      	ldr	r1, [pc, #216]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800335c:	f7fe f810 	bl	8001380 <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	e00a      	b.n	800337a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003364:	f7fe f80c 	bl	8001380 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e053      	b.n	8003422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 020c 	and.w	r2, r3, #12
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	429a      	cmp	r2, r3
 800338a:	d1eb      	bne.n	8003364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800338c:	4b27      	ldr	r3, [pc, #156]	; (800342c <HAL_RCC_ClockConfig+0x1c0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d210      	bcs.n	80033bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 0207 	bic.w	r2, r3, #7
 80033a2:	4922      	ldr	r1, [pc, #136]	; (800342c <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e032      	b.n	8003422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4916      	ldr	r1, [pc, #88]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033e6:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	490e      	ldr	r1, [pc, #56]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033fa:	f000 f821 	bl	8003440 <HAL_RCC_GetSysClockFreq>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	490a      	ldr	r1, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	5ccb      	ldrb	r3, [r1, r3]
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x1cc>)
 8003414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x1d0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd ff6e 	bl	80012fc <HAL_InitTick>

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40022000 	.word	0x40022000
 8003430:	40021000 	.word	0x40021000
 8003434:	08006028 	.word	0x08006028
 8003438:	20000004 	.word	0x20000004
 800343c:	20000008 	.word	0x20000008

08003440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003440:	b490      	push	{r4, r7}
 8003442:	b08a      	sub	sp, #40	; 0x28
 8003444:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <HAL_RCC_GetSysClockFreq+0xac>)
 8003448:	1d3c      	adds	r4, r7, #4
 800344a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800344c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003450:	f240 2301 	movw	r3, #513	; 0x201
 8003454:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800346a:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b04      	cmp	r3, #4
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x40>
 800347a:	2b08      	cmp	r3, #8
 800347c:	d003      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x46>
 800347e:	e02b      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003480:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003482:	623b      	str	r3, [r7, #32]
      break;
 8003484:	e02b      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	0c9b      	lsrs	r3, r3, #18
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3328      	adds	r3, #40	; 0x28
 8003490:	443b      	add	r3, r7
 8003492:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003496:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034a2:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	0c5b      	lsrs	r3, r3, #17
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	3328      	adds	r3, #40	; 0x28
 80034ae:	443b      	add	r3, r7
 80034b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034ba:	fb03 f202 	mul.w	r2, r3, r2
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	e004      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	623b      	str	r3, [r7, #32]
      break;
 80034d6:	e002      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034da:	623b      	str	r3, [r7, #32]
      break;
 80034dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034de:	6a3b      	ldr	r3, [r7, #32]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3728      	adds	r7, #40	; 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc90      	pop	{r4, r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	08006018 	.word	0x08006018
 80034f0:	40021000 	.word	0x40021000
 80034f4:	007a1200 	.word	0x007a1200
 80034f8:	003d0900 	.word	0x003d0900

080034fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003500:	4b02      	ldr	r3, [pc, #8]	; (800350c <HAL_RCC_GetHCLKFreq+0x10>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	20000004 	.word	0x20000004

08003510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003514:	f7ff fff2 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4903      	ldr	r1, [pc, #12]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	08006038 	.word	0x08006038

08003538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800353c:	f7ff ffde 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	0adb      	lsrs	r3, r3, #11
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	; (800355c <HAL_RCC_GetPCLK2Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	08006038 	.word	0x08006038

08003560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <RCC_Delay+0x34>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <RCC_Delay+0x38>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	0a5b      	lsrs	r3, r3, #9
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800357c:	bf00      	nop
  }
  while (Delay --);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	60fa      	str	r2, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f9      	bne.n	800357c <RCC_Delay+0x1c>
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	20000004 	.word	0x20000004
 8003598:	10624dd3 	.word	0x10624dd3

0800359c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d07d      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035bc:	4b4f      	ldr	r3, [pc, #316]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10d      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	4a4b      	ldr	r2, [pc, #300]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d2:	61d3      	str	r3, [r2, #28]
 80035d4:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e0:	2301      	movs	r3, #1
 80035e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e4:	4b46      	ldr	r3, [pc, #280]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d118      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f0:	4b43      	ldr	r3, [pc, #268]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a42      	ldr	r2, [pc, #264]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fc:	f7fd fec0 	bl	8001380 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	e008      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003604:	f7fd febc 	bl	8001380 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e06d      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	4b3a      	ldr	r3, [pc, #232]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003622:	4b36      	ldr	r3, [pc, #216]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d02e      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	429a      	cmp	r2, r3
 800363e:	d027      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003640:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003648:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003650:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003656:	4a29      	ldr	r2, [pc, #164]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d014      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fd fe8b 	bl	8001380 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fd fe87 	bl	8001380 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e036      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ee      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4917      	ldr	r1, [pc, #92]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d105      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	4a13      	ldr	r2, [pc, #76]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	490b      	ldr	r1, [pc, #44]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4904      	ldr	r1, [pc, #16]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	40007000 	.word	0x40007000
 8003704:	42420440 	.word	0x42420440

08003708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e041      	b.n	800379e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd fc08 	bl	8000f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 fdb8 	bl	80042bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d001      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e03a      	b.n	8003836 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_TIM_Base_Start_IT+0x98>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00e      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x58>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d009      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x58>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a14      	ldr	r2, [pc, #80]	; (8003844 <HAL_TIM_Base_Start_IT+0x9c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x58>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a13      	ldr	r2, [pc, #76]	; (8003848 <HAL_TIM_Base_Start_IT+0xa0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b06      	cmp	r3, #6
 8003810:	d010      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	e007      	b.n	8003834 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800

0800384c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e041      	b.n	80038e2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f839 	bl	80038ea <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	f000 fd16 	bl	80042bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <HAL_TIM_OC_Start_IT+0x24>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e022      	b.n	8003966 <HAL_TIM_OC_Start_IT+0x6a>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b04      	cmp	r3, #4
 8003924:	d109      	bne.n	800393a <HAL_TIM_OC_Start_IT+0x3e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	bf14      	ite	ne
 8003932:	2301      	movne	r3, #1
 8003934:	2300      	moveq	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	e015      	b.n	8003966 <HAL_TIM_OC_Start_IT+0x6a>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d109      	bne.n	8003954 <HAL_TIM_OC_Start_IT+0x58>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e008      	b.n	8003966 <HAL_TIM_OC_Start_IT+0x6a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e0a4      	b.n	8003ab8 <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d104      	bne.n	800397e <HAL_TIM_OC_Start_IT+0x82>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800397c:	e013      	b.n	80039a6 <HAL_TIM_OC_Start_IT+0xaa>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b04      	cmp	r3, #4
 8003982:	d104      	bne.n	800398e <HAL_TIM_OC_Start_IT+0x92>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800398c:	e00b      	b.n	80039a6 <HAL_TIM_OC_Start_IT+0xaa>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d104      	bne.n	800399e <HAL_TIM_OC_Start_IT+0xa2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399c:	e003      	b.n	80039a6 <HAL_TIM_OC_Start_IT+0xaa>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d841      	bhi.n	8003a30 <HAL_TIM_OC_Start_IT+0x134>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <HAL_TIM_OC_Start_IT+0xb8>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039e9 	.word	0x080039e9
 80039b8:	08003a31 	.word	0x08003a31
 80039bc:	08003a31 	.word	0x08003a31
 80039c0:	08003a31 	.word	0x08003a31
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	08003a31 	.word	0x08003a31
 80039cc:	08003a31 	.word	0x08003a31
 80039d0:	08003a31 	.word	0x08003a31
 80039d4:	08003a0d 	.word	0x08003a0d
 80039d8:	08003a31 	.word	0x08003a31
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003a1f 	.word	0x08003a1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0202 	orr.w	r2, r2, #2
 80039f6:	60da      	str	r2, [r3, #12]
      break;
 80039f8:	e01b      	b.n	8003a32 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0204 	orr.w	r2, r2, #4
 8003a08:	60da      	str	r2, [r3, #12]
      break;
 8003a0a:	e012      	b.n	8003a32 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0208 	orr.w	r2, r2, #8
 8003a1a:	60da      	str	r2, [r3, #12]
      break;
 8003a1c:	e009      	b.n	8003a32 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0210 	orr.w	r2, r2, #16
 8003a2c:	60da      	str	r2, [r3, #12]
      break;
 8003a2e:	e000      	b.n	8003a32 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8003a30:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 febe 	bl	80047bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <HAL_TIM_OC_Start_IT+0x1c4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d107      	bne.n	8003a5a <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_TIM_OC_Start_IT+0x1c4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_TIM_OC_Start_IT+0x186>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d009      	beq.n	8003a82 <HAL_TIM_OC_Start_IT+0x186>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <HAL_TIM_OC_Start_IT+0x1c8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_TIM_OC_Start_IT+0x186>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <HAL_TIM_OC_Start_IT+0x1cc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d111      	bne.n	8003aa6 <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d010      	beq.n	8003ab6 <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa4:	e007      	b.n	8003ab6 <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800

08003acc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e041      	b.n	8003b62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f839 	bl	8003b6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f000 fbd6 	bl	80042bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <HAL_TIM_PWM_Start+0x24>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	bf14      	ite	ne
 8003b98:	2301      	movne	r3, #1
 8003b9a:	2300      	moveq	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e022      	b.n	8003be6 <HAL_TIM_PWM_Start+0x6a>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d109      	bne.n	8003bba <HAL_TIM_PWM_Start+0x3e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	bf14      	ite	ne
 8003bb2:	2301      	movne	r3, #1
 8003bb4:	2300      	moveq	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	e015      	b.n	8003be6 <HAL_TIM_PWM_Start+0x6a>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d109      	bne.n	8003bd4 <HAL_TIM_PWM_Start+0x58>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e008      	b.n	8003be6 <HAL_TIM_PWM_Start+0x6a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	bf14      	ite	ne
 8003be0:	2301      	movne	r3, #1
 8003be2:	2300      	moveq	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e05e      	b.n	8003cac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_PWM_Start+0x82>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bfc:	e013      	b.n	8003c26 <HAL_TIM_PWM_Start+0xaa>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_PWM_Start+0x92>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0c:	e00b      	b.n	8003c26 <HAL_TIM_PWM_Start+0xaa>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d104      	bne.n	8003c1e <HAL_TIM_PWM_Start+0xa2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1c:	e003      	b.n	8003c26 <HAL_TIM_PWM_Start+0xaa>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	6839      	ldr	r1, [r7, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fdc4 	bl	80047bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <HAL_TIM_PWM_Start+0x138>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d107      	bne.n	8003c4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <HAL_TIM_PWM_Start+0x138>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_TIM_PWM_Start+0xfa>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d009      	beq.n	8003c76 <HAL_TIM_PWM_Start+0xfa>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <HAL_TIM_PWM_Start+0x13c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_TIM_PWM_Start+0xfa>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <HAL_TIM_PWM_Start+0x140>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d111      	bne.n	8003c9a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b06      	cmp	r3, #6
 8003c86:	d010      	beq.n	8003caa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c98:	e007      	b.n	8003caa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800

08003cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d122      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d11b      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0202 	mvn.w	r2, #2
 8003cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fabe 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003d08:	e005      	b.n	8003d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd f820 	bl	8000d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fac0 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d122      	bne.n	8003d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d11b      	bne.n	8003d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0204 	mvn.w	r2, #4
 8003d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa94 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003d5c:	e005      	b.n	8003d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fc fff6 	bl	8000d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fa96 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d122      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0208 	mvn.w	r2, #8
 8003d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2204      	movs	r2, #4
 8003d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa6a 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fc ffcc 	bl	8000d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fa6c 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b10      	cmp	r3, #16
 8003dd0:	d122      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d11b      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0210 	mvn.w	r2, #16
 8003de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2208      	movs	r2, #8
 8003dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa40 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fc ffa2 	bl	8000d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fa42 	bl	8004296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d10e      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d107      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0201 	mvn.w	r2, #1
 8003e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fc ff3e 	bl	8000cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4e:	2b80      	cmp	r3, #128	; 0x80
 8003e50:	d10e      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b80      	cmp	r3, #128	; 0x80
 8003e5e:	d107      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fd31 	bl	80048d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b40      	cmp	r3, #64	; 0x40
 8003e7c:	d10e      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d107      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fa06 	bl	80042a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0220 	mvn.w	r2, #32
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fcfc 	bl	80048c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_OC_ConfigChannel+0x1a>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e046      	b.n	8003f78 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b0c      	cmp	r3, #12
 8003ef6:	d839      	bhi.n	8003f6c <HAL_TIM_OC_ConfigChannel+0x9c>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f35 	.word	0x08003f35
 8003f04:	08003f6d 	.word	0x08003f6d
 8003f08:	08003f6d 	.word	0x08003f6d
 8003f0c:	08003f6d 	.word	0x08003f6d
 8003f10:	08003f43 	.word	0x08003f43
 8003f14:	08003f6d 	.word	0x08003f6d
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	08003f6d 	.word	0x08003f6d
 8003f20:	08003f51 	.word	0x08003f51
 8003f24:	08003f6d 	.word	0x08003f6d
 8003f28:	08003f6d 	.word	0x08003f6d
 8003f2c:	08003f6d 	.word	0x08003f6d
 8003f30:	08003f5f 	.word	0x08003f5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fa20 	bl	8004380 <TIM_OC1_SetConfig>
      break;
 8003f40:	e015      	b.n	8003f6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fa7f 	bl	800444c <TIM_OC2_SetConfig>
      break;
 8003f4e:	e00e      	b.n	8003f6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fae2 	bl	8004520 <TIM_OC3_SetConfig>
      break;
 8003f5c:	e007      	b.n	8003f6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fb45 	bl	80045f4 <TIM_OC4_SetConfig>
      break;
 8003f6a:	e000      	b.n	8003f6e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0ac      	b.n	80040f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	f200 809f 	bhi.w	80040e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fe5 	.word	0x08003fe5
 8003fb4:	080040e9 	.word	0x080040e9
 8003fb8:	080040e9 	.word	0x080040e9
 8003fbc:	080040e9 	.word	0x080040e9
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	080040e9 	.word	0x080040e9
 8003fc8:	080040e9 	.word	0x080040e9
 8003fcc:	080040e9 	.word	0x080040e9
 8003fd0:	08004067 	.word	0x08004067
 8003fd4:	080040e9 	.word	0x080040e9
 8003fd8:	080040e9 	.word	0x080040e9
 8003fdc:	080040e9 	.word	0x080040e9
 8003fe0:	080040a7 	.word	0x080040a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f9c8 	bl	8004380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0208 	orr.w	r2, r2, #8
 8003ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0204 	bic.w	r2, r2, #4
 800400e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	619a      	str	r2, [r3, #24]
      break;
 8004022:	e062      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fa0e 	bl	800444c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800403e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6999      	ldr	r1, [r3, #24]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	021a      	lsls	r2, r3, #8
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	619a      	str	r2, [r3, #24]
      break;
 8004064:	e041      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fa57 	bl	8004520 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0208 	orr.w	r2, r2, #8
 8004080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0204 	bic.w	r2, r2, #4
 8004090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69d9      	ldr	r1, [r3, #28]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	61da      	str	r2, [r3, #28]
      break;
 80040a4:	e021      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 faa1 	bl	80045f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69d9      	ldr	r1, [r3, #28]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	021a      	lsls	r2, r3, #8
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	61da      	str	r2, [r3, #28]
      break;
 80040e6:	e000      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_TIM_ConfigClockSource+0x18>
 8004110:	2302      	movs	r3, #2
 8004112:	e0b3      	b.n	800427c <HAL_TIM_ConfigClockSource+0x180>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004132:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414c:	d03e      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0xd0>
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004152:	f200 8087 	bhi.w	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415a:	f000 8085 	beq.w	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	d87f      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004164:	2b70      	cmp	r3, #112	; 0x70
 8004166:	d01a      	beq.n	800419e <HAL_TIM_ConfigClockSource+0xa2>
 8004168:	2b70      	cmp	r3, #112	; 0x70
 800416a:	d87b      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d050      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x116>
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d877      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004174:	2b50      	cmp	r3, #80	; 0x50
 8004176:	d03c      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0xf6>
 8004178:	2b50      	cmp	r3, #80	; 0x50
 800417a:	d873      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d058      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x136>
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d86f      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004184:	2b30      	cmp	r3, #48	; 0x30
 8004186:	d064      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
 8004188:	2b30      	cmp	r3, #48	; 0x30
 800418a:	d86b      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 800418c:	2b20      	cmp	r3, #32
 800418e:	d060      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
 8004190:	2b20      	cmp	r3, #32
 8004192:	d867      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05c      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
 8004198:	2b10      	cmp	r3, #16
 800419a:	d05a      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800419c:	e062      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6899      	ldr	r1, [r3, #8]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f000 fae6 	bl	800477e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	609a      	str	r2, [r3, #8]
      break;
 80041ca:	e04e      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6899      	ldr	r1, [r3, #8]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f000 facf 	bl	800477e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ee:	609a      	str	r2, [r3, #8]
      break;
 80041f0:	e03b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	461a      	mov	r2, r3
 8004200:	f000 fa46 	bl	8004690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2150      	movs	r1, #80	; 0x50
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fa9d 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 8004210:	e02b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	461a      	mov	r2, r3
 8004220:	f000 fa64 	bl	80046ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2160      	movs	r1, #96	; 0x60
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fa8d 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 8004230:	e01b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	461a      	mov	r2, r3
 8004240:	f000 fa26 	bl	8004690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2140      	movs	r1, #64	; 0x40
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fa7d 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 8004250:	e00b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4619      	mov	r1, r3
 800425c:	4610      	mov	r0, r2
 800425e:	f000 fa74 	bl	800474a <TIM_ITRx_SetConfig>
        break;
 8004262:	e002      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004264:	bf00      	nop
 8004266:	e000      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004268:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
	...

080042bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a29      	ldr	r2, [pc, #164]	; (8004374 <TIM_Base_SetConfig+0xb8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00b      	beq.n	80042ec <TIM_Base_SetConfig+0x30>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042da:	d007      	beq.n	80042ec <TIM_Base_SetConfig+0x30>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a26      	ldr	r2, [pc, #152]	; (8004378 <TIM_Base_SetConfig+0xbc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_Base_SetConfig+0x30>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a25      	ldr	r2, [pc, #148]	; (800437c <TIM_Base_SetConfig+0xc0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d108      	bne.n	80042fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <TIM_Base_SetConfig+0xb8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00b      	beq.n	800431e <TIM_Base_SetConfig+0x62>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430c:	d007      	beq.n	800431e <TIM_Base_SetConfig+0x62>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a19      	ldr	r2, [pc, #100]	; (8004378 <TIM_Base_SetConfig+0xbc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d003      	beq.n	800431e <TIM_Base_SetConfig+0x62>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <TIM_Base_SetConfig+0xc0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d108      	bne.n	8004330 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a07      	ldr	r2, [pc, #28]	; (8004374 <TIM_Base_SetConfig+0xb8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d103      	bne.n	8004364 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	615a      	str	r2, [r3, #20]
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800

08004380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0201 	bic.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 0302 	bic.w	r3, r3, #2
 80043c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <TIM_OC1_SetConfig+0xc8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d10c      	bne.n	80043f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0308 	bic.w	r3, r3, #8
 80043e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a13      	ldr	r2, [pc, #76]	; (8004448 <TIM_OC1_SetConfig+0xc8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d111      	bne.n	8004422 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800440c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40012c00 	.word	0x40012c00

0800444c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f023 0210 	bic.w	r2, r3, #16
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0320 	bic.w	r3, r3, #32
 8004496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a1d      	ldr	r2, [pc, #116]	; (800451c <TIM_OC2_SetConfig+0xd0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d10d      	bne.n	80044c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a14      	ldr	r2, [pc, #80]	; (800451c <TIM_OC2_SetConfig+0xd0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d113      	bne.n	80044f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr
 800451c:	40012c00 	.word	0x40012c00

08004520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <TIM_OC3_SetConfig+0xd0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d10d      	bne.n	800459a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a14      	ldr	r2, [pc, #80]	; (80045f0 <TIM_OC3_SetConfig+0xd0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d113      	bne.n	80045ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	621a      	str	r2, [r3, #32]
}
 80045e4:	bf00      	nop
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40012c00 	.word	0x40012c00

080045f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800463e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	031b      	lsls	r3, r3, #12
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a0f      	ldr	r2, [pc, #60]	; (800468c <TIM_OC4_SetConfig+0x98>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d109      	bne.n	8004668 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800465a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	019b      	lsls	r3, r3, #6
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr
 800468c:	40012c00 	.word	0x40012c00

08004690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f023 0201 	bic.w	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f023 030a 	bic.w	r3, r3, #10
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f023 0210 	bic.w	r2, r3, #16
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004716:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	031b      	lsls	r3, r3, #12
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004728:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	621a      	str	r2, [r3, #32]
}
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr

0800474a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	f043 0307 	orr.w	r3, r3, #7
 800476c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	609a      	str	r2, [r3, #8]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800477e:	b480      	push	{r7}
 8004780:	b087      	sub	sp, #28
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004798:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	021a      	lsls	r2, r3, #8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	609a      	str	r2, [r3, #8]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2201      	movs	r2, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	43db      	mvns	r3, r3
 80047de:	401a      	ands	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1a      	ldr	r2, [r3, #32]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004818:	2302      	movs	r3, #2
 800481a:	e046      	b.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d009      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a10      	ldr	r2, [pc, #64]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10c      	bne.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4313      	orrs	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40000800 	.word	0x40000800

080048c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e03f      	b.n	8004976 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc fb84 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2224      	movs	r2, #36	; 0x24
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f905 	bl	8004b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800493c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800494c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800495c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b08a      	sub	sp, #40	; 0x28
 8004982:	af02      	add	r7, sp, #8
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	d17c      	bne.n	8004a98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_UART_Transmit+0x2c>
 80049a4:	88fb      	ldrh	r3, [r7, #6]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e075      	b.n	8004a9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_UART_Transmit+0x3e>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e06e      	b.n	8004a9a <HAL_UART_Transmit+0x11c>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2221      	movs	r2, #33	; 0x21
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049d2:	f7fc fcd5 	bl	8001380 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ec:	d108      	bne.n	8004a00 <HAL_UART_Transmit+0x82>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e003      	b.n	8004a08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a10:	e02a      	b.n	8004a68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f840 	bl	8004aa2 <UART_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e036      	b.n	8004a9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	3302      	adds	r3, #2
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	e007      	b.n	8004a5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	3301      	adds	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1cf      	bne.n	8004a12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2140      	movs	r1, #64	; 0x40
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f810 	bl	8004aa2 <UART_WaitOnFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e006      	b.n	8004a9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab2:	e02c      	b.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d028      	beq.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ac2:	f7fc fc5d 	bl	8001380 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d21d      	bcs.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ae0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0201 	bic.w	r2, r2, #1
 8004af0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e00f      	b.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4013      	ands	r3, r2
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	bf0c      	ite	eq
 8004b1e:	2301      	moveq	r3, #1
 8004b20:	2300      	movne	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d0c3      	beq.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b72:	f023 030c 	bic.w	r3, r3, #12
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <UART_SetConfig+0x114>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d103      	bne.n	8004ba8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ba0:	f7fe fcca 	bl	8003538 <HAL_RCC_GetPCLK2Freq>
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	e002      	b.n	8004bae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fe fcb2 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8004bac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009a      	lsls	r2, r3, #2
 8004bb8:	441a      	add	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <UART_SetConfig+0x118>)
 8004bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	0119      	lsls	r1, r3, #4
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009a      	lsls	r2, r3, #2
 8004bd8:	441a      	add	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004be4:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <UART_SetConfig+0x118>)
 8004be6:	fba3 0302 	umull	r0, r3, r3, r2
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2064      	movs	r0, #100	; 0x64
 8004bee:	fb00 f303 	mul.w	r3, r0, r3
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	3332      	adds	r3, #50	; 0x32
 8004bf8:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <UART_SetConfig+0x118>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c04:	4419      	add	r1, r3
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009a      	lsls	r2, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <UART_SetConfig+0x118>)
 8004c1e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2064      	movs	r0, #100	; 0x64
 8004c26:	fb00 f303 	mul.w	r3, r0, r3
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	3332      	adds	r3, #50	; 0x32
 8004c30:	4a07      	ldr	r2, [pc, #28]	; (8004c50 <UART_SetConfig+0x118>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	f003 020f 	and.w	r2, r3, #15
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	440a      	add	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40013800 	.word	0x40013800
 8004c50:	51eb851f 	.word	0x51eb851f

08004c54 <__errno>:
 8004c54:	4b01      	ldr	r3, [pc, #4]	; (8004c5c <__errno+0x8>)
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000010 	.word	0x20000010

08004c60 <__libc_init_array>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	2600      	movs	r6, #0
 8004c64:	4d0c      	ldr	r5, [pc, #48]	; (8004c98 <__libc_init_array+0x38>)
 8004c66:	4c0d      	ldr	r4, [pc, #52]	; (8004c9c <__libc_init_array+0x3c>)
 8004c68:	1b64      	subs	r4, r4, r5
 8004c6a:	10a4      	asrs	r4, r4, #2
 8004c6c:	42a6      	cmp	r6, r4
 8004c6e:	d109      	bne.n	8004c84 <__libc_init_array+0x24>
 8004c70:	f001 f992 	bl	8005f98 <_init>
 8004c74:	2600      	movs	r6, #0
 8004c76:	4d0a      	ldr	r5, [pc, #40]	; (8004ca0 <__libc_init_array+0x40>)
 8004c78:	4c0a      	ldr	r4, [pc, #40]	; (8004ca4 <__libc_init_array+0x44>)
 8004c7a:	1b64      	subs	r4, r4, r5
 8004c7c:	10a4      	asrs	r4, r4, #2
 8004c7e:	42a6      	cmp	r6, r4
 8004c80:	d105      	bne.n	8004c8e <__libc_init_array+0x2e>
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c88:	4798      	blx	r3
 8004c8a:	3601      	adds	r6, #1
 8004c8c:	e7ee      	b.n	8004c6c <__libc_init_array+0xc>
 8004c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c92:	4798      	blx	r3
 8004c94:	3601      	adds	r6, #1
 8004c96:	e7f2      	b.n	8004c7e <__libc_init_array+0x1e>
 8004c98:	080060d8 	.word	0x080060d8
 8004c9c:	080060d8 	.word	0x080060d8
 8004ca0:	080060d8 	.word	0x080060d8
 8004ca4:	080060dc 	.word	0x080060dc

08004ca8 <memset>:
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4402      	add	r2, r0
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d100      	bne.n	8004cb2 <memset+0xa>
 8004cb0:	4770      	bx	lr
 8004cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb6:	e7f9      	b.n	8004cac <memset+0x4>

08004cb8 <iprintf>:
 8004cb8:	b40f      	push	{r0, r1, r2, r3}
 8004cba:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <iprintf+0x2c>)
 8004cbc:	b513      	push	{r0, r1, r4, lr}
 8004cbe:	681c      	ldr	r4, [r3, #0]
 8004cc0:	b124      	cbz	r4, 8004ccc <iprintf+0x14>
 8004cc2:	69a3      	ldr	r3, [r4, #24]
 8004cc4:	b913      	cbnz	r3, 8004ccc <iprintf+0x14>
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f000 f886 	bl	8004dd8 <__sinit>
 8004ccc:	ab05      	add	r3, sp, #20
 8004cce:	4620      	mov	r0, r4
 8004cd0:	9a04      	ldr	r2, [sp, #16]
 8004cd2:	68a1      	ldr	r1, [r4, #8]
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	f000 fb37 	bl	8005348 <_vfiprintf_r>
 8004cda:	b002      	add	sp, #8
 8004cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce0:	b004      	add	sp, #16
 8004ce2:	4770      	bx	lr
 8004ce4:	20000010 	.word	0x20000010

08004ce8 <siprintf>:
 8004ce8:	b40e      	push	{r1, r2, r3}
 8004cea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cee:	b500      	push	{lr}
 8004cf0:	b09c      	sub	sp, #112	; 0x70
 8004cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8004cf4:	9002      	str	r0, [sp, #8]
 8004cf6:	9006      	str	r0, [sp, #24]
 8004cf8:	9107      	str	r1, [sp, #28]
 8004cfa:	9104      	str	r1, [sp, #16]
 8004cfc:	4808      	ldr	r0, [pc, #32]	; (8004d20 <siprintf+0x38>)
 8004cfe:	4909      	ldr	r1, [pc, #36]	; (8004d24 <siprintf+0x3c>)
 8004d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d04:	9105      	str	r1, [sp, #20]
 8004d06:	6800      	ldr	r0, [r0, #0]
 8004d08:	a902      	add	r1, sp, #8
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	f000 f9f4 	bl	80050f8 <_svfiprintf_r>
 8004d10:	2200      	movs	r2, #0
 8004d12:	9b02      	ldr	r3, [sp, #8]
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	b01c      	add	sp, #112	; 0x70
 8004d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d1c:	b003      	add	sp, #12
 8004d1e:	4770      	bx	lr
 8004d20:	20000010 	.word	0x20000010
 8004d24:	ffff0208 	.word	0xffff0208

08004d28 <std>:
 8004d28:	2300      	movs	r3, #0
 8004d2a:	b510      	push	{r4, lr}
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d36:	6083      	str	r3, [r0, #8]
 8004d38:	8181      	strh	r1, [r0, #12]
 8004d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d3c:	81c2      	strh	r2, [r0, #14]
 8004d3e:	6183      	str	r3, [r0, #24]
 8004d40:	4619      	mov	r1, r3
 8004d42:	2208      	movs	r2, #8
 8004d44:	305c      	adds	r0, #92	; 0x5c
 8004d46:	f7ff ffaf 	bl	8004ca8 <memset>
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <std+0x38>)
 8004d4c:	6224      	str	r4, [r4, #32]
 8004d4e:	6263      	str	r3, [r4, #36]	; 0x24
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <std+0x3c>)
 8004d52:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d54:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <std+0x40>)
 8004d56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <std+0x44>)
 8004d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d5c:	bd10      	pop	{r4, pc}
 8004d5e:	bf00      	nop
 8004d60:	080058f5 	.word	0x080058f5
 8004d64:	08005917 	.word	0x08005917
 8004d68:	0800594f 	.word	0x0800594f
 8004d6c:	08005973 	.word	0x08005973

08004d70 <_cleanup_r>:
 8004d70:	4901      	ldr	r1, [pc, #4]	; (8004d78 <_cleanup_r+0x8>)
 8004d72:	f000 b8af 	b.w	8004ed4 <_fwalk_reent>
 8004d76:	bf00      	nop
 8004d78:	08005c45 	.word	0x08005c45

08004d7c <__sfmoreglue>:
 8004d7c:	2268      	movs	r2, #104	; 0x68
 8004d7e:	b570      	push	{r4, r5, r6, lr}
 8004d80:	1e4d      	subs	r5, r1, #1
 8004d82:	4355      	muls	r5, r2
 8004d84:	460e      	mov	r6, r1
 8004d86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d8a:	f000 f8e5 	bl	8004f58 <_malloc_r>
 8004d8e:	4604      	mov	r4, r0
 8004d90:	b140      	cbz	r0, 8004da4 <__sfmoreglue+0x28>
 8004d92:	2100      	movs	r1, #0
 8004d94:	e9c0 1600 	strd	r1, r6, [r0]
 8004d98:	300c      	adds	r0, #12
 8004d9a:	60a0      	str	r0, [r4, #8]
 8004d9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004da0:	f7ff ff82 	bl	8004ca8 <memset>
 8004da4:	4620      	mov	r0, r4
 8004da6:	bd70      	pop	{r4, r5, r6, pc}

08004da8 <__sfp_lock_acquire>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__sfp_lock_acquire+0x8>)
 8004daa:	f000 b8b3 	b.w	8004f14 <__retarget_lock_acquire_recursive>
 8004dae:	bf00      	nop
 8004db0:	20000269 	.word	0x20000269

08004db4 <__sfp_lock_release>:
 8004db4:	4801      	ldr	r0, [pc, #4]	; (8004dbc <__sfp_lock_release+0x8>)
 8004db6:	f000 b8ae 	b.w	8004f16 <__retarget_lock_release_recursive>
 8004dba:	bf00      	nop
 8004dbc:	20000269 	.word	0x20000269

08004dc0 <__sinit_lock_acquire>:
 8004dc0:	4801      	ldr	r0, [pc, #4]	; (8004dc8 <__sinit_lock_acquire+0x8>)
 8004dc2:	f000 b8a7 	b.w	8004f14 <__retarget_lock_acquire_recursive>
 8004dc6:	bf00      	nop
 8004dc8:	2000026a 	.word	0x2000026a

08004dcc <__sinit_lock_release>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__sinit_lock_release+0x8>)
 8004dce:	f000 b8a2 	b.w	8004f16 <__retarget_lock_release_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	2000026a 	.word	0x2000026a

08004dd8 <__sinit>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	4604      	mov	r4, r0
 8004ddc:	f7ff fff0 	bl	8004dc0 <__sinit_lock_acquire>
 8004de0:	69a3      	ldr	r3, [r4, #24]
 8004de2:	b11b      	cbz	r3, 8004dec <__sinit+0x14>
 8004de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de8:	f7ff bff0 	b.w	8004dcc <__sinit_lock_release>
 8004dec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004df0:	6523      	str	r3, [r4, #80]	; 0x50
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <__sinit+0x68>)
 8004df4:	4a13      	ldr	r2, [pc, #76]	; (8004e44 <__sinit+0x6c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dfa:	42a3      	cmp	r3, r4
 8004dfc:	bf08      	it	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	4620      	mov	r0, r4
 8004e02:	bf08      	it	eq
 8004e04:	61a3      	streq	r3, [r4, #24]
 8004e06:	f000 f81f 	bl	8004e48 <__sfp>
 8004e0a:	6060      	str	r0, [r4, #4]
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f000 f81b 	bl	8004e48 <__sfp>
 8004e12:	60a0      	str	r0, [r4, #8]
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 f817 	bl	8004e48 <__sfp>
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2104      	movs	r1, #4
 8004e1e:	60e0      	str	r0, [r4, #12]
 8004e20:	6860      	ldr	r0, [r4, #4]
 8004e22:	f7ff ff81 	bl	8004d28 <std>
 8004e26:	2201      	movs	r2, #1
 8004e28:	2109      	movs	r1, #9
 8004e2a:	68a0      	ldr	r0, [r4, #8]
 8004e2c:	f7ff ff7c 	bl	8004d28 <std>
 8004e30:	2202      	movs	r2, #2
 8004e32:	2112      	movs	r1, #18
 8004e34:	68e0      	ldr	r0, [r4, #12]
 8004e36:	f7ff ff77 	bl	8004d28 <std>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	61a3      	str	r3, [r4, #24]
 8004e3e:	e7d1      	b.n	8004de4 <__sinit+0xc>
 8004e40:	08006040 	.word	0x08006040
 8004e44:	08004d71 	.word	0x08004d71

08004e48 <__sfp>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	4607      	mov	r7, r0
 8004e4c:	f7ff ffac 	bl	8004da8 <__sfp_lock_acquire>
 8004e50:	4b1e      	ldr	r3, [pc, #120]	; (8004ecc <__sfp+0x84>)
 8004e52:	681e      	ldr	r6, [r3, #0]
 8004e54:	69b3      	ldr	r3, [r6, #24]
 8004e56:	b913      	cbnz	r3, 8004e5e <__sfp+0x16>
 8004e58:	4630      	mov	r0, r6
 8004e5a:	f7ff ffbd 	bl	8004dd8 <__sinit>
 8004e5e:	3648      	adds	r6, #72	; 0x48
 8004e60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	d503      	bpl.n	8004e70 <__sfp+0x28>
 8004e68:	6833      	ldr	r3, [r6, #0]
 8004e6a:	b30b      	cbz	r3, 8004eb0 <__sfp+0x68>
 8004e6c:	6836      	ldr	r6, [r6, #0]
 8004e6e:	e7f7      	b.n	8004e60 <__sfp+0x18>
 8004e70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e74:	b9d5      	cbnz	r5, 8004eac <__sfp+0x64>
 8004e76:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <__sfp+0x88>)
 8004e78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e7c:	60e3      	str	r3, [r4, #12]
 8004e7e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e80:	f000 f847 	bl	8004f12 <__retarget_lock_init_recursive>
 8004e84:	f7ff ff96 	bl	8004db4 <__sfp_lock_release>
 8004e88:	2208      	movs	r2, #8
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e94:	6025      	str	r5, [r4, #0]
 8004e96:	61a5      	str	r5, [r4, #24]
 8004e98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e9c:	f7ff ff04 	bl	8004ca8 <memset>
 8004ea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eac:	3468      	adds	r4, #104	; 0x68
 8004eae:	e7d9      	b.n	8004e64 <__sfp+0x1c>
 8004eb0:	2104      	movs	r1, #4
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f7ff ff62 	bl	8004d7c <__sfmoreglue>
 8004eb8:	4604      	mov	r4, r0
 8004eba:	6030      	str	r0, [r6, #0]
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d1d5      	bne.n	8004e6c <__sfp+0x24>
 8004ec0:	f7ff ff78 	bl	8004db4 <__sfp_lock_release>
 8004ec4:	230c      	movs	r3, #12
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	e7ee      	b.n	8004ea8 <__sfp+0x60>
 8004eca:	bf00      	nop
 8004ecc:	08006040 	.word	0x08006040
 8004ed0:	ffff0001 	.word	0xffff0001

08004ed4 <_fwalk_reent>:
 8004ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed8:	4606      	mov	r6, r0
 8004eda:	4688      	mov	r8, r1
 8004edc:	2700      	movs	r7, #0
 8004ede:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ee2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ee6:	f1b9 0901 	subs.w	r9, r9, #1
 8004eea:	d505      	bpl.n	8004ef8 <_fwalk_reent+0x24>
 8004eec:	6824      	ldr	r4, [r4, #0]
 8004eee:	2c00      	cmp	r4, #0
 8004ef0:	d1f7      	bne.n	8004ee2 <_fwalk_reent+0xe>
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef8:	89ab      	ldrh	r3, [r5, #12]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d907      	bls.n	8004f0e <_fwalk_reent+0x3a>
 8004efe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f02:	3301      	adds	r3, #1
 8004f04:	d003      	beq.n	8004f0e <_fwalk_reent+0x3a>
 8004f06:	4629      	mov	r1, r5
 8004f08:	4630      	mov	r0, r6
 8004f0a:	47c0      	blx	r8
 8004f0c:	4307      	orrs	r7, r0
 8004f0e:	3568      	adds	r5, #104	; 0x68
 8004f10:	e7e9      	b.n	8004ee6 <_fwalk_reent+0x12>

08004f12 <__retarget_lock_init_recursive>:
 8004f12:	4770      	bx	lr

08004f14 <__retarget_lock_acquire_recursive>:
 8004f14:	4770      	bx	lr

08004f16 <__retarget_lock_release_recursive>:
 8004f16:	4770      	bx	lr

08004f18 <sbrk_aligned>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	4e0e      	ldr	r6, [pc, #56]	; (8004f54 <sbrk_aligned+0x3c>)
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	6831      	ldr	r1, [r6, #0]
 8004f20:	4605      	mov	r5, r0
 8004f22:	b911      	cbnz	r1, 8004f2a <sbrk_aligned+0x12>
 8004f24:	f000 fcd6 	bl	80058d4 <_sbrk_r>
 8004f28:	6030      	str	r0, [r6, #0]
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f000 fcd1 	bl	80058d4 <_sbrk_r>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	d00a      	beq.n	8004f4c <sbrk_aligned+0x34>
 8004f36:	1cc4      	adds	r4, r0, #3
 8004f38:	f024 0403 	bic.w	r4, r4, #3
 8004f3c:	42a0      	cmp	r0, r4
 8004f3e:	d007      	beq.n	8004f50 <sbrk_aligned+0x38>
 8004f40:	1a21      	subs	r1, r4, r0
 8004f42:	4628      	mov	r0, r5
 8004f44:	f000 fcc6 	bl	80058d4 <_sbrk_r>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d101      	bne.n	8004f50 <sbrk_aligned+0x38>
 8004f4c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f50:	4620      	mov	r0, r4
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	20000270 	.word	0x20000270

08004f58 <_malloc_r>:
 8004f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5c:	1ccd      	adds	r5, r1, #3
 8004f5e:	f025 0503 	bic.w	r5, r5, #3
 8004f62:	3508      	adds	r5, #8
 8004f64:	2d0c      	cmp	r5, #12
 8004f66:	bf38      	it	cc
 8004f68:	250c      	movcc	r5, #12
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	db01      	blt.n	8004f74 <_malloc_r+0x1c>
 8004f70:	42a9      	cmp	r1, r5
 8004f72:	d905      	bls.n	8004f80 <_malloc_r+0x28>
 8004f74:	230c      	movs	r3, #12
 8004f76:	2600      	movs	r6, #0
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f80:	4e2e      	ldr	r6, [pc, #184]	; (800503c <_malloc_r+0xe4>)
 8004f82:	f000 ff49 	bl	8005e18 <__malloc_lock>
 8004f86:	6833      	ldr	r3, [r6, #0]
 8004f88:	461c      	mov	r4, r3
 8004f8a:	bb34      	cbnz	r4, 8004fda <_malloc_r+0x82>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f7ff ffc2 	bl	8004f18 <sbrk_aligned>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	4604      	mov	r4, r0
 8004f98:	d14d      	bne.n	8005036 <_malloc_r+0xde>
 8004f9a:	6834      	ldr	r4, [r6, #0]
 8004f9c:	4626      	mov	r6, r4
 8004f9e:	2e00      	cmp	r6, #0
 8004fa0:	d140      	bne.n	8005024 <_malloc_r+0xcc>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	eb04 0803 	add.w	r8, r4, r3
 8004fac:	f000 fc92 	bl	80058d4 <_sbrk_r>
 8004fb0:	4580      	cmp	r8, r0
 8004fb2:	d13a      	bne.n	800502a <_malloc_r+0xd2>
 8004fb4:	6821      	ldr	r1, [r4, #0]
 8004fb6:	3503      	adds	r5, #3
 8004fb8:	1a6d      	subs	r5, r5, r1
 8004fba:	f025 0503 	bic.w	r5, r5, #3
 8004fbe:	3508      	adds	r5, #8
 8004fc0:	2d0c      	cmp	r5, #12
 8004fc2:	bf38      	it	cc
 8004fc4:	250c      	movcc	r5, #12
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	4629      	mov	r1, r5
 8004fca:	f7ff ffa5 	bl	8004f18 <sbrk_aligned>
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d02b      	beq.n	800502a <_malloc_r+0xd2>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	442b      	add	r3, r5
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	e00e      	b.n	8004ff8 <_malloc_r+0xa0>
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	1b52      	subs	r2, r2, r5
 8004fde:	d41e      	bmi.n	800501e <_malloc_r+0xc6>
 8004fe0:	2a0b      	cmp	r2, #11
 8004fe2:	d916      	bls.n	8005012 <_malloc_r+0xba>
 8004fe4:	1961      	adds	r1, r4, r5
 8004fe6:	42a3      	cmp	r3, r4
 8004fe8:	6025      	str	r5, [r4, #0]
 8004fea:	bf18      	it	ne
 8004fec:	6059      	strne	r1, [r3, #4]
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	bf08      	it	eq
 8004ff2:	6031      	streq	r1, [r6, #0]
 8004ff4:	5162      	str	r2, [r4, r5]
 8004ff6:	604b      	str	r3, [r1, #4]
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	f104 060b 	add.w	r6, r4, #11
 8004ffe:	f000 ff11 	bl	8005e24 <__malloc_unlock>
 8005002:	f026 0607 	bic.w	r6, r6, #7
 8005006:	1d23      	adds	r3, r4, #4
 8005008:	1af2      	subs	r2, r6, r3
 800500a:	d0b6      	beq.n	8004f7a <_malloc_r+0x22>
 800500c:	1b9b      	subs	r3, r3, r6
 800500e:	50a3      	str	r3, [r4, r2]
 8005010:	e7b3      	b.n	8004f7a <_malloc_r+0x22>
 8005012:	6862      	ldr	r2, [r4, #4]
 8005014:	42a3      	cmp	r3, r4
 8005016:	bf0c      	ite	eq
 8005018:	6032      	streq	r2, [r6, #0]
 800501a:	605a      	strne	r2, [r3, #4]
 800501c:	e7ec      	b.n	8004ff8 <_malloc_r+0xa0>
 800501e:	4623      	mov	r3, r4
 8005020:	6864      	ldr	r4, [r4, #4]
 8005022:	e7b2      	b.n	8004f8a <_malloc_r+0x32>
 8005024:	4634      	mov	r4, r6
 8005026:	6876      	ldr	r6, [r6, #4]
 8005028:	e7b9      	b.n	8004f9e <_malloc_r+0x46>
 800502a:	230c      	movs	r3, #12
 800502c:	4638      	mov	r0, r7
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	f000 fef8 	bl	8005e24 <__malloc_unlock>
 8005034:	e7a1      	b.n	8004f7a <_malloc_r+0x22>
 8005036:	6025      	str	r5, [r4, #0]
 8005038:	e7de      	b.n	8004ff8 <_malloc_r+0xa0>
 800503a:	bf00      	nop
 800503c:	2000026c 	.word	0x2000026c

08005040 <__ssputs_r>:
 8005040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	688e      	ldr	r6, [r1, #8]
 8005046:	4682      	mov	sl, r0
 8005048:	429e      	cmp	r6, r3
 800504a:	460c      	mov	r4, r1
 800504c:	4690      	mov	r8, r2
 800504e:	461f      	mov	r7, r3
 8005050:	d838      	bhi.n	80050c4 <__ssputs_r+0x84>
 8005052:	898a      	ldrh	r2, [r1, #12]
 8005054:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005058:	d032      	beq.n	80050c0 <__ssputs_r+0x80>
 800505a:	6825      	ldr	r5, [r4, #0]
 800505c:	6909      	ldr	r1, [r1, #16]
 800505e:	3301      	adds	r3, #1
 8005060:	eba5 0901 	sub.w	r9, r5, r1
 8005064:	6965      	ldr	r5, [r4, #20]
 8005066:	444b      	add	r3, r9
 8005068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800506c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005070:	106d      	asrs	r5, r5, #1
 8005072:	429d      	cmp	r5, r3
 8005074:	bf38      	it	cc
 8005076:	461d      	movcc	r5, r3
 8005078:	0553      	lsls	r3, r2, #21
 800507a:	d531      	bpl.n	80050e0 <__ssputs_r+0xa0>
 800507c:	4629      	mov	r1, r5
 800507e:	f7ff ff6b 	bl	8004f58 <_malloc_r>
 8005082:	4606      	mov	r6, r0
 8005084:	b950      	cbnz	r0, 800509c <__ssputs_r+0x5c>
 8005086:	230c      	movs	r3, #12
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
 800508c:	f8ca 3000 	str.w	r3, [sl]
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005096:	81a3      	strh	r3, [r4, #12]
 8005098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509c:	464a      	mov	r2, r9
 800509e:	6921      	ldr	r1, [r4, #16]
 80050a0:	f000 fe92 	bl	8005dc8 <memcpy>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	6126      	str	r6, [r4, #16]
 80050b2:	444e      	add	r6, r9
 80050b4:	6026      	str	r6, [r4, #0]
 80050b6:	463e      	mov	r6, r7
 80050b8:	6165      	str	r5, [r4, #20]
 80050ba:	eba5 0509 	sub.w	r5, r5, r9
 80050be:	60a5      	str	r5, [r4, #8]
 80050c0:	42be      	cmp	r6, r7
 80050c2:	d900      	bls.n	80050c6 <__ssputs_r+0x86>
 80050c4:	463e      	mov	r6, r7
 80050c6:	4632      	mov	r2, r6
 80050c8:	4641      	mov	r1, r8
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	f000 fe8a 	bl	8005de4 <memmove>
 80050d0:	68a3      	ldr	r3, [r4, #8]
 80050d2:	2000      	movs	r0, #0
 80050d4:	1b9b      	subs	r3, r3, r6
 80050d6:	60a3      	str	r3, [r4, #8]
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	4433      	add	r3, r6
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	e7db      	b.n	8005098 <__ssputs_r+0x58>
 80050e0:	462a      	mov	r2, r5
 80050e2:	f000 feed 	bl	8005ec0 <_realloc_r>
 80050e6:	4606      	mov	r6, r0
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d1e1      	bne.n	80050b0 <__ssputs_r+0x70>
 80050ec:	4650      	mov	r0, sl
 80050ee:	6921      	ldr	r1, [r4, #16]
 80050f0:	f000 fe9e 	bl	8005e30 <_free_r>
 80050f4:	e7c7      	b.n	8005086 <__ssputs_r+0x46>
	...

080050f8 <_svfiprintf_r>:
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	4698      	mov	r8, r3
 80050fe:	898b      	ldrh	r3, [r1, #12]
 8005100:	4607      	mov	r7, r0
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	460d      	mov	r5, r1
 8005106:	4614      	mov	r4, r2
 8005108:	b09d      	sub	sp, #116	; 0x74
 800510a:	d50e      	bpl.n	800512a <_svfiprintf_r+0x32>
 800510c:	690b      	ldr	r3, [r1, #16]
 800510e:	b963      	cbnz	r3, 800512a <_svfiprintf_r+0x32>
 8005110:	2140      	movs	r1, #64	; 0x40
 8005112:	f7ff ff21 	bl	8004f58 <_malloc_r>
 8005116:	6028      	str	r0, [r5, #0]
 8005118:	6128      	str	r0, [r5, #16]
 800511a:	b920      	cbnz	r0, 8005126 <_svfiprintf_r+0x2e>
 800511c:	230c      	movs	r3, #12
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	e0d1      	b.n	80052ca <_svfiprintf_r+0x1d2>
 8005126:	2340      	movs	r3, #64	; 0x40
 8005128:	616b      	str	r3, [r5, #20]
 800512a:	2300      	movs	r3, #0
 800512c:	9309      	str	r3, [sp, #36]	; 0x24
 800512e:	2320      	movs	r3, #32
 8005130:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005134:	2330      	movs	r3, #48	; 0x30
 8005136:	f04f 0901 	mov.w	r9, #1
 800513a:	f8cd 800c 	str.w	r8, [sp, #12]
 800513e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052e4 <_svfiprintf_r+0x1ec>
 8005142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005146:	4623      	mov	r3, r4
 8005148:	469a      	mov	sl, r3
 800514a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800514e:	b10a      	cbz	r2, 8005154 <_svfiprintf_r+0x5c>
 8005150:	2a25      	cmp	r2, #37	; 0x25
 8005152:	d1f9      	bne.n	8005148 <_svfiprintf_r+0x50>
 8005154:	ebba 0b04 	subs.w	fp, sl, r4
 8005158:	d00b      	beq.n	8005172 <_svfiprintf_r+0x7a>
 800515a:	465b      	mov	r3, fp
 800515c:	4622      	mov	r2, r4
 800515e:	4629      	mov	r1, r5
 8005160:	4638      	mov	r0, r7
 8005162:	f7ff ff6d 	bl	8005040 <__ssputs_r>
 8005166:	3001      	adds	r0, #1
 8005168:	f000 80aa 	beq.w	80052c0 <_svfiprintf_r+0x1c8>
 800516c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800516e:	445a      	add	r2, fp
 8005170:	9209      	str	r2, [sp, #36]	; 0x24
 8005172:	f89a 3000 	ldrb.w	r3, [sl]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80a2 	beq.w	80052c0 <_svfiprintf_r+0x1c8>
 800517c:	2300      	movs	r3, #0
 800517e:	f04f 32ff 	mov.w	r2, #4294967295
 8005182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005186:	f10a 0a01 	add.w	sl, sl, #1
 800518a:	9304      	str	r3, [sp, #16]
 800518c:	9307      	str	r3, [sp, #28]
 800518e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005192:	931a      	str	r3, [sp, #104]	; 0x68
 8005194:	4654      	mov	r4, sl
 8005196:	2205      	movs	r2, #5
 8005198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519c:	4851      	ldr	r0, [pc, #324]	; (80052e4 <_svfiprintf_r+0x1ec>)
 800519e:	f000 fe05 	bl	8005dac <memchr>
 80051a2:	9a04      	ldr	r2, [sp, #16]
 80051a4:	b9d8      	cbnz	r0, 80051de <_svfiprintf_r+0xe6>
 80051a6:	06d0      	lsls	r0, r2, #27
 80051a8:	bf44      	itt	mi
 80051aa:	2320      	movmi	r3, #32
 80051ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b0:	0711      	lsls	r1, r2, #28
 80051b2:	bf44      	itt	mi
 80051b4:	232b      	movmi	r3, #43	; 0x2b
 80051b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ba:	f89a 3000 	ldrb.w	r3, [sl]
 80051be:	2b2a      	cmp	r3, #42	; 0x2a
 80051c0:	d015      	beq.n	80051ee <_svfiprintf_r+0xf6>
 80051c2:	4654      	mov	r4, sl
 80051c4:	2000      	movs	r0, #0
 80051c6:	f04f 0c0a 	mov.w	ip, #10
 80051ca:	9a07      	ldr	r2, [sp, #28]
 80051cc:	4621      	mov	r1, r4
 80051ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d2:	3b30      	subs	r3, #48	; 0x30
 80051d4:	2b09      	cmp	r3, #9
 80051d6:	d94e      	bls.n	8005276 <_svfiprintf_r+0x17e>
 80051d8:	b1b0      	cbz	r0, 8005208 <_svfiprintf_r+0x110>
 80051da:	9207      	str	r2, [sp, #28]
 80051dc:	e014      	b.n	8005208 <_svfiprintf_r+0x110>
 80051de:	eba0 0308 	sub.w	r3, r0, r8
 80051e2:	fa09 f303 	lsl.w	r3, r9, r3
 80051e6:	4313      	orrs	r3, r2
 80051e8:	46a2      	mov	sl, r4
 80051ea:	9304      	str	r3, [sp, #16]
 80051ec:	e7d2      	b.n	8005194 <_svfiprintf_r+0x9c>
 80051ee:	9b03      	ldr	r3, [sp, #12]
 80051f0:	1d19      	adds	r1, r3, #4
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	9103      	str	r1, [sp, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bfbb      	ittet	lt
 80051fa:	425b      	neglt	r3, r3
 80051fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005200:	9307      	strge	r3, [sp, #28]
 8005202:	9307      	strlt	r3, [sp, #28]
 8005204:	bfb8      	it	lt
 8005206:	9204      	strlt	r2, [sp, #16]
 8005208:	7823      	ldrb	r3, [r4, #0]
 800520a:	2b2e      	cmp	r3, #46	; 0x2e
 800520c:	d10c      	bne.n	8005228 <_svfiprintf_r+0x130>
 800520e:	7863      	ldrb	r3, [r4, #1]
 8005210:	2b2a      	cmp	r3, #42	; 0x2a
 8005212:	d135      	bne.n	8005280 <_svfiprintf_r+0x188>
 8005214:	9b03      	ldr	r3, [sp, #12]
 8005216:	3402      	adds	r4, #2
 8005218:	1d1a      	adds	r2, r3, #4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	9203      	str	r2, [sp, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfb8      	it	lt
 8005222:	f04f 33ff 	movlt.w	r3, #4294967295
 8005226:	9305      	str	r3, [sp, #20]
 8005228:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80052e8 <_svfiprintf_r+0x1f0>
 800522c:	2203      	movs	r2, #3
 800522e:	4650      	mov	r0, sl
 8005230:	7821      	ldrb	r1, [r4, #0]
 8005232:	f000 fdbb 	bl	8005dac <memchr>
 8005236:	b140      	cbz	r0, 800524a <_svfiprintf_r+0x152>
 8005238:	2340      	movs	r3, #64	; 0x40
 800523a:	eba0 000a 	sub.w	r0, r0, sl
 800523e:	fa03 f000 	lsl.w	r0, r3, r0
 8005242:	9b04      	ldr	r3, [sp, #16]
 8005244:	3401      	adds	r4, #1
 8005246:	4303      	orrs	r3, r0
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524e:	2206      	movs	r2, #6
 8005250:	4826      	ldr	r0, [pc, #152]	; (80052ec <_svfiprintf_r+0x1f4>)
 8005252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005256:	f000 fda9 	bl	8005dac <memchr>
 800525a:	2800      	cmp	r0, #0
 800525c:	d038      	beq.n	80052d0 <_svfiprintf_r+0x1d8>
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <_svfiprintf_r+0x1f8>)
 8005260:	bb1b      	cbnz	r3, 80052aa <_svfiprintf_r+0x1b2>
 8005262:	9b03      	ldr	r3, [sp, #12]
 8005264:	3307      	adds	r3, #7
 8005266:	f023 0307 	bic.w	r3, r3, #7
 800526a:	3308      	adds	r3, #8
 800526c:	9303      	str	r3, [sp, #12]
 800526e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005270:	4433      	add	r3, r6
 8005272:	9309      	str	r3, [sp, #36]	; 0x24
 8005274:	e767      	b.n	8005146 <_svfiprintf_r+0x4e>
 8005276:	460c      	mov	r4, r1
 8005278:	2001      	movs	r0, #1
 800527a:	fb0c 3202 	mla	r2, ip, r2, r3
 800527e:	e7a5      	b.n	80051cc <_svfiprintf_r+0xd4>
 8005280:	2300      	movs	r3, #0
 8005282:	f04f 0c0a 	mov.w	ip, #10
 8005286:	4619      	mov	r1, r3
 8005288:	3401      	adds	r4, #1
 800528a:	9305      	str	r3, [sp, #20]
 800528c:	4620      	mov	r0, r4
 800528e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005292:	3a30      	subs	r2, #48	; 0x30
 8005294:	2a09      	cmp	r2, #9
 8005296:	d903      	bls.n	80052a0 <_svfiprintf_r+0x1a8>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0c5      	beq.n	8005228 <_svfiprintf_r+0x130>
 800529c:	9105      	str	r1, [sp, #20]
 800529e:	e7c3      	b.n	8005228 <_svfiprintf_r+0x130>
 80052a0:	4604      	mov	r4, r0
 80052a2:	2301      	movs	r3, #1
 80052a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80052a8:	e7f0      	b.n	800528c <_svfiprintf_r+0x194>
 80052aa:	ab03      	add	r3, sp, #12
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	462a      	mov	r2, r5
 80052b0:	4638      	mov	r0, r7
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <_svfiprintf_r+0x1fc>)
 80052b4:	a904      	add	r1, sp, #16
 80052b6:	f3af 8000 	nop.w
 80052ba:	1c42      	adds	r2, r0, #1
 80052bc:	4606      	mov	r6, r0
 80052be:	d1d6      	bne.n	800526e <_svfiprintf_r+0x176>
 80052c0:	89ab      	ldrh	r3, [r5, #12]
 80052c2:	065b      	lsls	r3, r3, #25
 80052c4:	f53f af2c 	bmi.w	8005120 <_svfiprintf_r+0x28>
 80052c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ca:	b01d      	add	sp, #116	; 0x74
 80052cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d0:	ab03      	add	r3, sp, #12
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	462a      	mov	r2, r5
 80052d6:	4638      	mov	r0, r7
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <_svfiprintf_r+0x1fc>)
 80052da:	a904      	add	r1, sp, #16
 80052dc:	f000 f9d4 	bl	8005688 <_printf_i>
 80052e0:	e7eb      	b.n	80052ba <_svfiprintf_r+0x1c2>
 80052e2:	bf00      	nop
 80052e4:	080060a4 	.word	0x080060a4
 80052e8:	080060aa 	.word	0x080060aa
 80052ec:	080060ae 	.word	0x080060ae
 80052f0:	00000000 	.word	0x00000000
 80052f4:	08005041 	.word	0x08005041

080052f8 <__sfputc_r>:
 80052f8:	6893      	ldr	r3, [r2, #8]
 80052fa:	b410      	push	{r4}
 80052fc:	3b01      	subs	r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	6093      	str	r3, [r2, #8]
 8005302:	da07      	bge.n	8005314 <__sfputc_r+0x1c>
 8005304:	6994      	ldr	r4, [r2, #24]
 8005306:	42a3      	cmp	r3, r4
 8005308:	db01      	blt.n	800530e <__sfputc_r+0x16>
 800530a:	290a      	cmp	r1, #10
 800530c:	d102      	bne.n	8005314 <__sfputc_r+0x1c>
 800530e:	bc10      	pop	{r4}
 8005310:	f000 bb34 	b.w	800597c <__swbuf_r>
 8005314:	6813      	ldr	r3, [r2, #0]
 8005316:	1c58      	adds	r0, r3, #1
 8005318:	6010      	str	r0, [r2, #0]
 800531a:	7019      	strb	r1, [r3, #0]
 800531c:	4608      	mov	r0, r1
 800531e:	bc10      	pop	{r4}
 8005320:	4770      	bx	lr

08005322 <__sfputs_r>:
 8005322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005324:	4606      	mov	r6, r0
 8005326:	460f      	mov	r7, r1
 8005328:	4614      	mov	r4, r2
 800532a:	18d5      	adds	r5, r2, r3
 800532c:	42ac      	cmp	r4, r5
 800532e:	d101      	bne.n	8005334 <__sfputs_r+0x12>
 8005330:	2000      	movs	r0, #0
 8005332:	e007      	b.n	8005344 <__sfputs_r+0x22>
 8005334:	463a      	mov	r2, r7
 8005336:	4630      	mov	r0, r6
 8005338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800533c:	f7ff ffdc 	bl	80052f8 <__sfputc_r>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d1f3      	bne.n	800532c <__sfputs_r+0xa>
 8005344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005348 <_vfiprintf_r>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	460d      	mov	r5, r1
 800534e:	4614      	mov	r4, r2
 8005350:	4698      	mov	r8, r3
 8005352:	4606      	mov	r6, r0
 8005354:	b09d      	sub	sp, #116	; 0x74
 8005356:	b118      	cbz	r0, 8005360 <_vfiprintf_r+0x18>
 8005358:	6983      	ldr	r3, [r0, #24]
 800535a:	b90b      	cbnz	r3, 8005360 <_vfiprintf_r+0x18>
 800535c:	f7ff fd3c 	bl	8004dd8 <__sinit>
 8005360:	4b89      	ldr	r3, [pc, #548]	; (8005588 <_vfiprintf_r+0x240>)
 8005362:	429d      	cmp	r5, r3
 8005364:	d11b      	bne.n	800539e <_vfiprintf_r+0x56>
 8005366:	6875      	ldr	r5, [r6, #4]
 8005368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800536a:	07d9      	lsls	r1, r3, #31
 800536c:	d405      	bmi.n	800537a <_vfiprintf_r+0x32>
 800536e:	89ab      	ldrh	r3, [r5, #12]
 8005370:	059a      	lsls	r2, r3, #22
 8005372:	d402      	bmi.n	800537a <_vfiprintf_r+0x32>
 8005374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005376:	f7ff fdcd 	bl	8004f14 <__retarget_lock_acquire_recursive>
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	071b      	lsls	r3, r3, #28
 800537e:	d501      	bpl.n	8005384 <_vfiprintf_r+0x3c>
 8005380:	692b      	ldr	r3, [r5, #16]
 8005382:	b9eb      	cbnz	r3, 80053c0 <_vfiprintf_r+0x78>
 8005384:	4629      	mov	r1, r5
 8005386:	4630      	mov	r0, r6
 8005388:	f000 fb5c 	bl	8005a44 <__swsetup_r>
 800538c:	b1c0      	cbz	r0, 80053c0 <_vfiprintf_r+0x78>
 800538e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005390:	07dc      	lsls	r4, r3, #31
 8005392:	d50e      	bpl.n	80053b2 <_vfiprintf_r+0x6a>
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	b01d      	add	sp, #116	; 0x74
 800539a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800539e:	4b7b      	ldr	r3, [pc, #492]	; (800558c <_vfiprintf_r+0x244>)
 80053a0:	429d      	cmp	r5, r3
 80053a2:	d101      	bne.n	80053a8 <_vfiprintf_r+0x60>
 80053a4:	68b5      	ldr	r5, [r6, #8]
 80053a6:	e7df      	b.n	8005368 <_vfiprintf_r+0x20>
 80053a8:	4b79      	ldr	r3, [pc, #484]	; (8005590 <_vfiprintf_r+0x248>)
 80053aa:	429d      	cmp	r5, r3
 80053ac:	bf08      	it	eq
 80053ae:	68f5      	ldreq	r5, [r6, #12]
 80053b0:	e7da      	b.n	8005368 <_vfiprintf_r+0x20>
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	0598      	lsls	r0, r3, #22
 80053b6:	d4ed      	bmi.n	8005394 <_vfiprintf_r+0x4c>
 80053b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ba:	f7ff fdac 	bl	8004f16 <__retarget_lock_release_recursive>
 80053be:	e7e9      	b.n	8005394 <_vfiprintf_r+0x4c>
 80053c0:	2300      	movs	r3, #0
 80053c2:	9309      	str	r3, [sp, #36]	; 0x24
 80053c4:	2320      	movs	r3, #32
 80053c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053ca:	2330      	movs	r3, #48	; 0x30
 80053cc:	f04f 0901 	mov.w	r9, #1
 80053d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005594 <_vfiprintf_r+0x24c>
 80053d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053dc:	4623      	mov	r3, r4
 80053de:	469a      	mov	sl, r3
 80053e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e4:	b10a      	cbz	r2, 80053ea <_vfiprintf_r+0xa2>
 80053e6:	2a25      	cmp	r2, #37	; 0x25
 80053e8:	d1f9      	bne.n	80053de <_vfiprintf_r+0x96>
 80053ea:	ebba 0b04 	subs.w	fp, sl, r4
 80053ee:	d00b      	beq.n	8005408 <_vfiprintf_r+0xc0>
 80053f0:	465b      	mov	r3, fp
 80053f2:	4622      	mov	r2, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	4630      	mov	r0, r6
 80053f8:	f7ff ff93 	bl	8005322 <__sfputs_r>
 80053fc:	3001      	adds	r0, #1
 80053fe:	f000 80aa 	beq.w	8005556 <_vfiprintf_r+0x20e>
 8005402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005404:	445a      	add	r2, fp
 8005406:	9209      	str	r2, [sp, #36]	; 0x24
 8005408:	f89a 3000 	ldrb.w	r3, [sl]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80a2 	beq.w	8005556 <_vfiprintf_r+0x20e>
 8005412:	2300      	movs	r3, #0
 8005414:	f04f 32ff 	mov.w	r2, #4294967295
 8005418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800541c:	f10a 0a01 	add.w	sl, sl, #1
 8005420:	9304      	str	r3, [sp, #16]
 8005422:	9307      	str	r3, [sp, #28]
 8005424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005428:	931a      	str	r3, [sp, #104]	; 0x68
 800542a:	4654      	mov	r4, sl
 800542c:	2205      	movs	r2, #5
 800542e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005432:	4858      	ldr	r0, [pc, #352]	; (8005594 <_vfiprintf_r+0x24c>)
 8005434:	f000 fcba 	bl	8005dac <memchr>
 8005438:	9a04      	ldr	r2, [sp, #16]
 800543a:	b9d8      	cbnz	r0, 8005474 <_vfiprintf_r+0x12c>
 800543c:	06d1      	lsls	r1, r2, #27
 800543e:	bf44      	itt	mi
 8005440:	2320      	movmi	r3, #32
 8005442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005446:	0713      	lsls	r3, r2, #28
 8005448:	bf44      	itt	mi
 800544a:	232b      	movmi	r3, #43	; 0x2b
 800544c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005450:	f89a 3000 	ldrb.w	r3, [sl]
 8005454:	2b2a      	cmp	r3, #42	; 0x2a
 8005456:	d015      	beq.n	8005484 <_vfiprintf_r+0x13c>
 8005458:	4654      	mov	r4, sl
 800545a:	2000      	movs	r0, #0
 800545c:	f04f 0c0a 	mov.w	ip, #10
 8005460:	9a07      	ldr	r2, [sp, #28]
 8005462:	4621      	mov	r1, r4
 8005464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005468:	3b30      	subs	r3, #48	; 0x30
 800546a:	2b09      	cmp	r3, #9
 800546c:	d94e      	bls.n	800550c <_vfiprintf_r+0x1c4>
 800546e:	b1b0      	cbz	r0, 800549e <_vfiprintf_r+0x156>
 8005470:	9207      	str	r2, [sp, #28]
 8005472:	e014      	b.n	800549e <_vfiprintf_r+0x156>
 8005474:	eba0 0308 	sub.w	r3, r0, r8
 8005478:	fa09 f303 	lsl.w	r3, r9, r3
 800547c:	4313      	orrs	r3, r2
 800547e:	46a2      	mov	sl, r4
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	e7d2      	b.n	800542a <_vfiprintf_r+0xe2>
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	1d19      	adds	r1, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	9103      	str	r1, [sp, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	bfbb      	ittet	lt
 8005490:	425b      	neglt	r3, r3
 8005492:	f042 0202 	orrlt.w	r2, r2, #2
 8005496:	9307      	strge	r3, [sp, #28]
 8005498:	9307      	strlt	r3, [sp, #28]
 800549a:	bfb8      	it	lt
 800549c:	9204      	strlt	r2, [sp, #16]
 800549e:	7823      	ldrb	r3, [r4, #0]
 80054a0:	2b2e      	cmp	r3, #46	; 0x2e
 80054a2:	d10c      	bne.n	80054be <_vfiprintf_r+0x176>
 80054a4:	7863      	ldrb	r3, [r4, #1]
 80054a6:	2b2a      	cmp	r3, #42	; 0x2a
 80054a8:	d135      	bne.n	8005516 <_vfiprintf_r+0x1ce>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	3402      	adds	r4, #2
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	9203      	str	r2, [sp, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bfb8      	it	lt
 80054b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80054bc:	9305      	str	r3, [sp, #20]
 80054be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005598 <_vfiprintf_r+0x250>
 80054c2:	2203      	movs	r2, #3
 80054c4:	4650      	mov	r0, sl
 80054c6:	7821      	ldrb	r1, [r4, #0]
 80054c8:	f000 fc70 	bl	8005dac <memchr>
 80054cc:	b140      	cbz	r0, 80054e0 <_vfiprintf_r+0x198>
 80054ce:	2340      	movs	r3, #64	; 0x40
 80054d0:	eba0 000a 	sub.w	r0, r0, sl
 80054d4:	fa03 f000 	lsl.w	r0, r3, r0
 80054d8:	9b04      	ldr	r3, [sp, #16]
 80054da:	3401      	adds	r4, #1
 80054dc:	4303      	orrs	r3, r0
 80054de:	9304      	str	r3, [sp, #16]
 80054e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e4:	2206      	movs	r2, #6
 80054e6:	482d      	ldr	r0, [pc, #180]	; (800559c <_vfiprintf_r+0x254>)
 80054e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ec:	f000 fc5e 	bl	8005dac <memchr>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d03f      	beq.n	8005574 <_vfiprintf_r+0x22c>
 80054f4:	4b2a      	ldr	r3, [pc, #168]	; (80055a0 <_vfiprintf_r+0x258>)
 80054f6:	bb1b      	cbnz	r3, 8005540 <_vfiprintf_r+0x1f8>
 80054f8:	9b03      	ldr	r3, [sp, #12]
 80054fa:	3307      	adds	r3, #7
 80054fc:	f023 0307 	bic.w	r3, r3, #7
 8005500:	3308      	adds	r3, #8
 8005502:	9303      	str	r3, [sp, #12]
 8005504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005506:	443b      	add	r3, r7
 8005508:	9309      	str	r3, [sp, #36]	; 0x24
 800550a:	e767      	b.n	80053dc <_vfiprintf_r+0x94>
 800550c:	460c      	mov	r4, r1
 800550e:	2001      	movs	r0, #1
 8005510:	fb0c 3202 	mla	r2, ip, r2, r3
 8005514:	e7a5      	b.n	8005462 <_vfiprintf_r+0x11a>
 8005516:	2300      	movs	r3, #0
 8005518:	f04f 0c0a 	mov.w	ip, #10
 800551c:	4619      	mov	r1, r3
 800551e:	3401      	adds	r4, #1
 8005520:	9305      	str	r3, [sp, #20]
 8005522:	4620      	mov	r0, r4
 8005524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005528:	3a30      	subs	r2, #48	; 0x30
 800552a:	2a09      	cmp	r2, #9
 800552c:	d903      	bls.n	8005536 <_vfiprintf_r+0x1ee>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0c5      	beq.n	80054be <_vfiprintf_r+0x176>
 8005532:	9105      	str	r1, [sp, #20]
 8005534:	e7c3      	b.n	80054be <_vfiprintf_r+0x176>
 8005536:	4604      	mov	r4, r0
 8005538:	2301      	movs	r3, #1
 800553a:	fb0c 2101 	mla	r1, ip, r1, r2
 800553e:	e7f0      	b.n	8005522 <_vfiprintf_r+0x1da>
 8005540:	ab03      	add	r3, sp, #12
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	462a      	mov	r2, r5
 8005546:	4630      	mov	r0, r6
 8005548:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <_vfiprintf_r+0x25c>)
 800554a:	a904      	add	r1, sp, #16
 800554c:	f3af 8000 	nop.w
 8005550:	4607      	mov	r7, r0
 8005552:	1c78      	adds	r0, r7, #1
 8005554:	d1d6      	bne.n	8005504 <_vfiprintf_r+0x1bc>
 8005556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005558:	07d9      	lsls	r1, r3, #31
 800555a:	d405      	bmi.n	8005568 <_vfiprintf_r+0x220>
 800555c:	89ab      	ldrh	r3, [r5, #12]
 800555e:	059a      	lsls	r2, r3, #22
 8005560:	d402      	bmi.n	8005568 <_vfiprintf_r+0x220>
 8005562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005564:	f7ff fcd7 	bl	8004f16 <__retarget_lock_release_recursive>
 8005568:	89ab      	ldrh	r3, [r5, #12]
 800556a:	065b      	lsls	r3, r3, #25
 800556c:	f53f af12 	bmi.w	8005394 <_vfiprintf_r+0x4c>
 8005570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005572:	e711      	b.n	8005398 <_vfiprintf_r+0x50>
 8005574:	ab03      	add	r3, sp, #12
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	462a      	mov	r2, r5
 800557a:	4630      	mov	r0, r6
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <_vfiprintf_r+0x25c>)
 800557e:	a904      	add	r1, sp, #16
 8005580:	f000 f882 	bl	8005688 <_printf_i>
 8005584:	e7e4      	b.n	8005550 <_vfiprintf_r+0x208>
 8005586:	bf00      	nop
 8005588:	08006064 	.word	0x08006064
 800558c:	08006084 	.word	0x08006084
 8005590:	08006044 	.word	0x08006044
 8005594:	080060a4 	.word	0x080060a4
 8005598:	080060aa 	.word	0x080060aa
 800559c:	080060ae 	.word	0x080060ae
 80055a0:	00000000 	.word	0x00000000
 80055a4:	08005323 	.word	0x08005323

080055a8 <_printf_common>:
 80055a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	4616      	mov	r6, r2
 80055ae:	4699      	mov	r9, r3
 80055b0:	688a      	ldr	r2, [r1, #8]
 80055b2:	690b      	ldr	r3, [r1, #16]
 80055b4:	4607      	mov	r7, r0
 80055b6:	4293      	cmp	r3, r2
 80055b8:	bfb8      	it	lt
 80055ba:	4613      	movlt	r3, r2
 80055bc:	6033      	str	r3, [r6, #0]
 80055be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055c2:	460c      	mov	r4, r1
 80055c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055c8:	b10a      	cbz	r2, 80055ce <_printf_common+0x26>
 80055ca:	3301      	adds	r3, #1
 80055cc:	6033      	str	r3, [r6, #0]
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	0699      	lsls	r1, r3, #26
 80055d2:	bf42      	ittt	mi
 80055d4:	6833      	ldrmi	r3, [r6, #0]
 80055d6:	3302      	addmi	r3, #2
 80055d8:	6033      	strmi	r3, [r6, #0]
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	f015 0506 	ands.w	r5, r5, #6
 80055e0:	d106      	bne.n	80055f0 <_printf_common+0x48>
 80055e2:	f104 0a19 	add.w	sl, r4, #25
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	6832      	ldr	r2, [r6, #0]
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	42ab      	cmp	r3, r5
 80055ee:	dc28      	bgt.n	8005642 <_printf_common+0x9a>
 80055f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055f4:	1e13      	subs	r3, r2, #0
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	bf18      	it	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	0692      	lsls	r2, r2, #26
 80055fe:	d42d      	bmi.n	800565c <_printf_common+0xb4>
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005608:	47c0      	blx	r8
 800560a:	3001      	adds	r0, #1
 800560c:	d020      	beq.n	8005650 <_printf_common+0xa8>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	68e5      	ldr	r5, [r4, #12]
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	2b04      	cmp	r3, #4
 8005618:	bf18      	it	ne
 800561a:	2500      	movne	r5, #0
 800561c:	6832      	ldr	r2, [r6, #0]
 800561e:	f04f 0600 	mov.w	r6, #0
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	bf08      	it	eq
 8005626:	1aad      	subeq	r5, r5, r2
 8005628:	6922      	ldr	r2, [r4, #16]
 800562a:	bf08      	it	eq
 800562c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005630:	4293      	cmp	r3, r2
 8005632:	bfc4      	itt	gt
 8005634:	1a9b      	subgt	r3, r3, r2
 8005636:	18ed      	addgt	r5, r5, r3
 8005638:	341a      	adds	r4, #26
 800563a:	42b5      	cmp	r5, r6
 800563c:	d11a      	bne.n	8005674 <_printf_common+0xcc>
 800563e:	2000      	movs	r0, #0
 8005640:	e008      	b.n	8005654 <_printf_common+0xac>
 8005642:	2301      	movs	r3, #1
 8005644:	4652      	mov	r2, sl
 8005646:	4649      	mov	r1, r9
 8005648:	4638      	mov	r0, r7
 800564a:	47c0      	blx	r8
 800564c:	3001      	adds	r0, #1
 800564e:	d103      	bne.n	8005658 <_printf_common+0xb0>
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005658:	3501      	adds	r5, #1
 800565a:	e7c4      	b.n	80055e6 <_printf_common+0x3e>
 800565c:	2030      	movs	r0, #48	; 0x30
 800565e:	18e1      	adds	r1, r4, r3
 8005660:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800566a:	4422      	add	r2, r4
 800566c:	3302      	adds	r3, #2
 800566e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005672:	e7c5      	b.n	8005600 <_printf_common+0x58>
 8005674:	2301      	movs	r3, #1
 8005676:	4622      	mov	r2, r4
 8005678:	4649      	mov	r1, r9
 800567a:	4638      	mov	r0, r7
 800567c:	47c0      	blx	r8
 800567e:	3001      	adds	r0, #1
 8005680:	d0e6      	beq.n	8005650 <_printf_common+0xa8>
 8005682:	3601      	adds	r6, #1
 8005684:	e7d9      	b.n	800563a <_printf_common+0x92>
	...

08005688 <_printf_i>:
 8005688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	7e0f      	ldrb	r7, [r1, #24]
 800568e:	4691      	mov	r9, r2
 8005690:	2f78      	cmp	r7, #120	; 0x78
 8005692:	4680      	mov	r8, r0
 8005694:	460c      	mov	r4, r1
 8005696:	469a      	mov	sl, r3
 8005698:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800569a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800569e:	d807      	bhi.n	80056b0 <_printf_i+0x28>
 80056a0:	2f62      	cmp	r7, #98	; 0x62
 80056a2:	d80a      	bhi.n	80056ba <_printf_i+0x32>
 80056a4:	2f00      	cmp	r7, #0
 80056a6:	f000 80d9 	beq.w	800585c <_printf_i+0x1d4>
 80056aa:	2f58      	cmp	r7, #88	; 0x58
 80056ac:	f000 80a4 	beq.w	80057f8 <_printf_i+0x170>
 80056b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056b8:	e03a      	b.n	8005730 <_printf_i+0xa8>
 80056ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056be:	2b15      	cmp	r3, #21
 80056c0:	d8f6      	bhi.n	80056b0 <_printf_i+0x28>
 80056c2:	a101      	add	r1, pc, #4	; (adr r1, 80056c8 <_printf_i+0x40>)
 80056c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056c8:	08005721 	.word	0x08005721
 80056cc:	08005735 	.word	0x08005735
 80056d0:	080056b1 	.word	0x080056b1
 80056d4:	080056b1 	.word	0x080056b1
 80056d8:	080056b1 	.word	0x080056b1
 80056dc:	080056b1 	.word	0x080056b1
 80056e0:	08005735 	.word	0x08005735
 80056e4:	080056b1 	.word	0x080056b1
 80056e8:	080056b1 	.word	0x080056b1
 80056ec:	080056b1 	.word	0x080056b1
 80056f0:	080056b1 	.word	0x080056b1
 80056f4:	08005843 	.word	0x08005843
 80056f8:	08005765 	.word	0x08005765
 80056fc:	08005825 	.word	0x08005825
 8005700:	080056b1 	.word	0x080056b1
 8005704:	080056b1 	.word	0x080056b1
 8005708:	08005865 	.word	0x08005865
 800570c:	080056b1 	.word	0x080056b1
 8005710:	08005765 	.word	0x08005765
 8005714:	080056b1 	.word	0x080056b1
 8005718:	080056b1 	.word	0x080056b1
 800571c:	0800582d 	.word	0x0800582d
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	602a      	str	r2, [r5, #0]
 8005728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800572c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005730:	2301      	movs	r3, #1
 8005732:	e0a4      	b.n	800587e <_printf_i+0x1f6>
 8005734:	6820      	ldr	r0, [r4, #0]
 8005736:	6829      	ldr	r1, [r5, #0]
 8005738:	0606      	lsls	r6, r0, #24
 800573a:	f101 0304 	add.w	r3, r1, #4
 800573e:	d50a      	bpl.n	8005756 <_printf_i+0xce>
 8005740:	680e      	ldr	r6, [r1, #0]
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	2e00      	cmp	r6, #0
 8005746:	da03      	bge.n	8005750 <_printf_i+0xc8>
 8005748:	232d      	movs	r3, #45	; 0x2d
 800574a:	4276      	negs	r6, r6
 800574c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005750:	230a      	movs	r3, #10
 8005752:	485e      	ldr	r0, [pc, #376]	; (80058cc <_printf_i+0x244>)
 8005754:	e019      	b.n	800578a <_printf_i+0x102>
 8005756:	680e      	ldr	r6, [r1, #0]
 8005758:	f010 0f40 	tst.w	r0, #64	; 0x40
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	bf18      	it	ne
 8005760:	b236      	sxthne	r6, r6
 8005762:	e7ef      	b.n	8005744 <_printf_i+0xbc>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	1d19      	adds	r1, r3, #4
 800576a:	6029      	str	r1, [r5, #0]
 800576c:	0601      	lsls	r1, r0, #24
 800576e:	d501      	bpl.n	8005774 <_printf_i+0xec>
 8005770:	681e      	ldr	r6, [r3, #0]
 8005772:	e002      	b.n	800577a <_printf_i+0xf2>
 8005774:	0646      	lsls	r6, r0, #25
 8005776:	d5fb      	bpl.n	8005770 <_printf_i+0xe8>
 8005778:	881e      	ldrh	r6, [r3, #0]
 800577a:	2f6f      	cmp	r7, #111	; 0x6f
 800577c:	bf0c      	ite	eq
 800577e:	2308      	moveq	r3, #8
 8005780:	230a      	movne	r3, #10
 8005782:	4852      	ldr	r0, [pc, #328]	; (80058cc <_printf_i+0x244>)
 8005784:	2100      	movs	r1, #0
 8005786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800578a:	6865      	ldr	r5, [r4, #4]
 800578c:	2d00      	cmp	r5, #0
 800578e:	bfa8      	it	ge
 8005790:	6821      	ldrge	r1, [r4, #0]
 8005792:	60a5      	str	r5, [r4, #8]
 8005794:	bfa4      	itt	ge
 8005796:	f021 0104 	bicge.w	r1, r1, #4
 800579a:	6021      	strge	r1, [r4, #0]
 800579c:	b90e      	cbnz	r6, 80057a2 <_printf_i+0x11a>
 800579e:	2d00      	cmp	r5, #0
 80057a0:	d04d      	beq.n	800583e <_printf_i+0x1b6>
 80057a2:	4615      	mov	r5, r2
 80057a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80057a8:	fb03 6711 	mls	r7, r3, r1, r6
 80057ac:	5dc7      	ldrb	r7, [r0, r7]
 80057ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057b2:	4637      	mov	r7, r6
 80057b4:	42bb      	cmp	r3, r7
 80057b6:	460e      	mov	r6, r1
 80057b8:	d9f4      	bls.n	80057a4 <_printf_i+0x11c>
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d10b      	bne.n	80057d6 <_printf_i+0x14e>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	07de      	lsls	r6, r3, #31
 80057c2:	d508      	bpl.n	80057d6 <_printf_i+0x14e>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	6861      	ldr	r1, [r4, #4]
 80057c8:	4299      	cmp	r1, r3
 80057ca:	bfde      	ittt	le
 80057cc:	2330      	movle	r3, #48	; 0x30
 80057ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057d6:	1b52      	subs	r2, r2, r5
 80057d8:	6122      	str	r2, [r4, #16]
 80057da:	464b      	mov	r3, r9
 80057dc:	4621      	mov	r1, r4
 80057de:	4640      	mov	r0, r8
 80057e0:	f8cd a000 	str.w	sl, [sp]
 80057e4:	aa03      	add	r2, sp, #12
 80057e6:	f7ff fedf 	bl	80055a8 <_printf_common>
 80057ea:	3001      	adds	r0, #1
 80057ec:	d14c      	bne.n	8005888 <_printf_i+0x200>
 80057ee:	f04f 30ff 	mov.w	r0, #4294967295
 80057f2:	b004      	add	sp, #16
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f8:	4834      	ldr	r0, [pc, #208]	; (80058cc <_printf_i+0x244>)
 80057fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057fe:	6829      	ldr	r1, [r5, #0]
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	f851 6b04 	ldr.w	r6, [r1], #4
 8005806:	6029      	str	r1, [r5, #0]
 8005808:	061d      	lsls	r5, r3, #24
 800580a:	d514      	bpl.n	8005836 <_printf_i+0x1ae>
 800580c:	07df      	lsls	r7, r3, #31
 800580e:	bf44      	itt	mi
 8005810:	f043 0320 	orrmi.w	r3, r3, #32
 8005814:	6023      	strmi	r3, [r4, #0]
 8005816:	b91e      	cbnz	r6, 8005820 <_printf_i+0x198>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	f023 0320 	bic.w	r3, r3, #32
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	2310      	movs	r3, #16
 8005822:	e7af      	b.n	8005784 <_printf_i+0xfc>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	f043 0320 	orr.w	r3, r3, #32
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	2378      	movs	r3, #120	; 0x78
 800582e:	4828      	ldr	r0, [pc, #160]	; (80058d0 <_printf_i+0x248>)
 8005830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005834:	e7e3      	b.n	80057fe <_printf_i+0x176>
 8005836:	0659      	lsls	r1, r3, #25
 8005838:	bf48      	it	mi
 800583a:	b2b6      	uxthmi	r6, r6
 800583c:	e7e6      	b.n	800580c <_printf_i+0x184>
 800583e:	4615      	mov	r5, r2
 8005840:	e7bb      	b.n	80057ba <_printf_i+0x132>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	6826      	ldr	r6, [r4, #0]
 8005846:	1d18      	adds	r0, r3, #4
 8005848:	6961      	ldr	r1, [r4, #20]
 800584a:	6028      	str	r0, [r5, #0]
 800584c:	0635      	lsls	r5, r6, #24
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	d501      	bpl.n	8005856 <_printf_i+0x1ce>
 8005852:	6019      	str	r1, [r3, #0]
 8005854:	e002      	b.n	800585c <_printf_i+0x1d4>
 8005856:	0670      	lsls	r0, r6, #25
 8005858:	d5fb      	bpl.n	8005852 <_printf_i+0x1ca>
 800585a:	8019      	strh	r1, [r3, #0]
 800585c:	2300      	movs	r3, #0
 800585e:	4615      	mov	r5, r2
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	e7ba      	b.n	80057da <_printf_i+0x152>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	2100      	movs	r1, #0
 8005868:	1d1a      	adds	r2, r3, #4
 800586a:	602a      	str	r2, [r5, #0]
 800586c:	681d      	ldr	r5, [r3, #0]
 800586e:	6862      	ldr	r2, [r4, #4]
 8005870:	4628      	mov	r0, r5
 8005872:	f000 fa9b 	bl	8005dac <memchr>
 8005876:	b108      	cbz	r0, 800587c <_printf_i+0x1f4>
 8005878:	1b40      	subs	r0, r0, r5
 800587a:	6060      	str	r0, [r4, #4]
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	2300      	movs	r3, #0
 8005882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005886:	e7a8      	b.n	80057da <_printf_i+0x152>
 8005888:	462a      	mov	r2, r5
 800588a:	4649      	mov	r1, r9
 800588c:	4640      	mov	r0, r8
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	47d0      	blx	sl
 8005892:	3001      	adds	r0, #1
 8005894:	d0ab      	beq.n	80057ee <_printf_i+0x166>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	079b      	lsls	r3, r3, #30
 800589a:	d413      	bmi.n	80058c4 <_printf_i+0x23c>
 800589c:	68e0      	ldr	r0, [r4, #12]
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	4298      	cmp	r0, r3
 80058a2:	bfb8      	it	lt
 80058a4:	4618      	movlt	r0, r3
 80058a6:	e7a4      	b.n	80057f2 <_printf_i+0x16a>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4632      	mov	r2, r6
 80058ac:	4649      	mov	r1, r9
 80058ae:	4640      	mov	r0, r8
 80058b0:	47d0      	blx	sl
 80058b2:	3001      	adds	r0, #1
 80058b4:	d09b      	beq.n	80057ee <_printf_i+0x166>
 80058b6:	3501      	adds	r5, #1
 80058b8:	68e3      	ldr	r3, [r4, #12]
 80058ba:	9903      	ldr	r1, [sp, #12]
 80058bc:	1a5b      	subs	r3, r3, r1
 80058be:	42ab      	cmp	r3, r5
 80058c0:	dcf2      	bgt.n	80058a8 <_printf_i+0x220>
 80058c2:	e7eb      	b.n	800589c <_printf_i+0x214>
 80058c4:	2500      	movs	r5, #0
 80058c6:	f104 0619 	add.w	r6, r4, #25
 80058ca:	e7f5      	b.n	80058b8 <_printf_i+0x230>
 80058cc:	080060b5 	.word	0x080060b5
 80058d0:	080060c6 	.word	0x080060c6

080058d4 <_sbrk_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	2300      	movs	r3, #0
 80058d8:	4d05      	ldr	r5, [pc, #20]	; (80058f0 <_sbrk_r+0x1c>)
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7fb fc94 	bl	800120c <_sbrk>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_sbrk_r+0x1a>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_sbrk_r+0x1a>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	20000274 	.word	0x20000274

080058f4 <__sread>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	460c      	mov	r4, r1
 80058f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fc:	f000 fb10 	bl	8005f20 <_read_r>
 8005900:	2800      	cmp	r0, #0
 8005902:	bfab      	itete	ge
 8005904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005906:	89a3      	ldrhlt	r3, [r4, #12]
 8005908:	181b      	addge	r3, r3, r0
 800590a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800590e:	bfac      	ite	ge
 8005910:	6563      	strge	r3, [r4, #84]	; 0x54
 8005912:	81a3      	strhlt	r3, [r4, #12]
 8005914:	bd10      	pop	{r4, pc}

08005916 <__swrite>:
 8005916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800591a:	461f      	mov	r7, r3
 800591c:	898b      	ldrh	r3, [r1, #12]
 800591e:	4605      	mov	r5, r0
 8005920:	05db      	lsls	r3, r3, #23
 8005922:	460c      	mov	r4, r1
 8005924:	4616      	mov	r6, r2
 8005926:	d505      	bpl.n	8005934 <__swrite+0x1e>
 8005928:	2302      	movs	r3, #2
 800592a:	2200      	movs	r2, #0
 800592c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005930:	f000 f9c4 	bl	8005cbc <_lseek_r>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	4632      	mov	r2, r6
 8005938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	4628      	mov	r0, r5
 8005940:	463b      	mov	r3, r7
 8005942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800594a:	f000 b869 	b.w	8005a20 <_write_r>

0800594e <__sseek>:
 800594e:	b510      	push	{r4, lr}
 8005950:	460c      	mov	r4, r1
 8005952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005956:	f000 f9b1 	bl	8005cbc <_lseek_r>
 800595a:	1c43      	adds	r3, r0, #1
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	bf15      	itete	ne
 8005960:	6560      	strne	r0, [r4, #84]	; 0x54
 8005962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800596a:	81a3      	strheq	r3, [r4, #12]
 800596c:	bf18      	it	ne
 800596e:	81a3      	strhne	r3, [r4, #12]
 8005970:	bd10      	pop	{r4, pc}

08005972 <__sclose>:
 8005972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005976:	f000 b8d3 	b.w	8005b20 <_close_r>
	...

0800597c <__swbuf_r>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	460e      	mov	r6, r1
 8005980:	4614      	mov	r4, r2
 8005982:	4605      	mov	r5, r0
 8005984:	b118      	cbz	r0, 800598e <__swbuf_r+0x12>
 8005986:	6983      	ldr	r3, [r0, #24]
 8005988:	b90b      	cbnz	r3, 800598e <__swbuf_r+0x12>
 800598a:	f7ff fa25 	bl	8004dd8 <__sinit>
 800598e:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <__swbuf_r+0x98>)
 8005990:	429c      	cmp	r4, r3
 8005992:	d12b      	bne.n	80059ec <__swbuf_r+0x70>
 8005994:	686c      	ldr	r4, [r5, #4]
 8005996:	69a3      	ldr	r3, [r4, #24]
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	071a      	lsls	r2, r3, #28
 800599e:	d52f      	bpl.n	8005a00 <__swbuf_r+0x84>
 80059a0:	6923      	ldr	r3, [r4, #16]
 80059a2:	b36b      	cbz	r3, 8005a00 <__swbuf_r+0x84>
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	6820      	ldr	r0, [r4, #0]
 80059a8:	b2f6      	uxtb	r6, r6
 80059aa:	1ac0      	subs	r0, r0, r3
 80059ac:	6963      	ldr	r3, [r4, #20]
 80059ae:	4637      	mov	r7, r6
 80059b0:	4283      	cmp	r3, r0
 80059b2:	dc04      	bgt.n	80059be <__swbuf_r+0x42>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f944 	bl	8005c44 <_fflush_r>
 80059bc:	bb30      	cbnz	r0, 8005a0c <__swbuf_r+0x90>
 80059be:	68a3      	ldr	r3, [r4, #8]
 80059c0:	3001      	adds	r0, #1
 80059c2:	3b01      	subs	r3, #1
 80059c4:	60a3      	str	r3, [r4, #8]
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	701e      	strb	r6, [r3, #0]
 80059ce:	6963      	ldr	r3, [r4, #20]
 80059d0:	4283      	cmp	r3, r0
 80059d2:	d004      	beq.n	80059de <__swbuf_r+0x62>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	07db      	lsls	r3, r3, #31
 80059d8:	d506      	bpl.n	80059e8 <__swbuf_r+0x6c>
 80059da:	2e0a      	cmp	r6, #10
 80059dc:	d104      	bne.n	80059e8 <__swbuf_r+0x6c>
 80059de:	4621      	mov	r1, r4
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 f92f 	bl	8005c44 <_fflush_r>
 80059e6:	b988      	cbnz	r0, 8005a0c <__swbuf_r+0x90>
 80059e8:	4638      	mov	r0, r7
 80059ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <__swbuf_r+0x9c>)
 80059ee:	429c      	cmp	r4, r3
 80059f0:	d101      	bne.n	80059f6 <__swbuf_r+0x7a>
 80059f2:	68ac      	ldr	r4, [r5, #8]
 80059f4:	e7cf      	b.n	8005996 <__swbuf_r+0x1a>
 80059f6:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <__swbuf_r+0xa0>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	bf08      	it	eq
 80059fc:	68ec      	ldreq	r4, [r5, #12]
 80059fe:	e7ca      	b.n	8005996 <__swbuf_r+0x1a>
 8005a00:	4621      	mov	r1, r4
 8005a02:	4628      	mov	r0, r5
 8005a04:	f000 f81e 	bl	8005a44 <__swsetup_r>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d0cb      	beq.n	80059a4 <__swbuf_r+0x28>
 8005a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a10:	e7ea      	b.n	80059e8 <__swbuf_r+0x6c>
 8005a12:	bf00      	nop
 8005a14:	08006064 	.word	0x08006064
 8005a18:	08006084 	.word	0x08006084
 8005a1c:	08006044 	.word	0x08006044

08005a20 <_write_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	4611      	mov	r1, r2
 8005a28:	2200      	movs	r2, #0
 8005a2a:	4d05      	ldr	r5, [pc, #20]	; (8005a40 <_write_r+0x20>)
 8005a2c:	602a      	str	r2, [r5, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f7fb fb9f 	bl	8001172 <_write>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_write_r+0x1e>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_write_r+0x1e>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	20000274 	.word	0x20000274

08005a44 <__swsetup_r>:
 8005a44:	4b32      	ldr	r3, [pc, #200]	; (8005b10 <__swsetup_r+0xcc>)
 8005a46:	b570      	push	{r4, r5, r6, lr}
 8005a48:	681d      	ldr	r5, [r3, #0]
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	b125      	cbz	r5, 8005a5a <__swsetup_r+0x16>
 8005a50:	69ab      	ldr	r3, [r5, #24]
 8005a52:	b913      	cbnz	r3, 8005a5a <__swsetup_r+0x16>
 8005a54:	4628      	mov	r0, r5
 8005a56:	f7ff f9bf 	bl	8004dd8 <__sinit>
 8005a5a:	4b2e      	ldr	r3, [pc, #184]	; (8005b14 <__swsetup_r+0xd0>)
 8005a5c:	429c      	cmp	r4, r3
 8005a5e:	d10f      	bne.n	8005a80 <__swsetup_r+0x3c>
 8005a60:	686c      	ldr	r4, [r5, #4]
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a68:	0719      	lsls	r1, r3, #28
 8005a6a:	d42c      	bmi.n	8005ac6 <__swsetup_r+0x82>
 8005a6c:	06dd      	lsls	r5, r3, #27
 8005a6e:	d411      	bmi.n	8005a94 <__swsetup_r+0x50>
 8005a70:	2309      	movs	r3, #9
 8005a72:	6033      	str	r3, [r6, #0]
 8005a74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	81a3      	strh	r3, [r4, #12]
 8005a7e:	e03e      	b.n	8005afe <__swsetup_r+0xba>
 8005a80:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <__swsetup_r+0xd4>)
 8005a82:	429c      	cmp	r4, r3
 8005a84:	d101      	bne.n	8005a8a <__swsetup_r+0x46>
 8005a86:	68ac      	ldr	r4, [r5, #8]
 8005a88:	e7eb      	b.n	8005a62 <__swsetup_r+0x1e>
 8005a8a:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <__swsetup_r+0xd8>)
 8005a8c:	429c      	cmp	r4, r3
 8005a8e:	bf08      	it	eq
 8005a90:	68ec      	ldreq	r4, [r5, #12]
 8005a92:	e7e6      	b.n	8005a62 <__swsetup_r+0x1e>
 8005a94:	0758      	lsls	r0, r3, #29
 8005a96:	d512      	bpl.n	8005abe <__swsetup_r+0x7a>
 8005a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a9a:	b141      	cbz	r1, 8005aae <__swsetup_r+0x6a>
 8005a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aa0:	4299      	cmp	r1, r3
 8005aa2:	d002      	beq.n	8005aaa <__swsetup_r+0x66>
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f000 f9c3 	bl	8005e30 <_free_r>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	6363      	str	r3, [r4, #52]	; 0x34
 8005aae:	89a3      	ldrh	r3, [r4, #12]
 8005ab0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ab4:	81a3      	strh	r3, [r4, #12]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	6063      	str	r3, [r4, #4]
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	f043 0308 	orr.w	r3, r3, #8
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	6923      	ldr	r3, [r4, #16]
 8005ac8:	b94b      	cbnz	r3, 8005ade <__swsetup_r+0x9a>
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad4:	d003      	beq.n	8005ade <__swsetup_r+0x9a>
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f000 f927 	bl	8005d2c <__smakebuf_r>
 8005ade:	89a0      	ldrh	r0, [r4, #12]
 8005ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ae4:	f010 0301 	ands.w	r3, r0, #1
 8005ae8:	d00a      	beq.n	8005b00 <__swsetup_r+0xbc>
 8005aea:	2300      	movs	r3, #0
 8005aec:	60a3      	str	r3, [r4, #8]
 8005aee:	6963      	ldr	r3, [r4, #20]
 8005af0:	425b      	negs	r3, r3
 8005af2:	61a3      	str	r3, [r4, #24]
 8005af4:	6923      	ldr	r3, [r4, #16]
 8005af6:	b943      	cbnz	r3, 8005b0a <__swsetup_r+0xc6>
 8005af8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005afc:	d1ba      	bne.n	8005a74 <__swsetup_r+0x30>
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	0781      	lsls	r1, r0, #30
 8005b02:	bf58      	it	pl
 8005b04:	6963      	ldrpl	r3, [r4, #20]
 8005b06:	60a3      	str	r3, [r4, #8]
 8005b08:	e7f4      	b.n	8005af4 <__swsetup_r+0xb0>
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	e7f7      	b.n	8005afe <__swsetup_r+0xba>
 8005b0e:	bf00      	nop
 8005b10:	20000010 	.word	0x20000010
 8005b14:	08006064 	.word	0x08006064
 8005b18:	08006084 	.word	0x08006084
 8005b1c:	08006044 	.word	0x08006044

08005b20 <_close_r>:
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	2300      	movs	r3, #0
 8005b24:	4d05      	ldr	r5, [pc, #20]	; (8005b3c <_close_r+0x1c>)
 8005b26:	4604      	mov	r4, r0
 8005b28:	4608      	mov	r0, r1
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	f7fb fb3d 	bl	80011aa <_close>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d102      	bne.n	8005b3a <_close_r+0x1a>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	b103      	cbz	r3, 8005b3a <_close_r+0x1a>
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	20000274 	.word	0x20000274

08005b40 <__sflush_r>:
 8005b40:	898a      	ldrh	r2, [r1, #12]
 8005b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b44:	4605      	mov	r5, r0
 8005b46:	0710      	lsls	r0, r2, #28
 8005b48:	460c      	mov	r4, r1
 8005b4a:	d457      	bmi.n	8005bfc <__sflush_r+0xbc>
 8005b4c:	684b      	ldr	r3, [r1, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dc04      	bgt.n	8005b5c <__sflush_r+0x1c>
 8005b52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dc01      	bgt.n	8005b5c <__sflush_r+0x1c>
 8005b58:	2000      	movs	r0, #0
 8005b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b5e:	2e00      	cmp	r6, #0
 8005b60:	d0fa      	beq.n	8005b58 <__sflush_r+0x18>
 8005b62:	2300      	movs	r3, #0
 8005b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b68:	682f      	ldr	r7, [r5, #0]
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	d032      	beq.n	8005bd4 <__sflush_r+0x94>
 8005b6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	075a      	lsls	r2, r3, #29
 8005b74:	d505      	bpl.n	8005b82 <__sflush_r+0x42>
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	1ac0      	subs	r0, r0, r3
 8005b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b7c:	b10b      	cbz	r3, 8005b82 <__sflush_r+0x42>
 8005b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b80:	1ac0      	subs	r0, r0, r3
 8005b82:	2300      	movs	r3, #0
 8005b84:	4602      	mov	r2, r0
 8005b86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b88:	4628      	mov	r0, r5
 8005b8a:	6a21      	ldr	r1, [r4, #32]
 8005b8c:	47b0      	blx	r6
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	d106      	bne.n	8005ba2 <__sflush_r+0x62>
 8005b94:	6829      	ldr	r1, [r5, #0]
 8005b96:	291d      	cmp	r1, #29
 8005b98:	d82c      	bhi.n	8005bf4 <__sflush_r+0xb4>
 8005b9a:	4a29      	ldr	r2, [pc, #164]	; (8005c40 <__sflush_r+0x100>)
 8005b9c:	40ca      	lsrs	r2, r1
 8005b9e:	07d6      	lsls	r6, r2, #31
 8005ba0:	d528      	bpl.n	8005bf4 <__sflush_r+0xb4>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	6062      	str	r2, [r4, #4]
 8005ba6:	6922      	ldr	r2, [r4, #16]
 8005ba8:	04d9      	lsls	r1, r3, #19
 8005baa:	6022      	str	r2, [r4, #0]
 8005bac:	d504      	bpl.n	8005bb8 <__sflush_r+0x78>
 8005bae:	1c42      	adds	r2, r0, #1
 8005bb0:	d101      	bne.n	8005bb6 <__sflush_r+0x76>
 8005bb2:	682b      	ldr	r3, [r5, #0]
 8005bb4:	b903      	cbnz	r3, 8005bb8 <__sflush_r+0x78>
 8005bb6:	6560      	str	r0, [r4, #84]	; 0x54
 8005bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bba:	602f      	str	r7, [r5, #0]
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	d0cb      	beq.n	8005b58 <__sflush_r+0x18>
 8005bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	d002      	beq.n	8005bce <__sflush_r+0x8e>
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 f931 	bl	8005e30 <_free_r>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	6360      	str	r0, [r4, #52]	; 0x34
 8005bd2:	e7c2      	b.n	8005b5a <__sflush_r+0x1a>
 8005bd4:	6a21      	ldr	r1, [r4, #32]
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b0      	blx	r6
 8005bdc:	1c41      	adds	r1, r0, #1
 8005bde:	d1c7      	bne.n	8005b70 <__sflush_r+0x30>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0c4      	beq.n	8005b70 <__sflush_r+0x30>
 8005be6:	2b1d      	cmp	r3, #29
 8005be8:	d001      	beq.n	8005bee <__sflush_r+0xae>
 8005bea:	2b16      	cmp	r3, #22
 8005bec:	d101      	bne.n	8005bf2 <__sflush_r+0xb2>
 8005bee:	602f      	str	r7, [r5, #0]
 8005bf0:	e7b2      	b.n	8005b58 <__sflush_r+0x18>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	e7ae      	b.n	8005b5a <__sflush_r+0x1a>
 8005bfc:	690f      	ldr	r7, [r1, #16]
 8005bfe:	2f00      	cmp	r7, #0
 8005c00:	d0aa      	beq.n	8005b58 <__sflush_r+0x18>
 8005c02:	0793      	lsls	r3, r2, #30
 8005c04:	bf18      	it	ne
 8005c06:	2300      	movne	r3, #0
 8005c08:	680e      	ldr	r6, [r1, #0]
 8005c0a:	bf08      	it	eq
 8005c0c:	694b      	ldreq	r3, [r1, #20]
 8005c0e:	1bf6      	subs	r6, r6, r7
 8005c10:	600f      	str	r7, [r1, #0]
 8005c12:	608b      	str	r3, [r1, #8]
 8005c14:	2e00      	cmp	r6, #0
 8005c16:	dd9f      	ble.n	8005b58 <__sflush_r+0x18>
 8005c18:	4633      	mov	r3, r6
 8005c1a:	463a      	mov	r2, r7
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	6a21      	ldr	r1, [r4, #32]
 8005c20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005c24:	47e0      	blx	ip
 8005c26:	2800      	cmp	r0, #0
 8005c28:	dc06      	bgt.n	8005c38 <__sflush_r+0xf8>
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	e790      	b.n	8005b5a <__sflush_r+0x1a>
 8005c38:	4407      	add	r7, r0
 8005c3a:	1a36      	subs	r6, r6, r0
 8005c3c:	e7ea      	b.n	8005c14 <__sflush_r+0xd4>
 8005c3e:	bf00      	nop
 8005c40:	20400001 	.word	0x20400001

08005c44 <_fflush_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	690b      	ldr	r3, [r1, #16]
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	b913      	cbnz	r3, 8005c54 <_fflush_r+0x10>
 8005c4e:	2500      	movs	r5, #0
 8005c50:	4628      	mov	r0, r5
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	b118      	cbz	r0, 8005c5e <_fflush_r+0x1a>
 8005c56:	6983      	ldr	r3, [r0, #24]
 8005c58:	b90b      	cbnz	r3, 8005c5e <_fflush_r+0x1a>
 8005c5a:	f7ff f8bd 	bl	8004dd8 <__sinit>
 8005c5e:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <_fflush_r+0x6c>)
 8005c60:	429c      	cmp	r4, r3
 8005c62:	d11b      	bne.n	8005c9c <_fflush_r+0x58>
 8005c64:	686c      	ldr	r4, [r5, #4]
 8005c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0ef      	beq.n	8005c4e <_fflush_r+0xa>
 8005c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c70:	07d0      	lsls	r0, r2, #31
 8005c72:	d404      	bmi.n	8005c7e <_fflush_r+0x3a>
 8005c74:	0599      	lsls	r1, r3, #22
 8005c76:	d402      	bmi.n	8005c7e <_fflush_r+0x3a>
 8005c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c7a:	f7ff f94b 	bl	8004f14 <__retarget_lock_acquire_recursive>
 8005c7e:	4628      	mov	r0, r5
 8005c80:	4621      	mov	r1, r4
 8005c82:	f7ff ff5d 	bl	8005b40 <__sflush_r>
 8005c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c88:	4605      	mov	r5, r0
 8005c8a:	07da      	lsls	r2, r3, #31
 8005c8c:	d4e0      	bmi.n	8005c50 <_fflush_r+0xc>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	059b      	lsls	r3, r3, #22
 8005c92:	d4dd      	bmi.n	8005c50 <_fflush_r+0xc>
 8005c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c96:	f7ff f93e 	bl	8004f16 <__retarget_lock_release_recursive>
 8005c9a:	e7d9      	b.n	8005c50 <_fflush_r+0xc>
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <_fflush_r+0x70>)
 8005c9e:	429c      	cmp	r4, r3
 8005ca0:	d101      	bne.n	8005ca6 <_fflush_r+0x62>
 8005ca2:	68ac      	ldr	r4, [r5, #8]
 8005ca4:	e7df      	b.n	8005c66 <_fflush_r+0x22>
 8005ca6:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <_fflush_r+0x74>)
 8005ca8:	429c      	cmp	r4, r3
 8005caa:	bf08      	it	eq
 8005cac:	68ec      	ldreq	r4, [r5, #12]
 8005cae:	e7da      	b.n	8005c66 <_fflush_r+0x22>
 8005cb0:	08006064 	.word	0x08006064
 8005cb4:	08006084 	.word	0x08006084
 8005cb8:	08006044 	.word	0x08006044

08005cbc <_lseek_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4d05      	ldr	r5, [pc, #20]	; (8005cdc <_lseek_r+0x20>)
 8005cc8:	602a      	str	r2, [r5, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f7fb fa91 	bl	80011f2 <_lseek>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d102      	bne.n	8005cda <_lseek_r+0x1e>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	b103      	cbz	r3, 8005cda <_lseek_r+0x1e>
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	20000274 	.word	0x20000274

08005ce0 <__swhatbuf_r>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	460e      	mov	r6, r1
 8005ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce8:	4614      	mov	r4, r2
 8005cea:	2900      	cmp	r1, #0
 8005cec:	461d      	mov	r5, r3
 8005cee:	b096      	sub	sp, #88	; 0x58
 8005cf0:	da08      	bge.n	8005d04 <__swhatbuf_r+0x24>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005cf8:	602a      	str	r2, [r5, #0]
 8005cfa:	061a      	lsls	r2, r3, #24
 8005cfc:	d410      	bmi.n	8005d20 <__swhatbuf_r+0x40>
 8005cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d02:	e00e      	b.n	8005d22 <__swhatbuf_r+0x42>
 8005d04:	466a      	mov	r2, sp
 8005d06:	f000 f91d 	bl	8005f44 <_fstat_r>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	dbf1      	blt.n	8005cf2 <__swhatbuf_r+0x12>
 8005d0e:	9a01      	ldr	r2, [sp, #4]
 8005d10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d18:	425a      	negs	r2, r3
 8005d1a:	415a      	adcs	r2, r3
 8005d1c:	602a      	str	r2, [r5, #0]
 8005d1e:	e7ee      	b.n	8005cfe <__swhatbuf_r+0x1e>
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	2000      	movs	r0, #0
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	b016      	add	sp, #88	; 0x58
 8005d28:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d2c <__smakebuf_r>:
 8005d2c:	898b      	ldrh	r3, [r1, #12]
 8005d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d30:	079d      	lsls	r5, r3, #30
 8005d32:	4606      	mov	r6, r0
 8005d34:	460c      	mov	r4, r1
 8005d36:	d507      	bpl.n	8005d48 <__smakebuf_r+0x1c>
 8005d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	6123      	str	r3, [r4, #16]
 8005d40:	2301      	movs	r3, #1
 8005d42:	6163      	str	r3, [r4, #20]
 8005d44:	b002      	add	sp, #8
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	466a      	mov	r2, sp
 8005d4a:	ab01      	add	r3, sp, #4
 8005d4c:	f7ff ffc8 	bl	8005ce0 <__swhatbuf_r>
 8005d50:	9900      	ldr	r1, [sp, #0]
 8005d52:	4605      	mov	r5, r0
 8005d54:	4630      	mov	r0, r6
 8005d56:	f7ff f8ff 	bl	8004f58 <_malloc_r>
 8005d5a:	b948      	cbnz	r0, 8005d70 <__smakebuf_r+0x44>
 8005d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d60:	059a      	lsls	r2, r3, #22
 8005d62:	d4ef      	bmi.n	8005d44 <__smakebuf_r+0x18>
 8005d64:	f023 0303 	bic.w	r3, r3, #3
 8005d68:	f043 0302 	orr.w	r3, r3, #2
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	e7e3      	b.n	8005d38 <__smakebuf_r+0xc>
 8005d70:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <__smakebuf_r+0x7c>)
 8005d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	6020      	str	r0, [r4, #0]
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	9b00      	ldr	r3, [sp, #0]
 8005d80:	6120      	str	r0, [r4, #16]
 8005d82:	6163      	str	r3, [r4, #20]
 8005d84:	9b01      	ldr	r3, [sp, #4]
 8005d86:	b15b      	cbz	r3, 8005da0 <__smakebuf_r+0x74>
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d8e:	f000 f8eb 	bl	8005f68 <_isatty_r>
 8005d92:	b128      	cbz	r0, 8005da0 <__smakebuf_r+0x74>
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	81a3      	strh	r3, [r4, #12]
 8005da0:	89a0      	ldrh	r0, [r4, #12]
 8005da2:	4305      	orrs	r5, r0
 8005da4:	81a5      	strh	r5, [r4, #12]
 8005da6:	e7cd      	b.n	8005d44 <__smakebuf_r+0x18>
 8005da8:	08004d71 	.word	0x08004d71

08005dac <memchr>:
 8005dac:	4603      	mov	r3, r0
 8005dae:	b510      	push	{r4, lr}
 8005db0:	b2c9      	uxtb	r1, r1
 8005db2:	4402      	add	r2, r0
 8005db4:	4293      	cmp	r3, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	d101      	bne.n	8005dbe <memchr+0x12>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e003      	b.n	8005dc6 <memchr+0x1a>
 8005dbe:	7804      	ldrb	r4, [r0, #0]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	428c      	cmp	r4, r1
 8005dc4:	d1f6      	bne.n	8005db4 <memchr+0x8>
 8005dc6:	bd10      	pop	{r4, pc}

08005dc8 <memcpy>:
 8005dc8:	440a      	add	r2, r1
 8005dca:	4291      	cmp	r1, r2
 8005dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dd0:	d100      	bne.n	8005dd4 <memcpy+0xc>
 8005dd2:	4770      	bx	lr
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dda:	4291      	cmp	r1, r2
 8005ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005de0:	d1f9      	bne.n	8005dd6 <memcpy+0xe>
 8005de2:	bd10      	pop	{r4, pc}

08005de4 <memmove>:
 8005de4:	4288      	cmp	r0, r1
 8005de6:	b510      	push	{r4, lr}
 8005de8:	eb01 0402 	add.w	r4, r1, r2
 8005dec:	d902      	bls.n	8005df4 <memmove+0x10>
 8005dee:	4284      	cmp	r4, r0
 8005df0:	4623      	mov	r3, r4
 8005df2:	d807      	bhi.n	8005e04 <memmove+0x20>
 8005df4:	1e43      	subs	r3, r0, #1
 8005df6:	42a1      	cmp	r1, r4
 8005df8:	d008      	beq.n	8005e0c <memmove+0x28>
 8005dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e02:	e7f8      	b.n	8005df6 <memmove+0x12>
 8005e04:	4601      	mov	r1, r0
 8005e06:	4402      	add	r2, r0
 8005e08:	428a      	cmp	r2, r1
 8005e0a:	d100      	bne.n	8005e0e <memmove+0x2a>
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e16:	e7f7      	b.n	8005e08 <memmove+0x24>

08005e18 <__malloc_lock>:
 8005e18:	4801      	ldr	r0, [pc, #4]	; (8005e20 <__malloc_lock+0x8>)
 8005e1a:	f7ff b87b 	b.w	8004f14 <__retarget_lock_acquire_recursive>
 8005e1e:	bf00      	nop
 8005e20:	20000268 	.word	0x20000268

08005e24 <__malloc_unlock>:
 8005e24:	4801      	ldr	r0, [pc, #4]	; (8005e2c <__malloc_unlock+0x8>)
 8005e26:	f7ff b876 	b.w	8004f16 <__retarget_lock_release_recursive>
 8005e2a:	bf00      	nop
 8005e2c:	20000268 	.word	0x20000268

08005e30 <_free_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4605      	mov	r5, r0
 8005e34:	2900      	cmp	r1, #0
 8005e36:	d040      	beq.n	8005eba <_free_r+0x8a>
 8005e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e3c:	1f0c      	subs	r4, r1, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	bfb8      	it	lt
 8005e42:	18e4      	addlt	r4, r4, r3
 8005e44:	f7ff ffe8 	bl	8005e18 <__malloc_lock>
 8005e48:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <_free_r+0x8c>)
 8005e4a:	6813      	ldr	r3, [r2, #0]
 8005e4c:	b933      	cbnz	r3, 8005e5c <_free_r+0x2c>
 8005e4e:	6063      	str	r3, [r4, #4]
 8005e50:	6014      	str	r4, [r2, #0]
 8005e52:	4628      	mov	r0, r5
 8005e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e58:	f7ff bfe4 	b.w	8005e24 <__malloc_unlock>
 8005e5c:	42a3      	cmp	r3, r4
 8005e5e:	d908      	bls.n	8005e72 <_free_r+0x42>
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	1821      	adds	r1, r4, r0
 8005e64:	428b      	cmp	r3, r1
 8005e66:	bf01      	itttt	eq
 8005e68:	6819      	ldreq	r1, [r3, #0]
 8005e6a:	685b      	ldreq	r3, [r3, #4]
 8005e6c:	1809      	addeq	r1, r1, r0
 8005e6e:	6021      	streq	r1, [r4, #0]
 8005e70:	e7ed      	b.n	8005e4e <_free_r+0x1e>
 8005e72:	461a      	mov	r2, r3
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	b10b      	cbz	r3, 8005e7c <_free_r+0x4c>
 8005e78:	42a3      	cmp	r3, r4
 8005e7a:	d9fa      	bls.n	8005e72 <_free_r+0x42>
 8005e7c:	6811      	ldr	r1, [r2, #0]
 8005e7e:	1850      	adds	r0, r2, r1
 8005e80:	42a0      	cmp	r0, r4
 8005e82:	d10b      	bne.n	8005e9c <_free_r+0x6c>
 8005e84:	6820      	ldr	r0, [r4, #0]
 8005e86:	4401      	add	r1, r0
 8005e88:	1850      	adds	r0, r2, r1
 8005e8a:	4283      	cmp	r3, r0
 8005e8c:	6011      	str	r1, [r2, #0]
 8005e8e:	d1e0      	bne.n	8005e52 <_free_r+0x22>
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	4401      	add	r1, r0
 8005e96:	6011      	str	r1, [r2, #0]
 8005e98:	6053      	str	r3, [r2, #4]
 8005e9a:	e7da      	b.n	8005e52 <_free_r+0x22>
 8005e9c:	d902      	bls.n	8005ea4 <_free_r+0x74>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	e7d6      	b.n	8005e52 <_free_r+0x22>
 8005ea4:	6820      	ldr	r0, [r4, #0]
 8005ea6:	1821      	adds	r1, r4, r0
 8005ea8:	428b      	cmp	r3, r1
 8005eaa:	bf01      	itttt	eq
 8005eac:	6819      	ldreq	r1, [r3, #0]
 8005eae:	685b      	ldreq	r3, [r3, #4]
 8005eb0:	1809      	addeq	r1, r1, r0
 8005eb2:	6021      	streq	r1, [r4, #0]
 8005eb4:	6063      	str	r3, [r4, #4]
 8005eb6:	6054      	str	r4, [r2, #4]
 8005eb8:	e7cb      	b.n	8005e52 <_free_r+0x22>
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	2000026c 	.word	0x2000026c

08005ec0 <_realloc_r>:
 8005ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	4614      	mov	r4, r2
 8005ec8:	460e      	mov	r6, r1
 8005eca:	b921      	cbnz	r1, 8005ed6 <_realloc_r+0x16>
 8005ecc:	4611      	mov	r1, r2
 8005ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed2:	f7ff b841 	b.w	8004f58 <_malloc_r>
 8005ed6:	b92a      	cbnz	r2, 8005ee4 <_realloc_r+0x24>
 8005ed8:	f7ff ffaa 	bl	8005e30 <_free_r>
 8005edc:	4625      	mov	r5, r4
 8005ede:	4628      	mov	r0, r5
 8005ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee4:	f000 f850 	bl	8005f88 <_malloc_usable_size_r>
 8005ee8:	4284      	cmp	r4, r0
 8005eea:	4607      	mov	r7, r0
 8005eec:	d802      	bhi.n	8005ef4 <_realloc_r+0x34>
 8005eee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ef2:	d812      	bhi.n	8005f1a <_realloc_r+0x5a>
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	f7ff f82e 	bl	8004f58 <_malloc_r>
 8005efc:	4605      	mov	r5, r0
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d0ed      	beq.n	8005ede <_realloc_r+0x1e>
 8005f02:	42bc      	cmp	r4, r7
 8005f04:	4622      	mov	r2, r4
 8005f06:	4631      	mov	r1, r6
 8005f08:	bf28      	it	cs
 8005f0a:	463a      	movcs	r2, r7
 8005f0c:	f7ff ff5c 	bl	8005dc8 <memcpy>
 8005f10:	4631      	mov	r1, r6
 8005f12:	4640      	mov	r0, r8
 8005f14:	f7ff ff8c 	bl	8005e30 <_free_r>
 8005f18:	e7e1      	b.n	8005ede <_realloc_r+0x1e>
 8005f1a:	4635      	mov	r5, r6
 8005f1c:	e7df      	b.n	8005ede <_realloc_r+0x1e>
	...

08005f20 <_read_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4d05      	ldr	r5, [pc, #20]	; (8005f40 <_read_r+0x20>)
 8005f2c:	602a      	str	r2, [r5, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f7fb f902 	bl	8001138 <_read>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d102      	bne.n	8005f3e <_read_r+0x1e>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	b103      	cbz	r3, 8005f3e <_read_r+0x1e>
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	20000274 	.word	0x20000274

08005f44 <_fstat_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	2300      	movs	r3, #0
 8005f48:	4d06      	ldr	r5, [pc, #24]	; (8005f64 <_fstat_r+0x20>)
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	602b      	str	r3, [r5, #0]
 8005f52:	f7fb f935 	bl	80011c0 <_fstat>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	d102      	bne.n	8005f60 <_fstat_r+0x1c>
 8005f5a:	682b      	ldr	r3, [r5, #0]
 8005f5c:	b103      	cbz	r3, 8005f60 <_fstat_r+0x1c>
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
 8005f62:	bf00      	nop
 8005f64:	20000274 	.word	0x20000274

08005f68 <_isatty_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4d05      	ldr	r5, [pc, #20]	; (8005f84 <_isatty_r+0x1c>)
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	f7fb f933 	bl	80011de <_isatty>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_isatty_r+0x1a>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_isatty_r+0x1a>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	20000274 	.word	0x20000274

08005f88 <_malloc_usable_size_r>:
 8005f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f8c:	1f18      	subs	r0, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bfbc      	itt	lt
 8005f92:	580b      	ldrlt	r3, [r1, r0]
 8005f94:	18c0      	addlt	r0, r0, r3
 8005f96:	4770      	bx	lr

08005f98 <_init>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	bf00      	nop
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr

08005fa4 <_fini>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	bf00      	nop
 8005fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005faa:	bc08      	pop	{r3}
 8005fac:	469e      	mov	lr, r3
 8005fae:	4770      	bx	lr
